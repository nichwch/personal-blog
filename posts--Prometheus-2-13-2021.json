{"":[{"content":"Images","parent":"posts/Roadmap to exegesis' beta release-1-3-2021.txt","score":0.8755930010386553},{"content":"Edit: 1/6/2021","parent":"posts/Roadmap to exegesis' beta release-1-3-2021.txt","score":0.8686066054110362},{"content":"Conclusion","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8627111729312937},{"content":"Key Features","parent":"posts/Roadmap to exegesis' beta release-1-3-2021.txt","score":0.8621480151447609},{"content":"Building tools","parent":"posts/untitled-9-20-2021.txt","score":0.8593290080388},{"content":"Yes.","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.859011141952105},{"content":"The club does 2 things.","parent":"posts/untitled-9-24-2021.txt","score":0.8589669169415844},{"content":"|___Practice Routine","parent":"posts/Roadmap to exegesis' beta release-1-3-2021.txt","score":0.8583546625772834},{"content":"Induction","parent":"posts/untitled-9-22-2021.txt","score":0.8577220980911441},{"content":"Code:","parent":"posts/Goals for Spring Quarter-3-17-2021.txt","score":0.856649564390397}],"Working on exegesis was a grueling affair at times. I rewrote the schema multiple times, rewrote the backend from scratch 2 months before release, chased countless UI bugs, and manually patched abandoned NPM packages. Part of it may have been due to my inexperience, but [working with ](https://nichwch.medium.com/making-yana-e3fade3f56e7)[rich text](https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480) is just a [difficult task](https://twitter.com/thesephist/status/1360298464349999108), period. At one point, I considered giving up after finding a rival writing app I thought I simply couldn't compete with - I have a copy of an unfinished essay I started writing on why I had given up tucked away somewhere. ":[{"content":"Working on exegesis was a grueling affair at times. I rewrote the schema multiple times, rewrote the backend from scratch 2 months before release, chased countless UI bugs, and manually patched abandoned NPM packages. Part of it may have been due to my inexperience, but [working with ](https://nichwch.medium.com/making-yana-e3fade3f56e7)[rich text](https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480) is just a [difficult task](https://twitter.com/thesephist/status/1360298464349999108), period. At one point, I considered giving up after finding a rival writing app I thought I simply couldn't compete with - I have a copy of an unfinished essay I started writing on why I had given up tucked away somewhere.","parent":"posts/Prometheus-2-13-2021.txt","score":1},{"content":"Why did it take so long? Part of it is just a lack of experience. While making exegesis, I changed the database schema countless times, wrote dozens of migrations, accidentally wiped my database once (thank God for RDS backups), and rewrote the backend from scratch 2 months before release. There was also a good amount of feature creep. Whenever I thought I was close to finished, something unexpected would pop up - I started writing this essay 3 months before I actually released exegesis. Whatever the reason, if you count development time on the predecessor to exegesis, I've spent almost a tenth of my life building this. The entire project clocks in at a couple thousand lines of code. It is the largest, most complex, and most difficult thing I have built so far in my life.  [The last time I worked on a project this long, it was the first video game I made back in my senior year of high school.](https://medium.com/@nichwch/machine-gods-devlog-1-166dff474366) Even then, it was really about 6 months of development total, with a huge gap in between because of school, and it was all made with no-code game development tools, because back then the idea of using actual code terrified me. [[exegesis]] [[personal-reflection]]","parent":"posts/Reflections on exegesis-10-7-2020.txt","score":0.9072592092564252},{"content":"Continue working on exegesis (and maybe some other personal projects)","parent":"posts/Goals for Spring Quarter-3-17-2021.txt","score":0.9033009780170073},{"content":"This was reassuring, because it meant I had made something genuinely useful. In the past, I have made things I simply had no desire to use - one example is [JAFT](https://nichwch.medium.com/what-is-jaft-f543a4fad9d7), a time tracking app I made after making YANA (the predecessor to exegesis). I stopped using it after a bit, and didn't bother renewing the domain. I don't miss JAFT at all. The fact that I did miss exegesis on the days where it wasn't operational was a good sign.","parent":"posts/Second Brains-2-13-2021.txt","score":0.9014896606446499},{"content":"I want to continue working on [[exegesis]]. There are still a plethora of features I want to build into the app. I have wanted to build something like this for a long time - I sort of did with my last project [YANA](https://yananotes.com/), but the core text engine was so limited that I had to start over from scratch (the product of which is exegesis). I want to sort out a formal list of features before a beta release, and an eventual public release. I will probably use exegesis as a devlog of sorts as well.","parent":"posts/Reflections for the New Year-1-2-2021.txt","score":0.8965715542855852},{"content":"Before working on exegesis, I released a proof-of-concept called [YANA](https://yananotes.com/). It made the front page of [ProductHunt](https://www.producthunt.com/posts/yana), accrued almost 400 users, and put a few enthusiastic emails in my inbox. Because YANA was built with a rudimentary text engine that I wanted to upgrade, I decided to start over - the product of which is exegesis. Though it is not actively maintained, there are still a dozen or so active YANA users.","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8935696854616738},{"content":"In some sense exegesis gave birth to itself, because I used it to organize my ideas about exegesis. On days where exegesis was not working because I had broken something while coding it, I noticed that I could not think as clearly. Its absence was felt.","parent":"posts/Second Brains-2-13-2021.txt","score":0.8881008197554215},{"content":"If this sounds silly, that's because it is. Reality check: note taking apps are just note taking apps; it is supremely arrogant to think that you think you can replicate with a couple KLOCs of javascript code what took evolution thousands of years to perfect. I have stopped thinking about exegesis as a personal knowledge management system or a notetaking app. For me it is the mental equivalent of [perpetual stew](https://en.wikipedia.org/wiki/Perpetual_stew) - I leave it on the stove and toss ideas in whenever its convenient. The effortlessness is the point; if I ever find myself drawing a diagram to have to figure out how to use it, that defeats the purpose of the whole thing.","parent":"posts/Second Brains-2-13-2021.txt","score":0.8844094924746905},{"content":"exegesis has taken about a year to make. Including the development of its predecessor, YANA, it's taken about a year and a half. When I started making YANA the summer after my freshman year, I thought it'd be a small project; just a little utility for me to track my thoughts. I had no idea it'd balloon into such a large endeavor.","parent":"posts/Reflections on exegesis-10-7-2020.txt","score":0.8820472520629693},{"content":"exegesis offers the familiar interface of Google Docs in a convenient browser app, with the added powers of a networked, nonlinear writing app. For a casual user, interested in capturing and organizing their thoughts, exegesis presents a unique and compelling value proposition.","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8808124181847967}],"Anyone who takes satisfaction in creative work knows how good it feels to make something. That feeling can get addicting, to the point where you hunger to make progress on a creative project even when you're burned out - you want to create something so badly you can't take a break without thinking about it, but you're too burned out to make progress on it. At moments like these, one craves divine creative stamina, the ability to create out of thin air effortlessly, to beam ideas from one's head into reality, to spawn an entire universe within the span of a week like the God of the Old Testament.[[personal-reflection]] ":[{"content":"Anyone who takes satisfaction in creative work knows how good it feels to make something. That feeling can get addicting, to the point where you hunger to make progress on a creative project even when you're burned out - you want to create something so badly you can't take a break without thinking about it, but you're too burned out to make progress on it. At moments like these, one craves divine creative stamina, the ability to create out of thin air effortlessly, to beam ideas from one's head into reality, to spawn an entire universe within the span of a week like the God of the Old Testament.[[personal-reflection]]","parent":"posts/Prometheus-2-13-2021.txt","score":0.9999999999999999},{"content":"Is creative work painful by nature? Nietzsche calls boredom \"that disagreeable 'windless calm' of the soul that precedes a happy voyage and cheerful winds.\" Maybe it is good for creative stamina to be burned out from time to time.","parent":"posts/Prometheus-2-13-2021.txt","score":0.9065013911735708},{"content":"Most importantly, I've been a creative my whole life. I understand how satisfying it is to make ideas a reality, and how frustrating it is when our tools fall short of our vision (a bad artist blames his tool, a great artist crafts his own).","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8787599430925976},{"content":"There are few feelings worse than wanting desperately to make something, and feeling as if you do not have the capability to make it.","parent":"posts/untitled-9-22-2021.txt","score":0.8718628235927736},{"content":"I want to return to my roots. I want to get excited by little ideas and not worry about scaling them, or fitting them into a huge vision, or turning them into legible accomplishments. I still want to be ambitious, but I don't want to let my ambition choke my creativity.","parent":"posts/Fragments.txt","score":0.8707668572465614},{"content":"I stopped working on little projects. The voice in my head that would get excited by little hints of an idea was drowned out by demands that everything be in the service of something ambitious, something legible, something monetizable. I let my ambition trap me.","parent":"posts/Fragments.txt","score":0.8701788582091378},{"content":"It is this property that allows programmers to cheat the Gods, and achieve divine levels of creative output thought forbidden to mortals. A programmer can create abstractions than enable them to create in days what previously took months. I myself rewrote a good part of exegesis 2 months before I released it, and the new abstractions I picked enabled me to redo in those 2 months what took me almost a year at first. Moreover, programmers can share their abstractions, and borrow the inventions of others as well.","parent":"posts/Prometheus-2-13-2021.txt","score":0.863743416007118},{"content":"These are my hobbies that I use to take a break from code related creative-work.","parent":"posts/Goals for Spring Quarter-3-17-2021.txt","score":0.8601958365559433},{"content":"Tools for creative thought","parent":"posts/On tools for thought: knowledge management vs creativity-8-27-2021.txt","score":0.8560928603707619},{"content":"This project, too, has had a large effect on me - you can't work on something for a year and not have it affect you. I started this project sitting in a coffee shop; now I haven't sat in one for months. I know this sounds like navel gazing, but I've worked on this project through a pandemic, civil unrest, and statewide wildfires. Now it's finished, and I almost feel a little bittersweet releasing it.","parent":"posts/Reflections on exegesis-10-7-2020.txt","score":0.8560184814394964}],"There is at least one creative medium for which this is not true, however, and that is programming. Here is a unique and strange property of programming: Making tools to program better itself involves programming. This is not true for music or art - the process of making a guitar is not the art of playing the guitar, the process of making paints is not the art of painting, and while luthiers and paint-makers are certainly artists in their own right (and are often good at playing the guitar and painting, respectively), they practice an art that is distinct from the art that they enable. ":[{"content":"There is at least one creative medium for which this is not true, however, and that is programming. Here is a unique and strange property of programming: Making tools to program better itself involves programming. This is not true for music or art - the process of making a guitar is not the art of playing the guitar, the process of making paints is not the art of painting, and while luthiers and paint-makers are certainly artists in their own right (and are often good at playing the guitar and painting, respectively), they practice an art that is distinct from the art that they enable.","parent":"posts/Prometheus-2-13-2021.txt","score":1},{"content":"This is not the case for programming. Making better tools for programming (new languages, new frameworks, new libraries) itself requires programming, and while making programming tools is different in important respects from writing regular programs, it is still programming. Making guitars is not playing guitars, making paints is not painting, but making better programming tools is programming. Programming, then, is an, intrinsically recursive creative medium.","parent":"posts/Prometheus-2-13-2021.txt","score":0.9425790141265705},{"content":"Creative tools vs rational tools","parent":"posts/On tools for thought: knowledge management vs creativity-8-27-2021.txt","score":0.8717629589555326},{"content":"In my teen years, I found programming and videogame development, and that became my creative outlet for a while. I found a way to scan my drawings into digital files, and for a while that was my way of combining art and programming.","parent":"posts/Fragments.txt","score":0.8700289102359433},{"content":"In general, computers have enabled the Promethean task of stealing creative abilities previously reserved for deities. Musicians have their electrically amplified instruments, their DAWs, the vast oceans of samples available on the internet; artists have been blessed with digital canvases, 3D modeling, and the ubiquity of screens that renders a possible canvas in every man's pocket.","parent":"posts/Prometheus-2-13-2021.txt","score":0.8594574584939939},{"content":"Most importantly, I've been a creative my whole life. I understand how satisfying it is to make ideas a reality, and how frustrating it is when our tools fall short of our vision (a bad artist blames his tool, a great artist crafts his own).","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8558639381452403},{"content":"Higher-order creativity","parent":"posts/Prometheus-2-13-2021.txt","score":0.8548797827399077},{"content":"It is this property that allows programmers to cheat the Gods, and achieve divine levels of creative output thought forbidden to mortals. A programmer can create abstractions than enable them to create in days what previously took months. I myself rewrote a good part of exegesis 2 months before I released it, and the new abstractions I picked enabled me to redo in those 2 months what took me almost a year at first. Moreover, programmers can share their abstractions, and borrow the inventions of others as well.","parent":"posts/Prometheus-2-13-2021.txt","score":0.8533944011392112},{"content":"For example, I'm starting to suspect that no styling library is going to provide a good experience, because the fundamental pain point is trying to express a visual idea with a text-based set of rules. A styling library can provide some affordances that make things easier - easy theming, dark mode, conditional styles, etc. etc - but the fundamental painful experience of trying to express a visual idea in code cannot be ameliorated with better code tools.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8532406062762756},{"content":"Visionaries, artists, and creatives do not want to live in a spreadsheet. They have no interest in writing emacs macros or writing custom JS plugins for Roam Research. They want something like the Macbook of tools for thought - something beautiful and well crafted that gets out of the way and lets you do your best work.","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8521871033125479}],"But this is something forbidden to mortal men. We face a kind of creative asymmetry - to bring beauty into the world, it is neccessary to confront ugliness. Creating beautiful, original music requires endless, stupid, and frustrating scale practice, finger exercises, and theory study; behind the sublime beauty of a master's painting lies hours of practice filling sketchbooks with mind numbing still lifes and ugly anatomical mistakes. On the one hand, it seems paradoxical that beauty, freedom and originality require ugliness, servitude, and repetition. On the other hand, it is almost coldly rational - perhaps there is a kind of aesthetic entropy at play, like there's a set amount of beauty in the universe, and to \"produce\" any more of it, you first have to take on ugliness as a burden.[[music]] [[aesthetics]] [[art]] ":[{"content":"But this is something forbidden to mortal men. We face a kind of creative asymmetry - to bring beauty into the world, it is neccessary to confront ugliness. Creating beautiful, original music requires endless, stupid, and frustrating scale practice, finger exercises, and theory study; behind the sublime beauty of a master's painting lies hours of practice filling sketchbooks with mind numbing still lifes and ugly anatomical mistakes. On the one hand, it seems paradoxical that beauty, freedom and originality require ugliness, servitude, and repetition. On the other hand, it is almost coldly rational - perhaps there is a kind of aesthetic entropy at play, like there's a set amount of beauty in the universe, and to \"produce\" any more of it, you first have to take on ugliness as a burden.[[music]] [[aesthetics]] [[art]]","parent":"posts/Prometheus-2-13-2021.txt","score":1.0000000000000002},{"content":"Beauty is something worth striving for, even if failing at it makes you look stupid.","parent":"posts/Minimalism-6-8-2021.txt","score":0.8826753797735404},{"content":"Is creative work painful by nature? Nietzsche calls boredom \"that disagreeable 'windless calm' of the soul that precedes a happy voyage and cheerful winds.\" Maybe it is good for creative stamina to be burned out from time to time.","parent":"posts/Prometheus-2-13-2021.txt","score":0.8600696844496629},{"content":"[[mark-fischer]] argues that capitalism creates boring products because it leads to companies giving people what they want, when really \"the most powerful forms of desire are precisely cravings for the strange, the unexpected, the weird. These can only be supplied by artists and media professionals who are prepared to give people something different from that which already satisfies them... to wager on the strange and our appetite for it. It is another irony that capitalism's society of risk is much less likely to take this kind of risk than was the supposedly stodgy, centralized culture of the postwar social consensus.\" He goes on to argue that some \"innovations are unthinkable now that the public has been displaced by the consumer.\"  [[quotes]] [[Capitalist-Realism]] [[aesthetics]] [[exegesis]]","parent":"posts/untitled-9-20-2021.txt","score":0.8599815884611979},{"content":"In general, computers have enabled the Promethean task of stealing creative abilities previously reserved for deities. Musicians have their electrically amplified instruments, their DAWs, the vast oceans of samples available on the internet; artists have been blessed with digital canvases, 3D modeling, and the ubiquity of screens that renders a possible canvas in every man's pocket.","parent":"posts/Prometheus-2-13-2021.txt","score":0.8525404606256217},{"content":"An aesthetic/ethical frame of mind concerns itself with beauty and values. It cares not about the ability of the individual, but their conviction - how strongly they believe in the values they've subordinated themselves to.","parent":"posts/untitled-9-30-2021.txt","score":0.8521950580026265}],"In general, computers have enabled the Promethean task of stealing creative abilities previously reserved for deities. Musicians have their electrically amplified instruments, their DAWs, the vast oceans of samples available on the internet; artists have been blessed with digital canvases, 3D modeling, and the ubiquity of screens that renders a possible canvas in every man's pocket. ":[{"content":"In general, computers have enabled the Promethean task of stealing creative abilities previously reserved for deities. Musicians have their electrically amplified instruments, their DAWs, the vast oceans of samples available on the internet; artists have been blessed with digital canvases, 3D modeling, and the ubiquity of screens that renders a possible canvas in every man's pocket.","parent":"posts/Prometheus-2-13-2021.txt","score":1},{"content":"In my teen years, I found programming and videogame development, and that became my creative outlet for a while. I found a way to scan my drawings into digital files, and for a while that was my way of combining art and programming.","parent":"posts/Fragments.txt","score":0.8639549911334785},{"content":"There is at least one creative medium for which this is not true, however, and that is programming. Here is a unique and strange property of programming: Making tools to program better itself involves programming. This is not true for music or art - the process of making a guitar is not the art of playing the guitar, the process of making paints is not the art of painting, and while luthiers and paint-makers are certainly artists in their own right (and are often good at playing the guitar and painting, respectively), they practice an art that is distinct from the art that they enable.","parent":"posts/Prometheus-2-13-2021.txt","score":0.8594574584939939},{"content":"Technology that you control","parent":"posts/Giant Robots-2-28-2021.txt","score":0.8582397863353249},{"content":"None of the above. I got a targeted Facebook ad for Fender's free online guitar course. I remember this very distinctly as the moment I decided to learn guitar; I had never really thought much about it at all before that. Deep within the entrails of Facebook's recommendation engine, some algorithm made an educated guess that I'd enjoy picking up the guitar - and it was right. For all the horrible things Facebook has done, this was a real positive-sum, Pareto optimal moment. Zuck got his advertising check, and I got a new hobby. And for all that has been blamed on the internet, I owe it everything. Everything that I love doing, I have learned to some extent from the internet, whether it be the web development skills that I built exegesis with, my amateur interest in philosophy, my childhood love for art, or my newfound interest in guitar. I believe it is mankind's most beautiful invention.","parent":"posts/Giant Robots-2-28-2021.txt","score":0.8556086070934289},{"content":"Tools for creative thought","parent":"posts/On tools for thought: knowledge management vs creativity-8-27-2021.txt","score":0.8534043785664196},{"content":"But this is something forbidden to mortal men. We face a kind of creative asymmetry - to bring beauty into the world, it is neccessary to confront ugliness. Creating beautiful, original music requires endless, stupid, and frustrating scale practice, finger exercises, and theory study; behind the sublime beauty of a master's painting lies hours of practice filling sketchbooks with mind numbing still lifes and ugly anatomical mistakes. On the one hand, it seems paradoxical that beauty, freedom and originality require ugliness, servitude, and repetition. On the other hand, it is almost coldly rational - perhaps there is a kind of aesthetic entropy at play, like there's a set amount of beauty in the universe, and to \"produce\" any more of it, you first have to take on ugliness as a burden.[[music]] [[aesthetics]] [[art]]","parent":"posts/Prometheus-2-13-2021.txt","score":0.8525404606256217},{"content":"Most importantly, I've been a creative my whole life. I understand how satisfying it is to make ideas a reality, and how frustrating it is when our tools fall short of our vision (a bad artist blames his tool, a great artist crafts his own).","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8517071443122957},{"content":"I strongly believe tools for thought have leaned too much towards knowledge management and underindexed on enabling creatives. The latest advances in the space - backlinks, transclusion, spatial interfaces, language models/NLP - will be useful for knowledge work, but they will prove even more powerful in the hands of creatives.","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8516895927928517},{"content":"Visionaries, artists, and creatives do not want to live in a spreadsheet. They have no interest in writing emacs macros or writing custom JS plugins for Roam Research. They want something like the Macbook of tools for thought - something beautiful and well crafted that gets out of the way and lets you do your best work.","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8516709162733698}],"It is this property that allows programmers to cheat the Gods, and achieve divine levels of creative output thought forbidden to mortals. A programmer can create abstractions than enable them to create in days what previously took months. I myself rewrote a good part of exegesis 2 months before I released it, and the new abstractions I picked enabled me to redo in those 2 months what took me almost a year at first. Moreover, programmers can share their abstractions, and borrow the inventions of others as well.":[{"content":"It is this property that allows programmers to cheat the Gods, and achieve divine levels of creative output thought forbidden to mortals. A programmer can create abstractions than enable them to create in days what previously took months. I myself rewrote a good part of exegesis 2 months before I released it, and the new abstractions I picked enabled me to redo in those 2 months what took me almost a year at first. Moreover, programmers can share their abstractions, and borrow the inventions of others as well.","parent":"posts/Prometheus-2-13-2021.txt","score":1},{"content":"Why did it take so long? Part of it is just a lack of experience. While making exegesis, I changed the database schema countless times, wrote dozens of migrations, accidentally wiped my database once (thank God for RDS backups), and rewrote the backend from scratch 2 months before release. There was also a good amount of feature creep. Whenever I thought I was close to finished, something unexpected would pop up - I started writing this essay 3 months before I actually released exegesis. Whatever the reason, if you count development time on the predecessor to exegesis, I've spent almost a tenth of my life building this. The entire project clocks in at a couple thousand lines of code. It is the largest, most complex, and most difficult thing I have built so far in my life.  [The last time I worked on a project this long, it was the first video game I made back in my senior year of high school.](https://medium.com/@nichwch/machine-gods-devlog-1-166dff474366) Even then, it was really about 6 months of development total, with a huge gap in between because of school, and it was all made with no-code game development tools, because back then the idea of using actual code terrified me. [[exegesis]] [[personal-reflection]]","parent":"posts/Reflections on exegesis-10-7-2020.txt","score":0.8990651196022891},{"content":"In some sense exegesis gave birth to itself, because I used it to organize my ideas about exegesis. On days where exegesis was not working because I had broken something while coding it, I noticed that I could not think as clearly. Its absence was felt.","parent":"posts/Second Brains-2-13-2021.txt","score":0.8865026494491665},{"content":"Working on exegesis was a grueling affair at times. I rewrote the schema multiple times, rewrote the backend from scratch 2 months before release, chased countless UI bugs, and manually patched abandoned NPM packages. Part of it may have been due to my inexperience, but [working with ](https://nichwch.medium.com/making-yana-e3fade3f56e7)[rich text](https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480) is just a [difficult task](https://twitter.com/thesephist/status/1360298464349999108), period. At one point, I considered giving up after finding a rival writing app I thought I simply couldn't compete with - I have a copy of an unfinished essay I started writing on why I had given up tucked away somewhere.","parent":"posts/Prometheus-2-13-2021.txt","score":0.8786172424034696},{"content":"[[Why I made exegesis]]","parent":"posts/Reflections on exegesis-10-7-2020.txt","score":0.8666546487787925},{"content":"The main focus here is personal projects - learning more code and writing more are auxiliary activities that help this end. First among these personal projects is [[exegesis]], but I have a number of other personal projects that I want to work on as well.","parent":"posts/Goals for Spring Quarter-3-17-2021.txt","score":0.8646493362053839},{"content":"I see three ways to monetize exegesis:","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8644142047350234},{"content":"This was reassuring, because it meant I had made something genuinely useful. In the past, I have made things I simply had no desire to use - one example is [JAFT](https://nichwch.medium.com/what-is-jaft-f543a4fad9d7), a time tracking app I made after making YANA (the predecessor to exegesis). I stopped using it after a bit, and didn't bother renewing the domain. I don't miss JAFT at all. The fact that I did miss exegesis on the days where it wasn't operational was a good sign.","parent":"posts/Second Brains-2-13-2021.txt","score":0.8637485514832319},{"content":"Anyone who takes satisfaction in creative work knows how good it feels to make something. That feeling can get addicting, to the point where you hunger to make progress on a creative project even when you're burned out - you want to create something so badly you can't take a break without thinking about it, but you're too burned out to make progress on it. At moments like these, one craves divine creative stamina, the ability to create out of thin air effortlessly, to beam ideas from one's head into reality, to spawn an entire universe within the span of a week like the God of the Old Testament.[[personal-reflection]]","parent":"posts/Prometheus-2-13-2021.txt","score":0.863743416007118},{"content":"Continue working on exegesis (and maybe some other personal projects)","parent":"posts/Goals for Spring Quarter-3-17-2021.txt","score":0.862670756430732}],"But it is only recently that writers have endeavored to steal fire for themselves. Only recently have brave pioneers ventured to create tools for that one art synonymous with thought, that one medium separating man from animal, that one power \"which outlasts kingdoms.\" Here, the work has only begun.":[{"content":"But it is only recently that writers have endeavored to steal fire for themselves. Only recently have brave pioneers ventured to create tools for that one art synonymous with thought, that one medium separating man from animal, that one power \"which outlasts kingdoms.\" Here, the work has only begun.","parent":"posts/Prometheus-2-13-2021.txt","score":1},{"content":"Anyone doing creative work must carefully toe the line between two extremes: the collaborative extreme of butchering ideas by putting them into words, the auteur's extreme of refusing to communicate anything about an idea at all.","parent":"posts/On auteurs and language-10-9-2021.txt","score":0.8531590890419896}],"Is creative work painful by nature? Nietzsche calls boredom \"that disagreeable 'windless calm' of the soul that precedes a happy voyage and cheerful winds.\" Maybe it is good for creative stamina to be burned out from time to time. ":[{"content":"Is creative work painful by nature? Nietzsche calls boredom \"that disagreeable 'windless calm' of the soul that precedes a happy voyage and cheerful winds.\" Maybe it is good for creative stamina to be burned out from time to time.","parent":"posts/Prometheus-2-13-2021.txt","score":1.0000000000000002},{"content":"Anyone who takes satisfaction in creative work knows how good it feels to make something. That feeling can get addicting, to the point where you hunger to make progress on a creative project even when you're burned out - you want to create something so badly you can't take a break without thinking about it, but you're too burned out to make progress on it. At moments like these, one craves divine creative stamina, the ability to create out of thin air effortlessly, to beam ideas from one's head into reality, to spawn an entire universe within the span of a week like the God of the Old Testament.[[personal-reflection]]","parent":"posts/Prometheus-2-13-2021.txt","score":0.9065013911735708},{"content":"I think it's important to have free time to just mess around and be bored, and explore dumb things that might turn out to be not so dumb - after all, \"boredom is that disagreeable 'windless calm' of the soul that precedes a happy voyage and cheerful winds.\" Every activity I eventually took seriously - Model UN in high school, programming in college - started out as an casual hobby I never planned to take seriously. So, I'd rather have slow progress towards my goals and a sizeable chunk of time to mess around, than to fill my days to the point where I have no time to explore at all.","parent":"posts/Goals for Spring Quarter-3-17-2021.txt","score":0.8629378035955223},{"content":"Creative inadequacy","parent":"posts/untitled-9-22-2021.txt","score":0.8620164760797799},{"content":"Most importantly, I've been a creative my whole life. I understand how satisfying it is to make ideas a reality, and how frustrating it is when our tools fall short of our vision (a bad artist blames his tool, a great artist crafts his own).","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8618492068352182},{"content":"But this is something forbidden to mortal men. We face a kind of creative asymmetry - to bring beauty into the world, it is neccessary to confront ugliness. Creating beautiful, original music requires endless, stupid, and frustrating scale practice, finger exercises, and theory study; behind the sublime beauty of a master's painting lies hours of practice filling sketchbooks with mind numbing still lifes and ugly anatomical mistakes. On the one hand, it seems paradoxical that beauty, freedom and originality require ugliness, servitude, and repetition. On the other hand, it is almost coldly rational - perhaps there is a kind of aesthetic entropy at play, like there's a set amount of beauty in the universe, and to \"produce\" any more of it, you first have to take on ugliness as a burden.[[music]] [[aesthetics]] [[art]]","parent":"posts/Prometheus-2-13-2021.txt","score":0.8600696844496629},{"content":"I want to return to my roots. I want to get excited by little ideas and not worry about scaling them, or fitting them into a huge vision, or turning them into legible accomplishments. I still want to be ambitious, but I don't want to let my ambition choke my creativity.","parent":"posts/Fragments.txt","score":0.8598768136040321},{"content":"Anyone doing creative work must carefully toe the line between two extremes: the collaborative extreme of butchering ideas by putting them into words, the auteur's extreme of refusing to communicate anything about an idea at all.","parent":"posts/On auteurs and language-10-9-2021.txt","score":0.8572564789399885},{"content":"I stopped working on little projects. The voice in my head that would get excited by little hints of an idea was drowned out by demands that everything be in the service of something ambitious, something legible, something monetizable. I let my ambition trap me.","parent":"posts/Fragments.txt","score":0.8502292547875087}],"Higher-order creativity":[{"content":"Higher-order creativity","parent":"posts/Prometheus-2-13-2021.txt","score":1},{"content":"Tools for creative thought","parent":"posts/On tools for thought: knowledge management vs creativity-8-27-2021.txt","score":0.8753892544935785},{"content":"Most importantly, I've been a creative my whole life. I understand how satisfying it is to make ideas a reality, and how frustrating it is when our tools fall short of our vision (a bad artist blames his tool, a great artist crafts his own).","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8703347758760471},{"content":"The goal is to keep things creative and lighthearted, to mess around with as many ideas as possible.","parent":"posts/untitled-9-24-2021.txt","score":0.8641235572981797},{"content":"Anyone doing creative work must carefully toe the line between two extremes: the collaborative extreme of butchering ideas by putting them into words, the auteur's extreme of refusing to communicate anything about an idea at all.","parent":"posts/On auteurs and language-10-9-2021.txt","score":0.863711437611787},{"content":"Creative tools vs rational tools","parent":"posts/On tools for thought: knowledge management vs creativity-8-27-2021.txt","score":0.8627908452599995},{"content":"I strongly believe tools for thought have leaned too much towards knowledge management and underindexed on enabling creatives. The latest advances in the space - backlinks, transclusion, spatial interfaces, language models/NLP - will be useful for knowledge work, but they will prove even more powerful in the hands of creatives.","parent":"posts/exegesis pitch-2-4-2021.txt","score":0.8605246303933384},{"content":"I want to return to my roots. I want to get excited by little ideas and not worry about scaling them, or fitting them into a huge vision, or turning them into legible accomplishments. I still want to be ambitious, but I don't want to let my ambition choke my creativity.","parent":"posts/Fragments.txt","score":0.8584431850920538},{"content":"The assumption behind every collaborative creative endeavor is that language can capture ideas, and that language can mediate between ideas. Those who believe creative collaboration is possible believe that multiple creatives can enter the same room, use language to successfully communicate their ideas, use language to successfully mediate between their ideas, and use language to combine their ideas into a worthwhile final product.","parent":"posts/On auteurs and language-10-9-2021.txt","score":0.8553568698009995},{"content":"There is at least one creative medium for which this is not true, however, and that is programming. Here is a unique and strange property of programming: Making tools to program better itself involves programming. This is not true for music or art - the process of making a guitar is not the art of playing the guitar, the process of making paints is not the art of painting, and while luthiers and paint-makers are certainly artists in their own right (and are often good at playing the guitar and painting, respectively), they practice an art that is distinct from the art that they enable.","parent":"posts/Prometheus-2-13-2021.txt","score":0.8548797827399077}],"This is not the case for programming. Making better tools for programming (new languages, new frameworks, new libraries) itself requires programming, and while making programming tools is different in important respects from writing regular programs, it is still programming. Making guitars is not playing guitars, making paints is not painting, but making better programming tools is programming. Programming, then, is an, intrinsically recursive creative medium. ":[{"content":"This is not the case for programming. Making better tools for programming (new languages, new frameworks, new libraries) itself requires programming, and while making programming tools is different in important respects from writing regular programs, it is still programming. Making guitars is not playing guitars, making paints is not painting, but making better programming tools is programming. Programming, then, is an, intrinsically recursive creative medium.","parent":"posts/Prometheus-2-13-2021.txt","score":1},{"content":"There is at least one creative medium for which this is not true, however, and that is programming. Here is a unique and strange property of programming: Making tools to program better itself involves programming. This is not true for music or art - the process of making a guitar is not the art of playing the guitar, the process of making paints is not the art of painting, and while luthiers and paint-makers are certainly artists in their own right (and are often good at playing the guitar and painting, respectively), they practice an art that is distinct from the art that they enable.","parent":"posts/Prometheus-2-13-2021.txt","score":0.9425790141265705},{"content":"Creative tools vs rational tools","parent":"posts/On tools for thought: knowledge management vs creativity-8-27-2021.txt","score":0.870425579085585},{"content":"For example, I'm starting to suspect that no styling library is going to provide a good experience, because the fundamental pain point is trying to express a visual idea with a text-based set of rules. A styling library can provide some affordances that make things easier - easy theming, dark mode, conditional styles, etc. etc - but the fundamental painful experience of trying to express a visual idea in code cannot be ameliorated with better code tools.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8700236956831952},{"content":"Front end development should be way more visual. A great deal of front-end development pain points cannot be fixed with fancier libraries and languages, because the fundamental mismatch is trying to create something visual with a text-based tool.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8661586663782865},{"content":"I want to learn more code. Working on [[exegesis]] over the course of a year, I saw my coding ability improve substantially. Towards the last 2 months, while rewriting a part of the codebase, I found myself dumbfounded by some of the decisions and patterns I had used a year earlier. The code I wrote towards the end was noticeably cleaner and more maintainable, mostly because I had familiarized myself with [[React]] hooks. Learning NextJS and GraphQL was also very rewarding, and both technologies were used extensively in the final version of exegesis. Looking forwards, I am thinking about learning Go, Clojure and maybe Rust. Go is the most practical one of all these for my purposes, and could open up a lot of job offers. Clojure is the most interesting from a theoretical standpoint, since I've never used a lisp or functional language. Rust is interesting because I hate systems/low-level programming, but I suspect that might only be because I hate C, and maybe Rust's more modern features will sell me on it.","parent":"posts/Reflections for the New Year-1-2-2021.txt","score":0.864737499590764},{"content":"I want to clarify that I'm not bullish at all on no-code. I think \"no-code\" and \"low-code\" are the wrong way to frame things. There is a place for tools like this, but it's more productive to think of them as \"visual developer tools.\"[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8605394682047259},{"content":"It is this property that allows programmers to cheat the Gods, and achieve divine levels of creative output thought forbidden to mortals. A programmer can create abstractions than enable them to create in days what previously took months. I myself rewrote a good part of exegesis 2 months before I released it, and the new abstractions I picked enabled me to redo in those 2 months what took me almost a year at first. Moreover, programmers can share their abstractions, and borrow the inventions of others as well.","parent":"posts/Prometheus-2-13-2021.txt","score":0.853473917275555},{"content":"Learn more code (new languages, new frameworks, new databases, fancy tech like blockchain and ML, etc. etc.)","parent":"posts/Goals for Spring Quarter-3-17-2021.txt","score":0.8530433072633128},{"content":"Learning Javascript, I never took notes, because all the reference docs were online anyways. Besides, the difficult part of programming isn't remembering APIs, it's the process of taking an idea and building it out, and there's no way to get better at that except by building. There's a reason most university CS courses don't test memorization heavily and instead focus on having students build projects. I suspect this is true for a lot of subjects.","parent":"posts/On tools for thought: knowledge management vs creativity-8-27-2021.txt","score":0.8517100246446254}]}