Growing up, my main creative outlet was drawing. As soon as a pencil or pen touched my hand I would have to draw something - it was almost involuntary. Many school notebooks were ruined this way, many concerned teachers advised me to keep my homework free of doodles.

In my teen years, I found programming and videogame development, and that became my creative outlet for a while. I found a way to scan my drawings into digital files, and for a while that was my way of combining art and programming.

There was a problem with both of these outlets, however: my short attention span. I struggled to work on larger drawings, because I'd give up on them and start new doodles. The same happened with code projects.

I fell in love with playing the guitar because it rewards this lack of an attention span. You can copy a riff in minutes. You can create a new riff in minutes. Picking up a guitar puts me in an instant flow state, because I can just screw around and play with ideas instantly. It feels like a REPL for musical ideas.

I desperately want programming to feel like this.

For a while, I exclusively worked on a long, serious projects. I wanted to build a billion dollar product. I wanted to be the founder of a successful startup. I wanted to write, but I wanted to write on my own platform that everybody else would also write on, that would have all the features I wanted that everybody else would love.

I stopped working on little projects. The voice in my head that would get excited by little hints of an idea was drowned out by demands that everything be in the service of something ambitious, something legible, something monetizable. I let my ambition trap me.

I want to return to my roots. I want to get excited by little ideas and not worry about scaling them, or fitting them into a huge vision, or turning them into legible accomplishments. I still want to be ambitious, but I don't want to let my ambition choke my creativity.

I want this new site to be a space for that.

I want a space to be incoherent. I want a space to just throw paint on the walls.

I want a space to be able to make up UI components on the spot, and then never use them again, or maybe use them again if I feel like it. Like tossing out a riff on the guitar.

~
In fact, in the middle of an essay, I should be able to invent a UI component just to illustrate a point.

Early internet vibes.
~

Why should that be a process that only happens in Figma or notebooks? Why not go directly to code? The answer is that code requires set up. It requires a repository, and a framework, and a database, and infrastructure.

If you share some infrastructure that lets you play around with ideas quickly and also share them quickly, that solves the problem. Stuff like Repl.it does this, but I feel less of a sense of ownership over it.

This site will be that infrastructure for me. It will be a place for me to play with ideas quickly.

I want my computer to feel like my guitar. I want it to feel like I can noodle here.

Next.js's file-based routing makes it easy to create a fresh page on my site. styled-components helps isolate css styles so that I don't have to worry about conflicting css rules.

A minimap makes all of this accessible from anywhere. You can access it by clicking the green button at the bottom, or by pressing command K.

The idea is to just make a ton of side projects and put them all here. I have some preliminary ideas on how I can organize this but I'm not particularly set on anything right now. I don't feel particularly limited by framework choice either - with the liberal use of iFrames, I can simply embed other projects using different frameworks here. I've already done that with a project I've created with Svelte.


Many of my ideas are in service of a singular dream: having the ability to combine incoherent fragments of creative inspiration into a cohesive organized whole. exegesis is about enabling that with writing. I hope the design of this site will help me do that with interface ideas.

~
Cardinal Newman said of Napoleon, 'He understood the grammar of gunpowder.'... Alexis de Tocqueville was the first to master the grammar of print and typography.
From pg 28 of Understanding Media by Marshall McLuhan
~

The way Napoleon understood the grammar of gunpowder and de Tocqueville understood the grammar of print and typography, I would like to master the grammar of hypertext.