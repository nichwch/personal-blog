// comments on substack: https://nickchen.substack.com/p/generational-computing
My dream is to enable something I term "generational computing." I want my kids and my grandkids to someday be able to interface with the artifacts of my digital life. I want them to be able to read my notes and ask an LLM about what I've learned over my life. I want them to be able to chat with a replica of me trained on my writings. I want them to be able to look through the music I made and the music I listened to, and see the connections between the two. I want them to be able to upload their own musical ideas or writings, and see the connections between what they've made and what I've made. 

I want to build a system that will enable someone to write about a problem that they have, then discover that their great aunt encountered the exact same problem in her life, and how she came to a solution.

I want digital technology to bridge divides between generations instead of widening them. I want it to foster remembrance instead of forgetting. I want it to reward thinking multiple generations into the future instead of until the end of the quarter.

Cloud software lacks the longetivity to enable this dream. Modern day cloud applications take huge amounts of manpower and capital to maintain, which means they are subject to the whims of markets. Established products like Google Docs are unlikely to shut down, but they are still subject to market pressures, and you will inevitably log in one day to find the entire interface revamped, or worse, your favorite feature nerfed. Over a century or two, how confident are you that your data and applications will still be usable?

In the physical world, you can pass things down through the generations - a leather jacket your father owned, a relic couch from your grandparents, your uncle's vintage 1960s Stratocaster, etc. etc. These objects carry their history with them; they are imbued with the spirit of their past owners and their experiences. 

With cloud software, our digital lives lack this permanence. Startups shut down left and right, products get split into multiple products or merged together, interfaces get redesigned and their redesigns get redesigned, all at the whims of the markets or feuding product managers. This is not a stable foundation to build anything lasting on top of.

My hope is that local-first AI and CRDTs enable us to create decentralized, local first software that will stand the tests of time. This is why I'm so bullish on local first applications, plain text, file systems, and unix - they have already stood the tests of time, and will likely continue to. They are deeply lindy in a way that mobile and cloud computing are not. 

// comments on substack: https://nickchen.substack.com/p/generational-computing


