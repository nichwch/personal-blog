{"Growing up, my main creative outlet was drawing. As soon as a pencil or pen touched my hand I would have to draw something - it was almost involuntary. Many school notebooks were ruined this way, many concerned teachers advised me to keep my homework free of doodles.": [{"content": "Growing up, my main creative outlet was drawing. As soon as a pencil or pen touched my hand I would have to draw something - it was almost involuntary. Many school notebooks were ruined this way, many concerned teachers advised me to keep my homework free of doodles.", "parent": "Fragments.txt", "score": -4.76837158203125e-07}, {"content": "I want to improve at drawing. Drawing is something I've always loved doing, my notebooks from middle school and high school have more doodles in them than proper notes. I never took it particularly seriously, and when life got busy, I'd stop drawing for months on end. However, when I returned, it was always still fun. In fact, every time I've tried to get into \"regular\" drawing practice, it's always been miserable. There's some strange effect here where the longer I go without drawing, the better my drawings tend to be, as if drawing ability were a fixed resource that took time to build up. [[drawing]] ", "parent": "Reflections for the New Year.txt", "score": 0.3374439477920532}, {"content": "In my teen years, I found programming and videogame development, and that became my creative outlet for a while. I found a way to scan my drawings into digital files, and for a while that was my way of combining art and programming.", "parent": "Fragments.txt", "score": 0.45733869075775146}, {"content": "There was a problem with both of these outlets, however: my short attention span. I struggled to work on larger drawings, because I'd give up on them and start new doodles. The same happened with code projects.", "parent": "Fragments.txt", "score": 0.4710221290588379}, {"content": "The compromise that I've arrived at, and that I've tried so far with a decent amount of success, is to draw with my preferred medium (pen), in my own style, while also using a reference. I use the reference for the pose and some of the details, and use my imagination to make up the rest. This is infinitely more interesting for me, and doesn't feel like a dreary technical exercise. I've also given up on using pencil, or charcoal, or anything except pen. I used to harbor a lot of guilt over this, because shouldn't an artist be able to use any medium? Of course, this is ridiculous, it'd be like asking a musician to be familiar with every instrument. It makes far more sense to get really good with one medium than to be mediocre with multiple (feeling some cognitive dissonance here with my desire to learn both the [[piano]] and the [[guitar]]...). Of course, professional artists (and musicians) really should be learning multiple mediums, but I have no aspiration to be professional at either, only to have some fun. [[drawing]] [[piano]] [[guitar]] ", "parent": "Reflections for the New Year.txt", "score": 0.5034846067428589}, {"content": "That being said, I think I've figured out a different drawing routine that will work this time. Past practice routines always centered around trying to copy other people's art, or doing realistic sketches/pose practice in pencil. I enjoy drawing without references the most, making things up as I go. Drawing from a reference is always boring and dreary for me. However, there's really no way to improve without using references. This is especially true since my biggest drawing deficiencies are not being able to draw people's faces well, portraying 3D shapes in a non-flat way, shading/cross-hatching, and posing figures naturally.[[drawing]] ", "parent": "Reflections for the New Year.txt", "score": 0.5283071994781494}, {"content": "Practice drawing 3 times a week", "parent": "Goals for Spring Quarter.txt", "score": 0.5504161439530642}, {"content": "For drawing, I'd like to practice drawing reference images in my own style 3 times a week, with a focus on drawing more three dimensionally, drawing people/poses, and using color. ", "parent": "Goals for Spring Quarter.txt", "score": 0.5593347585638959}, {"content": "As I grew older, I tried to fix myself in various ways. I tried blocking out all of my time in a calendar. I tried blocking distracting websites. I tried living my life in a three-ring binder. I tried planners, I tried meditation, I tried todo lists, I tried kanban boards. I tried to not care, I tried caring too much. ", "parent": "Why I made exegesis.txt", "score": 0.5606656074523926}, {"content": "Get better at drawing", "parent": "Goals for Spring Quarter.txt", "score": 0.5729260503065587}], "": [{"content": "~", "parent": "NOW PAGE.txt", "score": 0.6013319492340088}, {"content": "~", "parent": "Fragments.txt", "score": 0.6013319492340088}, {"content": "~", "parent": "Fragments.txt", "score": 0.6013319492340088}, {"content": "~", "parent": "Plaintext is your best friend.txt", "score": 0.6013771295547485}, {"content": "~", "parent": "untitled-1-4-2022.txt", "score": 0.6013792157173157}, {"content": "~", "parent": "The making of Nomad Hypertext.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "The making of Nomad Hypertext.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "Second Brains.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "What is Nomad Hypertext.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "What is Nomad Hypertext.txt", "score": 0.6014099717140198}], "In my teen years, I found programming and videogame development, and that became my creative outlet for a while. I found a way to scan my drawings into digital files, and for a while that was my way of combining art and programming.": [{"content": "In my teen years, I found programming and videogame development, and that became my creative outlet for a while. I found a way to scan my drawings into digital files, and for a while that was my way of combining art and programming.", "parent": "Fragments.txt", "score": 8.344650268554688e-07}, {"content": "Growing up, my main creative outlet was drawing. As soon as a pencil or pen touched my hand I would have to draw something - it was almost involuntary. Many school notebooks were ruined this way, many concerned teachers advised me to keep my homework free of doodles.", "parent": "Fragments.txt", "score": 0.45749402046203613}, {"content": "That last project had a significant effect on me. Back in high school, I was heavily involved in Model UN and other political clubs. Making the [game](https://nichwch.itch.io/machinegods) made me realize it was making things and not winning arguments that really made me happier. It was also what convinced me that programming could be something more than rote problem solving, and even be a genuine creative medium. It was why I switched my major from Economics to Computer Science in college.[[personal-reflection]] ", "parent": "Reflections on exegesis.txt", "score": 0.49319344758987427}, {"content": "These are my hobbies that I use to take a break from code related creative-work.  ", "parent": "Goals for Spring Quarter.txt", "score": 0.49531603361664966}, {"content": "I have not had as much time to work on programming side projects. In general, I've been spending more spare time on music rather than programming. There's nothing intrinsically wrong with that, but I feel like it's less a reflection of what I want than it is a reflection of my environment. \n\nI don't actually find music to be more fulfilling than programming. I got into playing the guitar mostly by accident and to be honest I am much better at the guitar than I am at programming, but playing the guitar was never my dream growing up. There are software ideas that I am excited about and obsessed with. I don't really feel the same way about music.", "parent": "NOW PAGE.txt", "score": 0.5119980573654175}, {"content": "My goal in life right now is to focus more on programming, while keeping music as a hobby. I want to improve at both, and someday I'd like to unite these two interests - not in some surface level way like getting really into digital signal processing or generative music, but by making the process of writing software more like the process of making music (intuitive, embodied, modular, composable).", "parent": "NOW PAGE.txt", "score": 0.5302987098693848}, {"content": "There was a problem with both of these outlets, however: my short attention span. I struggled to work on larger drawings, because I'd give up on them and start new doodles. The same happened with code projects.", "parent": "Fragments.txt", "score": 0.5303382873535156}, {"content": "I want to improve at drawing. Drawing is something I've always loved doing, my notebooks from middle school and high school have more doodles in them than proper notes. I never took it particularly seriously, and when life got busy, I'd stop drawing for months on end. However, when I returned, it was always still fun. In fact, every time I've tried to get into \"regular\" drawing practice, it's always been miserable. There's some strange effect here where the longer I go without drawing, the better my drawings tend to be, as if drawing ability were a fixed resource that took time to build up. [[drawing]] ", "parent": "Reflections for the New Year.txt", "score": 0.5449897646903992}, {"content": "I might not really care for making music, but learning how to play the guitar showed me what I'm looking for from a creative process. If I can form a creative process that feels like playing the guitar and outputs software, that would be very rewarding.", "parent": "NOW PAGE.txt", "score": 0.5617705583572388}, {"content": "This is not the case for programming. Making better tools for programming (new languages, new frameworks, new libraries) itself requires programming, and while making programming tools is different in important respects from writing regular programs, it is still programming. Making guitars is not playing guitars, making paints is not painting, but making better programming tools is programming. Programming, then, is an, intrinsically recursive creative medium. ", "parent": "Prometheus.txt", "score": 0.5688000321388245}], "There was a problem with both of these outlets, however: my short attention span. I struggled to work on larger drawings, because I'd give up on them and start new doodles. The same happened with code projects.": [{"content": "There was a problem with both of these outlets, however: my short attention span. I struggled to work on larger drawings, because I'd give up on them and start new doodles. The same happened with code projects.", "parent": "Fragments.txt", "score": 1.2516975402832031e-06}, {"content": "Growing up, my main creative outlet was drawing. As soon as a pencil or pen touched my hand I would have to draw something - it was almost involuntary. Many school notebooks were ruined this way, many concerned teachers advised me to keep my homework free of doodles.", "parent": "Fragments.txt", "score": 0.4710850715637207}, {"content": "I want to improve at drawing. Drawing is something I've always loved doing, my notebooks from middle school and high school have more doodles in them than proper notes. I never took it particularly seriously, and when life got busy, I'd stop drawing for months on end. However, when I returned, it was always still fun. In fact, every time I've tried to get into \"regular\" drawing practice, it's always been miserable. There's some strange effect here where the longer I go without drawing, the better my drawings tend to be, as if drawing ability were a fixed resource that took time to build up. [[drawing]] ", "parent": "Reflections for the New Year.txt", "score": 0.48566776514053345}, {"content": "Actually, I'm not sure which I prefer yet. I have noticed, however, that sometimes I'll sit down to work for 2 hours, and proceed to waste it all, until the last 20 minutes or so, when I become desperate to get something done so the entire period wasn't a waste of time. That 20 minutes is often incredibly productive. When I only have pockets of 30 minute breaks throughout the day to work on a project, it's like every break is that last 20 minutes of a 2 hour work period. Or not, sometimes I end up getting nothing done, wishing I had 2 hours to do deep, focused work. [[focus]] [[personal-reflection]] ", "parent": "untitled-10-1-2021.txt", "score": 0.512050449848175}, {"content": "In my teen years, I found programming and videogame development, and that became my creative outlet for a while. I found a way to scan my drawings into digital files, and for a while that was my way of combining art and programming.", "parent": "Fragments.txt", "score": 0.5302996635437012}, {"content": "I stopped working on little projects. The voice in my head that would get excited by little hints of an idea was drowned out by demands that everything be in the service of something ambitious, something legible, something monetizable. I let my ambition trap me.", "parent": "Fragments.txt", "score": 0.5460729598999023}, {"content": "I noticed that it had trouble maintaining continuity through different weeks. For example, if I started a project one week and wrote more about it the next week, it'd have trouble realizing that I was talking about the same project in both journal entries. This is because I write for myself in my journal, and don't feel a need to constantly reintroduce context that I'm aware of. I suspect most people also journal this way.", "parent": "Interface Journal: Summary Tool.txt", "score": 0.5518411758473716}, {"content": "I don't care if my work gets noticed, or if it's any good, or if it leads to anything at all. I don't know if I have any talent for interface research, but it seems like I might - my sophomore year of college, I designed a notetaking tool called YANA with a novel interface where you could select text and then add tags to it. The response to it was very positive, which encouraged me to try and build a startup out of it, which unfortunately led to me becoming monomaniacally obsessed with that idea at the expense of trying to explore any other ideas (an obsession I only shed once I made Nomad Hypertext, which I could call a \"finished\" product). ", "parent": "Interface Work.txt", "score": 0.5585508346557617}, {"content": "Working on exegesis was a grueling affair at times. I rewrote the schema multiple times, rewrote the backend from scratch 2 months before release, chased countless UI bugs, and manually patched abandoned NPM packages. Part of it may have been due to my inexperience, but [working with ](https://nichwch.medium.com/making-yana-e3fade3f56e7)[rich text](https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480) is just a [difficult task](https://twitter.com/thesephist/status/1360298464349999108), period. At one point, I considered giving up after finding a rival writing app I thought I simply couldn't compete with - I have a copy of an unfinished essay I started writing on why I had given up tucked away somewhere. ", "parent": "Prometheus.txt", "score": 0.562575101852417}, {"content": "The steady rhythm of school and myriad 30-minute break periods it produces throughout the day have a good effect on my productivity, which is surprising. There's that famous [Paul Graham essay](http://www.paulgraham.com/makersschedule.html) where he talks about hacker schedules, or how programmers/creators prefer long periods of focused time over short fragmented work periods (that managers tend to prefer) because there's an overhead cost to loading a project into your head. [[focus]] [[personal-reflection]] ", "parent": "untitled-10-1-2021.txt", "score": 0.5664852261543274}], "I fell in love with playing the guitar because it rewards this lack of an attention span. You can copy a riff in minutes. You can create a new riff in minutes. Picking up a guitar puts me in an instant flow state, because I can just screw around and play with ideas instantly. It feels like a REPL for musical ideas.": [{"content": "I fell in love with playing the guitar because it rewards this lack of an attention span. You can copy a riff in minutes. You can create a new riff in minutes. Picking up a guitar puts me in an instant flow state, because I can just screw around and play with ideas instantly. It feels like a REPL for musical ideas.", "parent": "Fragments.txt", "score": 0.0}, {"content": "I love how physical playing the guitar is. I love the tactile sensation of steel strings digging into my fingers. I love how it requires me to coordinate all of my senses together. I love being able to experiment with small, self contained ideas with looper pedal. I love how it lets you map musical ideas into your head into concrete muscle memory, and I love that this muscle memory is *portable* between different keys and different songs.  ", "parent": "NOW PAGE.txt", "score": 0.3279110789299011}, {"content": "I might not really care for making music, but learning how to play the guitar showed me what I'm looking for from a creative process. If I can form a creative process that feels like playing the guitar and outputs software, that would be very rewarding.", "parent": "NOW PAGE.txt", "score": 0.3782455325126648}, {"content": "I want to try a different approach this time. There will be no central organizing idea or principle. Playing the guitar taught me that my creative process works best when I'm free to noodle on the ideas that are immediately interesting to me, not ideas that are part of some preset plan. I have fond memories of sitting on the bus back from my first internship, cracking open my laptop, deciding to try and hack together a first version of YANA. I feel considerably less nostalgic for the late nights I spent during the pandemic trying to \"scale\" my idea, wrestling with pitch decks and AWS dashboards. I had lots of other ideas at the time, but didn't work on them because I felt focusing on exegesis was the correct thing to do. When I first started playing the guitar, I felt guilty learning other songs if I hadn't finished learning a past song. In reality, giving up on songs/concepts I wasn't interested in was incredibly good for my learning in the long run (provided I was still learning new things).", "parent": "Interface Work.txt", "score": 0.4342026710510254}, {"content": "Playing a lot of guitar. Thinking about how fundamental rhythm is to the guitar, even when playing lead lines. Thinking about how you can approach solos like a series of improvised rhythmic riffs. Listening to a lot of King Crimson. ", "parent": "NOW-Jan-05-2024.txt", "score": 0.43570810556411743}, {"content": "Here's an anecdote to illustrate my point: I picked up guitar at the start of quarantine. What inspired this? Was it a childhood dream of mine? Maybe I wanted to be like my favorite rock stars? Or was it just the boredom?", "parent": "Giant Robots.txt", "score": 0.4457433819770813}, {"content": "I enjoy the process of sitting with my guitar, generating riff ideas on the fly, soloing over 8 bar progressions on my looper, but I'm not excited at all about creating a song. In many ways, my feelings about software are kind of the opposite. I have mixed, love/hate feelings about the process of writing software (reading documentation, chasing down bugs, writing tests, etc), but I feel incredibly excited about the end product. ", "parent": "NOW PAGE.txt", "score": 0.4487457275390625}, {"content": "I have not had as much time to work on programming side projects. In general, I've been spending more spare time on music rather than programming. There's nothing intrinsically wrong with that, but I feel like it's less a reflection of what I want than it is a reflection of my environment. \n\nI don't actually find music to be more fulfilling than programming. I got into playing the guitar mostly by accident and to be honest I am much better at the guitar than I am at programming, but playing the guitar was never my dream growing up. There are software ideas that I am excited about and obsessed with. I don't really feel the same way about music.", "parent": "NOW PAGE.txt", "score": 0.48372167348861694}, {"content": "Thinking about how the piano is an explicitly visual instrument (laid out for easy sight reading), while the guitar is a more tactile and auditory instrument (difficult to sight read, rewards learning by ear therefore auditory; strings literally cut into your fingers, therefore tactile). ", "parent": "NOW-Jan-05-2024.txt", "score": 0.4873506426811218}, {"content": "I want my computer to feel like my guitar. I want it to feel like I can noodle here.", "parent": "Fragments.txt", "score": 0.4895334839820862}], "I desperately want programming to feel like this.": [{"content": "I desperately want programming to feel like this.", "parent": "Fragments.txt", "score": 0.0}, {"content": "I want my computer to feel like my guitar. I want it to feel like I can noodle here.", "parent": "Fragments.txt", "score": 0.4429692029953003}, {"content": "I hate how flat computer interfaces are. I hate how disembodied sitting in front of a screen makes me feel. I hate straining my eyes to dig through a mountain of text, while my other senses lay unused and completely idle. I hate gigantic codebases with massive piles of dependencies and hour long build processes, where you must test every little idea you have against a mountain of assumptions to make sure it doesn't break anything.", "parent": "NOW PAGE.txt", "score": 0.4807816743850708}, {"content": "My goal in life right now is to focus more on programming, while keeping music as a hobby. I want to improve at both, and someday I'd like to unite these two interests - not in some surface level way like getting really into digital signal processing or generative music, but by making the process of writing software more like the process of making music (intuitive, embodied, modular, composable).", "parent": "NOW PAGE.txt", "score": 0.49343425035476685}, {"content": "I'm not really sure how to square this. One idea I've been obsessed with is how I can make the process of writing software more like the process of making music. ", "parent": "NOW PAGE.txt", "score": 0.5125075578689575}, {"content": "I have not had as much time to work on programming side projects. In general, I've been spending more spare time on music rather than programming. There's nothing intrinsically wrong with that, but I feel like it's less a reflection of what I want than it is a reflection of my environment. \n\nI don't actually find music to be more fulfilling than programming. I got into playing the guitar mostly by accident and to be honest I am much better at the guitar than I am at programming, but playing the guitar was never my dream growing up. There are software ideas that I am excited about and obsessed with. I don't really feel the same way about music.", "parent": "NOW PAGE.txt", "score": 0.5256408452987671}, {"content": "This is not the case for programming. Making better tools for programming (new languages, new frameworks, new libraries) itself requires programming, and while making programming tools is different in important respects from writing regular programs, it is still programming. Making guitars is not playing guitars, making paints is not painting, but making better programming tools is programming. Programming, then, is an, intrinsically recursive creative medium. ", "parent": "Prometheus.txt", "score": 0.5350047945976257}, {"content": "I enjoy the process of sitting with my guitar, generating riff ideas on the fly, soloing over 8 bar progressions on my looper, but I'm not excited at all about creating a song. In many ways, my feelings about software are kind of the opposite. I have mixed, love/hate feelings about the process of writing software (reading documentation, chasing down bugs, writing tests, etc), but I feel incredibly excited about the end product. ", "parent": "NOW PAGE.txt", "score": 0.5433536171913147}, {"content": "It is this property that allows programmers to cheat the Gods, and achieve divine levels of creative output thought forbidden to mortals. A programmer can create abstractions than enable them to create in days what previously took months. I myself rewrote a good part of exegesis 2 months before I released it, and the new abstractions I picked enabled me to redo in those 2 months what took me almost a year at first. Moreover, programmers can share their abstractions, and borrow the inventions of others as well.", "parent": "Prometheus.txt", "score": 0.5520967841148376}, {"content": "That last project had a significant effect on me. Back in high school, I was heavily involved in Model UN and other political clubs. Making the [game](https://nichwch.itch.io/machinegods) made me realize it was making things and not winning arguments that really made me happier. It was also what convinced me that programming could be something more than rote problem solving, and even be a genuine creative medium. It was why I switched my major from Economics to Computer Science in college.[[personal-reflection]] ", "parent": "Reflections on exegesis.txt", "score": 0.5719989538192749}], "For a while, I exclusively worked on a long, serious projects. I wanted to build a billion dollar product. I wanted to be the founder of a successful startup. I wanted to write, but I wanted to write on my own platform that everybody else would also write on, that would have all the features I wanted that everybody else would love.": [{"content": "For a while, I exclusively worked on a long, serious projects. I wanted to build a billion dollar product. I wanted to be the founder of a successful startup. I wanted to write, but I wanted to write on my own platform that everybody else would also write on, that would have all the features I wanted that everybody else would love.", "parent": "Fragments.txt", "score": 1.1920928955078125e-07}, {"content": "I stopped working on little projects. The voice in my head that would get excited by little hints of an idea was drowned out by demands that everything be in the service of something ambitious, something legible, something monetizable. I let my ambition trap me.", "parent": "Fragments.txt", "score": 0.47068238258361816}, {"content": "I don't care if my work gets noticed, or if it's any good, or if it leads to anything at all. I don't know if I have any talent for interface research, but it seems like I might - my sophomore year of college, I designed a notetaking tool called YANA with a novel interface where you could select text and then add tags to it. The response to it was very positive, which encouraged me to try and build a startup out of it, which unfortunately led to me becoming monomaniacally obsessed with that idea at the expense of trying to explore any other ideas (an obsession I only shed once I made Nomad Hypertext, which I could call a \"finished\" product). ", "parent": "Interface Work.txt", "score": 0.47194212675094604}, {"content": "Working on exegesis was a grueling affair at times. I rewrote the schema multiple times, rewrote the backend from scratch 2 months before release, chased countless UI bugs, and manually patched abandoned NPM packages. Part of it may have been due to my inexperience, but [working with ](https://nichwch.medium.com/making-yana-e3fade3f56e7)[rich text](https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480) is just a [difficult task](https://twitter.com/thesephist/status/1360298464349999108), period. At one point, I considered giving up after finding a rival writing app I thought I simply couldn't compete with - I have a copy of an unfinished essay I started writing on why I had given up tucked away somewhere. ", "parent": "Prometheus.txt", "score": 0.503684937953949}, {"content": "This is not groundbreaking news, but it's groundbreaking for me. I started my software engineering career writing code with cloud applications in mind, and the idea that you can ship cool projects without running database migrations or doing extensive backtesting against your monolith *is* groundbreaking to me. In college I wanted my own blog and instead of getting a static site generator I built out a cloud application with NextJS, PostgreSQL and Heroku. I did learn a lot and it helped me land my first internship, but now it strikes me as an incredibly wrong minded approach. ", "parent": "NOW PAGE.txt", "score": 0.5054678916931152}, {"content": "I want to return to my roots. I want to get excited by little ideas and not worry about scaling them, or fitting them into a huge vision, or turning them into legible accomplishments. I still want to be ambitious, but I don't want to let my ambition choke my creativity.", "parent": "Fragments.txt", "score": 0.5240222215652466}, {"content": "I want to continue working on [[exegesis]]. There are still a plethora of features I want to build into the app. I have wanted to build something like this for a long time - I sort of did with my last project [YANA](https://yananotes.com/), but the core text engine was so limited that I had to start over from scratch (the product of which is exegesis). I want to sort out a formal list of features before a beta release, and an eventual public release. I will probably use exegesis as a devlog of sorts as well.", "parent": "Reflections for the New Year.txt", "score": 0.5255945920944214}, {"content": "I fell into this kind of thinking while building exegesis, and it put an enormous amount of pressure on me, because it made me feel as if it wasn't just a notetaking app I was building, but a shrine for the mind. I would look at other notetaking systems like Roam Research and feel threatened - my notetaking app wasn't as powerful as theirs, therefore my mind would be weaker than theirs. Every little imperfection, every unimplemented feature, every bug felt sacrilegious - this was my second brain I was building after all. Needless to say, this led to a lot of feature creep, because my second brain had to be perfect.", "parent": "Second Brains.txt", "score": 0.526092529296875}, {"content": "Why did it take so long? Part of it is just a lack of experience. While making exegesis, I changed the database schema countless times, wrote dozens of migrations, accidentally wiped my database once (thank God for RDS backups), and rewrote the backend from scratch 2 months before release. There was also a good amount of feature creep. Whenever I thought I was close to finished, something unexpected would pop up - I started writing this essay 3 months before I actually released exegesis. Whatever the reason, if you count development time on the predecessor to exegesis, I've spent almost a tenth of my life building this. The entire project clocks in at a couple thousand lines of code. It is the largest, most complex, and most difficult thing I have built so far in my life.  [The last time I worked on a project this long, it was the first video game I made back in my senior year of high school.](https://medium.com/@nichwch/machine-gods-devlog-1-166dff474366) Even then, it was really about 6 months of development total, with a huge gap in between because of school, and it was all made with no-code game development tools, because back then the idea of using actual code terrified me. [[exegesis]] [[personal-reflection]] ", "parent": "Reflections on exegesis.txt", "score": 0.5276787281036377}, {"content": "I enjoy the process of sitting with my guitar, generating riff ideas on the fly, soloing over 8 bar progressions on my looper, but I'm not excited at all about creating a song. In many ways, my feelings about software are kind of the opposite. I have mixed, love/hate feelings about the process of writing software (reading documentation, chasing down bugs, writing tests, etc), but I feel incredibly excited about the end product. ", "parent": "NOW PAGE.txt", "score": 0.5350402593612671}], "I stopped working on little projects. The voice in my head that would get excited by little hints of an idea was drowned out by demands that everything be in the service of something ambitious, something legible, something monetizable. I let my ambition trap me.": [{"content": "I stopped working on little projects. The voice in my head that would get excited by little hints of an idea was drowned out by demands that everything be in the service of something ambitious, something legible, something monetizable. I let my ambition trap me.", "parent": "Fragments.txt", "score": 1.1920928955078125e-06}, {"content": "I want to return to my roots. I want to get excited by little ideas and not worry about scaling them, or fitting them into a huge vision, or turning them into legible accomplishments. I still want to be ambitious, but I don't want to let my ambition choke my creativity.", "parent": "Fragments.txt", "score": 0.3929802179336548}, {"content": "For a while, I exclusively worked on a long, serious projects. I wanted to build a billion dollar product. I wanted to be the founder of a successful startup. I wanted to write, but I wanted to write on my own platform that everybody else would also write on, that would have all the features I wanted that everybody else would love.", "parent": "Fragments.txt", "score": 0.47058993577957153}, {"content": "I fell into this kind of thinking while building exegesis, and it put an enormous amount of pressure on me, because it made me feel as if it wasn't just a notetaking app I was building, but a shrine for the mind. I would look at other notetaking systems like Roam Research and feel threatened - my notetaking app wasn't as powerful as theirs, therefore my mind would be weaker than theirs. Every little imperfection, every unimplemented feature, every bug felt sacrilegious - this was my second brain I was building after all. Needless to say, this led to a lot of feature creep, because my second brain had to be perfect.", "parent": "Second Brains.txt", "score": 0.49833571910858154}, {"content": "I don't care if my work gets noticed, or if it's any good, or if it leads to anything at all. I don't know if I have any talent for interface research, but it seems like I might - my sophomore year of college, I designed a notetaking tool called YANA with a novel interface where you could select text and then add tags to it. The response to it was very positive, which encouraged me to try and build a startup out of it, which unfortunately led to me becoming monomaniacally obsessed with that idea at the expense of trying to explore any other ideas (an obsession I only shed once I made Nomad Hypertext, which I could call a \"finished\" product). ", "parent": "Interface Work.txt", "score": 0.4994763135910034}, {"content": "Anyone doing creative work must carefully toe the line between two extremes: the collaborative extreme of butchering ideas by putting them into words, the auteur's extreme of refusing to communicate anything about an idea at all. ", "parent": "On auteurs and language.txt", "score": 0.5197323560714722}, {"content": "I've noticed a strange tradeoff, where the more things I pile into my morning routine (getting in a run, doing hw, etc. etc.) the freer I feel for the rest of the day, but the harder it makes it to actually get out of bed and face these mundane tasks. If I just do what I want in the morning - code side projects - I jump out of bed easily, but then I feel the weight of obligations over me. If I handle obligations in the morning, then the thought of doing boring things makes it hard to get out of bed [[focus]] [[focus-machine]] [[ideas]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5272386074066162}, {"content": "I've found writing down tasks and decomposing them into smaller ones helps. Right now, I do this in [[exegesis]], which honestly feels somewhat suboptimal. I also have another side project called [https://focusmachine.app/](https://focusmachine.app/) to remind me of what I'm currently supposed to be focusing - it's really stupid, it just asks you what you want to work on and then spams you with a reminder to focus on that at user-inputted interval. [[focus]] [[focus-machine]] [[ideas]] [[exegesis]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5349439978599548}, {"content": "I want to try a different approach this time. There will be no central organizing idea or principle. Playing the guitar taught me that my creative process works best when I'm free to noodle on the ideas that are immediately interesting to me, not ideas that are part of some preset plan. I have fond memories of sitting on the bus back from my first internship, cracking open my laptop, deciding to try and hack together a first version of YANA. I feel considerably less nostalgic for the late nights I spent during the pandemic trying to \"scale\" my idea, wrestling with pitch decks and AWS dashboards. I had lots of other ideas at the time, but didn't work on them because I felt focusing on exegesis was the correct thing to do. When I first started playing the guitar, I felt guilty learning other songs if I hadn't finished learning a past song. In reality, giving up on songs/concepts I wasn't interested in was incredibly good for my learning in the long run (provided I was still learning new things).", "parent": "Interface Work.txt", "score": 0.5413601398468018}, {"content": "There was a problem with both of these outlets, however: my short attention span. I struggled to work on larger drawings, because I'd give up on them and start new doodles. The same happened with code projects.", "parent": "Fragments.txt", "score": 0.5459230542182922}], "I want to return to my roots. I want to get excited by little ideas and not worry about scaling them, or fitting them into a huge vision, or turning them into legible accomplishments. I still want to be ambitious, but I don't want to let my ambition choke my creativity.": [{"content": "I want to return to my roots. I want to get excited by little ideas and not worry about scaling them, or fitting them into a huge vision, or turning them into legible accomplishments. I still want to be ambitious, but I don't want to let my ambition choke my creativity.", "parent": "Fragments.txt", "score": 1.1324882507324219e-06}, {"content": "I stopped working on little projects. The voice in my head that would get excited by little hints of an idea was drowned out by demands that everything be in the service of something ambitious, something legible, something monetizable. I let my ambition trap me.", "parent": "Fragments.txt", "score": 0.3930310010910034}, {"content": "I want to try a different approach this time. There will be no central organizing idea or principle. Playing the guitar taught me that my creative process works best when I'm free to noodle on the ideas that are immediately interesting to me, not ideas that are part of some preset plan. I have fond memories of sitting on the bus back from my first internship, cracking open my laptop, deciding to try and hack together a first version of YANA. I feel considerably less nostalgic for the late nights I spent during the pandemic trying to \"scale\" my idea, wrestling with pitch decks and AWS dashboards. I had lots of other ideas at the time, but didn't work on them because I felt focusing on exegesis was the correct thing to do. When I first started playing the guitar, I felt guilty learning other songs if I hadn't finished learning a past song. In reality, giving up on songs/concepts I wasn't interested in was incredibly good for my learning in the long run (provided I was still learning new things).", "parent": "Interface Work.txt", "score": 0.4604374170303345}, {"content": "This is a lot. I doubt I'll be able to do all of this, and if I fall short on time, I'll have to cut back on some of these activities. They are not listed in order of importance, I plan on figuring that out at a later date. What is important to me is that I actually think about what I want to do, and the priorities for them. It's all to easy to spend a day noodling on guitar, wanting to get better solely because I saw some guy play a fancy solo on Youtube, or to spend a day learning a programming language I'll never use because someone on Twitter praised it. This is a recipe for mediocrity, because progress takes sustained practice, and I can't sustain these sorts of \"inspirations.\" Instead, I want to think slowly and deliberately about what I want to get better at, and stick to a slow and steady plan to improve at it. That is my \"big-picture\" goal for this year. ", "parent": "Reflections for the New Year.txt", "score": 0.47317320108413696}, {"content": "Entrepreneurship is not neccessarily incompatible with \"small projects\" and staying agile, because entrepreneurs still have to pivot often. - but you're pivoting with respect to what customers want, not what will improve your craft, or what you're interested in. Good musicians do two things: practice sections they find difficult to play, and articulate musical ideas that they find interesting. They don't go out and call prospective listeners and ask what they'd like to hear.  ", "parent": "Small Projects.txt", "score": 0.5098584890365601}, {"content": "I think it's important to have free time to just mess around and be bored, and explore dumb things that might turn out to be not so dumb - after all, \"boredom is that disagreeable 'windless calm' of the soul that precedes a happy voyage and cheerful winds.\" Every activity I eventually took seriously - Model UN in high school, programming in college - started out as an casual hobby I never planned to take seriously. So, I'd rather have slow progress towards my goals and a sizeable chunk of time to mess around, than to fill my days to the point where I have no time to explore at all.", "parent": "Goals for Spring Quarter.txt", "score": 0.51357994541251}, {"content": "My philosophy here is this: it is better to try and make something authentic, beautiful, and expressive and have it turn out bad than it is to hide behind the safeness of minimalism. If you're writing, go ahead and try to sound clever. You might fail and sound incredibly immature, but a fear of failure is disastrous for any creative endeavor. If you're designing something, go all out. Make it bold and loud, and if it turns out gaudy, you can fix it on the next iteration. This was what I tried to do [[exegesis]]' redesign, and so far I'm very happy with it.", "parent": "Minimalism.txt", "score": 0.5218415260314941}, {"content": "For a while, I exclusively worked on a long, serious projects. I wanted to build a billion dollar product. I wanted to be the founder of a successful startup. I wanted to write, but I wanted to write on my own platform that everybody else would also write on, that would have all the features I wanted that everybody else would love.", "parent": "Fragments.txt", "score": 0.5240341424942017}, {"content": "The goal is to keep things creative and lighthearted, to mess around with as many ideas as possible.", "parent": "untitled-9-24-2021.txt", "score": 0.5504515171051025}, {"content": "I've noticed a strange tradeoff, where the more things I pile into my morning routine (getting in a run, doing hw, etc. etc.) the freer I feel for the rest of the day, but the harder it makes it to actually get out of bed and face these mundane tasks. If I just do what I want in the morning - code side projects - I jump out of bed easily, but then I feel the weight of obligations over me. If I handle obligations in the morning, then the thought of doing boring things makes it hard to get out of bed [[focus]] [[focus-machine]] [[ideas]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5618730783462524}], "I want this new site to be a space for that.": [{"content": "I want this new site to be a space for that.", "parent": "Fragments.txt", "score": 1.2516975402832031e-06}, {"content": "This site will be that infrastructure for me. It will be a place for me to play with ideas quickly.", "parent": "Fragments.txt", "score": 0.43426841497421265}, {"content": "I want a space to be incoherent. I want a space to just throw paint on the walls.", "parent": "Fragments.txt", "score": 0.513331413269043}, {"content": "The idea will be for members to create their own pages on the site, to experiment with one-off ideas inspired by the website critiques.", "parent": "untitled-9-24-2021.txt", "score": 0.5434739589691162}, {"content": "I want a space to be able to make up UI components on the spot, and then never use them again, or maybe use them again if I feel like it. Like tossing out a riff on the guitar.", "parent": "Fragments.txt", "score": 0.5631120204925537}, {"content": " The goal is to recreate the feeling of a musical jam session, but in a website. ", "parent": "untitled-9-24-2021.txt", "score": 0.5748966932296753}, {"content": "Many of my ideas are in service of a singular dream: having the ability to combine incoherent fragments of creative inspiration into a cohesive organized whole. exegesis is about enabling that with writing. I hope the design of this site will help me do that with interface ideas.", "parent": "Fragments.txt", "score": 0.5939037799835205}, {"content": "Two, we will maintain a collective website at [https://rhizome.world/.](https://rhizome.world/.) The site is open source, you can find the repo here: [https://github.com/nichwch/rhizome-club.](https://github.com/nichwch/rhizome-club.) ", "parent": "untitled-9-24-2021.txt", "score": 0.5979745388031006}, {"content": "The idea is to just make a ton of side projects and put them all here. I have some preliminary ideas on how I can organize this but I'm not particularly set on anything right now. I don't feel particularly limited by framework choice either - with the liberal use of iFrames, I can simply embed other projects using different frameworks here. I've already done that with a project I've created with Svelte.", "parent": "Fragments.txt", "score": 0.6234116554260254}, {"content": "I think eventually, I might want to deploy a blog with a full fledged backend, so users can query anything they'd like to my blog. ", "parent": "What is Yurt.txt", "score": 0.6315975189208984}], "I want a space to be incoherent. I want a space to just throw paint on the walls.": [{"content": "I want a space to be incoherent. I want a space to just throw paint on the walls.", "parent": "Fragments.txt", "score": -1.1920928955078125e-07}, {"content": "I want a space to be able to make up UI components on the spot, and then never use them again, or maybe use them again if I feel like it. Like tossing out a riff on the guitar.", "parent": "Fragments.txt", "score": 0.4780743718147278}, {"content": "I want this new site to be a space for that.", "parent": "Fragments.txt", "score": 0.5133712291717529}, {"content": "The world cannot be distilled into neat, concrete categories. Neither can your thoughts. Isn't it time your notes got a little messier?", "parent": "Manifesto.txt", "score": 0.5886200666427612}, {"content": "I want my computer to feel like my guitar. I want it to feel like I can noodle here.", "parent": "Fragments.txt", "score": 0.6071728467941284}, {"content": "Right now I'm listening to [Something About Us by Daft Punk](https://open.spotify.com/track/1NeLwFETswx8Fzxl2AFl91?si=bc9f206d498e4fdd), which might have something to do with how I'm feeling. What if words aren't enough to express a certain feeling? What if it's only the conjunction of words, images, videos and music, combined not in a determinate order like a moving picture or video, but presented indeterminately, in some form resembling a moodboard? That's the thesis behind [[synesthesia]] (a project I'm working on that will be closely integrated with [[exegesis]]).", "parent": "untitled-9-30-2021.txt", "score": 0.6171402931213379}, {"content": "Many of my ideas are in service of a singular dream: having the ability to combine incoherent fragments of creative inspiration into a cohesive organized whole. exegesis is about enabling that with writing. I hope the design of this site will help me do that with interface ideas.", "parent": "Fragments.txt", "score": 0.6231046915054321}, {"content": "The goal is to keep things creative and lighthearted, to mess around with as many ideas as possible.", "parent": "untitled-9-24-2021.txt", "score": 0.6247897148132324}, {"content": "None of these thoughts will be very organized. That's kind of the point of [[exegesis]] anyways - to enable non linear, disorganized thinking. ", "parent": "untitled-9-20-2021.txt", "score": 0.6307040452957153}, {"content": "I want to return to my roots. I want to get excited by little ideas and not worry about scaling them, or fitting them into a huge vision, or turning them into legible accomplishments. I still want to be ambitious, but I don't want to let my ambition choke my creativity.", "parent": "Fragments.txt", "score": 0.6367971897125244}], "I want a space to be able to make up UI components on the spot, and then never use them again, or maybe use them again if I feel like it. Like tossing out a riff on the guitar.": [{"content": "I want a space to be able to make up UI components on the spot, and then never use them again, or maybe use them again if I feel like it. Like tossing out a riff on the guitar.", "parent": "Fragments.txt", "score": -1.1920928955078125e-07}, {"content": "In fact, in the middle of an essay, I should be able to invent a UI component just to illustrate a point.\n\nEarly internet vibes.", "parent": "Fragments.txt", "score": 0.4305485486984253}, {"content": "The vision is to have a tool that provides a visual interface for creating layouts, and maybe even rigging up basic stateful logic, or data fetching logic. I've more or less nailed down a preferred personal stack for creating projects with React, Express and Postgres, so it shouldn't be terribly difficult to even integrate database logic/fetching logic into such a tool (so long as some flexibility is lost on technology choice).[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.4738643169403076}, {"content": "I want a space to be incoherent. I want a space to just throw paint on the walls.", "parent": "Fragments.txt", "score": 0.4780743718147278}, {"content": "I want my computer to feel like my guitar. I want it to feel like I can noodle here.", "parent": "Fragments.txt", "score": 0.47815436124801636}, {"content": "I bring this up because it would be nice if there were a way to \"compose\" UI features the same way you can compose command line features. Imagine if I had been able to add a stealth button to my app without editing my app, but by building a new app that I then composed my app with. There are lots of other UI elements I'd like to add to my app - maybe a button that pushes all my notes up to Github, for example. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.4823336601257324}, {"content": "If you share some infrastructure that lets you play around with ideas quickly and also share them quickly, that solves the problem. Stuff like Repl.it does this, but I feel less of a sense of ownership over it.", "parent": "Fragments.txt", "score": 0.5033465623855591}, {"content": "This site will be that infrastructure for me. It will be a place for me to play with ideas quickly.", "parent": "Fragments.txt", "score": 0.5038065910339355}, {"content": "[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]] ", "parent": "untitled-9-20-2021.txt", "score": 0.5041767358779907}, {"content": "It was nice building a new feature for an app I haven't touched in a while. Still, it got me thinking about extensibility and composability. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.5082157850265503}], "In fact, in the middle of an essay, I should be able to invent a UI component just to illustrate a point.\n\nEarly internet vibes.": [{"content": "In fact, in the middle of an essay, I should be able to invent a UI component just to illustrate a point.\n\nEarly internet vibes.", "parent": "Fragments.txt", "score": 3.5762786865234375e-07}, {"content": "I want a space to be able to make up UI components on the spot, and then never use them again, or maybe use them again if I feel like it. Like tossing out a riff on the guitar.", "parent": "Fragments.txt", "score": 0.430597186088562}, {"content": "I bring this up because it would be nice if there were a way to \"compose\" UI features the same way you can compose command line features. Imagine if I had been able to add a stealth button to my app without editing my app, but by building a new app that I then composed my app with. There are lots of other UI elements I'd like to add to my app - maybe a button that pushes all my notes up to Github, for example. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.48089754581451416}, {"content": "The vision is to have a tool that provides a visual interface for creating layouts, and maybe even rigging up basic stateful logic, or data fetching logic. I've more or less nailed down a preferred personal stack for creating projects with React, Express and Postgres, so it shouldn't be terribly difficult to even integrate database logic/fetching logic into such a tool (so long as some flexibility is lost on technology choice).[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5190314054489136}, {"content": "I don't care if my work gets noticed, or if it's any good, or if it leads to anything at all. I don't know if I have any talent for interface research, but it seems like I might - my sophomore year of college, I designed a notetaking tool called YANA with a novel interface where you could select text and then add tags to it. The response to it was very positive, which encouraged me to try and build a startup out of it, which unfortunately led to me becoming monomaniacally obsessed with that idea at the expense of trying to explore any other ideas (an obsession I only shed once I made Nomad Hypertext, which I could call a \"finished\" product). ", "parent": "Interface Work.txt", "score": 0.5291956663131714}, {"content": " [[ideas]]: A tool that analyzes a react project and shows your component structure for you in a nice and visual way. Probably already exists, idk", "parent": "untitled-9-20-2021.txt", "score": 0.5421962738037109}, {"content": "[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]] ", "parent": "untitled-9-20-2021.txt", "score": 0.5424788594245911}, {"content": "I've been working on notetaking apps for years now. I starting working on the first one on the bus back from my internship. I had an idea for a simple interaction - users should be able to highlight a piece of text, then add tags to that text. I distinctly remember thinking to myself, \"That should be a piece of cake! I should be able to finish it during the 45 minute bus  ride.\"\n\n\nIt ended up taking the rest of the summer. I was 19, naive, and had no idea what a nightmare the contenteditable HTML standard was.", "parent": "Plaintext is your best friend.txt", "score": 0.5435299873352051}, {"content": "For example, I'm starting to suspect that no styling library is going to provide a good experience, because the fundamental pain point is trying to express a visual idea with a text-based set of rules. A styling library can provide some affordances that make things easier - easy theming, dark mode, conditional styles, etc. etc - but the fundamental painful experience of trying to express a visual idea in code cannot be ameliorated with better code tools.[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5455237627029419}, {"content": "Front end development should be way more visual. A great deal of front-end development pain points cannot be fixed with fancier libraries and languages, because the fundamental mismatch is trying to create something visual with a text-based tool.[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5474854707717896}], "~": [{"content": "~", "parent": "NOW PAGE.txt", "score": 0.0}, {"content": "~", "parent": "Fragments.txt", "score": 0.0}, {"content": "~", "parent": "Fragments.txt", "score": 0.0}, {"content": "~", "parent": "untitled-1-4-2022.txt", "score": 1.1920928955078125e-07}, {"content": "~", "parent": "Plaintext is your best friend.txt", "score": 7.748603820800781e-07}, {"content": "~", "parent": "The making of Nomad Hypertext.txt", "score": 8.940696716308594e-07}, {"content": "~", "parent": "The making of Nomad Hypertext.txt", "score": 8.940696716308594e-07}, {"content": "~", "parent": "Second Brains.txt", "score": 8.940696716308594e-07}, {"content": "~", "parent": "What is Nomad Hypertext.txt", "score": 8.940696716308594e-07}, {"content": "~", "parent": "What is Nomad Hypertext.txt", "score": 8.940696716308594e-07}], "Why should that be a process that only happens in Figma or notebooks? Why not go directly to code? The answer is that code requires set up. It requires a repository, and a framework, and a database, and infrastructure.": [{"content": "Why should that be a process that only happens in Figma or notebooks? Why not go directly to code? The answer is that code requires set up. It requires a repository, and a framework, and a database, and infrastructure.", "parent": "Fragments.txt", "score": -3.5762786865234375e-07}, {"content": "The vision is to have a tool that provides a visual interface for creating layouts, and maybe even rigging up basic stateful logic, or data fetching logic. I've more or less nailed down a preferred personal stack for creating projects with React, Express and Postgres, so it shouldn't be terribly difficult to even integrate database logic/fetching logic into such a tool (so long as some flexibility is lost on technology choice).[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5363931655883789}, {"content": "I bring this up because it would be nice if there were a way to \"compose\" UI features the same way you can compose command line features. Imagine if I had been able to add a stealth button to my app without editing my app, but by building a new app that I then composed my app with. There are lots of other UI elements I'd like to add to my app - maybe a button that pushes all my notes up to Github, for example. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.5475136041641235}, {"content": "If you share some infrastructure that lets you play around with ideas quickly and also share them quickly, that solves the problem. Stuff like Repl.it does this, but I feel less of a sense of ownership over it.", "parent": "Fragments.txt", "score": 0.5482545495033264}, {"content": "[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]] ", "parent": "untitled-9-20-2021.txt", "score": 0.5562065243721008}, {"content": "I want to clarify that I'm not bullish at all on no-code. I think \"no-code\" and \"low-code\" are the wrong way to frame things. There is a place for tools like this, but it's more productive to think of them as \"visual developer tools.\"[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5616166591644287}, {"content": "However, when building Yurt, the static site builder for nomad hypertext, I found myself repeating a lot of logic. I found myself wanting to add features to the indexing engine, like being able to use cloud providers instead of local models (because doing all this processing locally can take ages!). In the future, I might want to use multimodal models, so I can see similarity between images, text, and audio. \n\nFactoring out the semantic search element of my app would have been the correct, unix-ey thing to do, and it would allow me to make these extensions in the future. I plan on doing this soon.  ", "parent": "The making of Nomad Hypertext.txt", "score": 0.574872612953186}, {"content": "Learn more code (new languages, new frameworks, new databases, fancy tech like blockchain and ML, etc. etc.)", "parent": "Goals for Spring Quarter.txt", "score": 0.575805061116119}, {"content": "Front end development should be way more visual. A great deal of front-end development pain points cannot be fixed with fancier libraries and languages, because the fundamental mismatch is trying to create something visual with a text-based tool.[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5890148282051086}, {"content": "For example, I'm starting to suspect that no styling library is going to provide a good experience, because the fundamental pain point is trying to express a visual idea with a text-based set of rules. A styling library can provide some affordances that make things easier - easy theming, dark mode, conditional styles, etc. etc - but the fundamental painful experience of trying to express a visual idea in code cannot be ameliorated with better code tools.[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5907520651817322}], "If you share some infrastructure that lets you play around with ideas quickly and also share them quickly, that solves the problem. Stuff like Repl.it does this, but I feel less of a sense of ownership over it.": [{"content": "If you share some infrastructure that lets you play around with ideas quickly and also share them quickly, that solves the problem. Stuff like Repl.it does this, but I feel less of a sense of ownership over it.", "parent": "Fragments.txt", "score": -1.1920928955078125e-07}, {"content": "This site will be that infrastructure for me. It will be a place for me to play with ideas quickly.", "parent": "Fragments.txt", "score": 0.3905748724937439}, {"content": "I want a space to be able to make up UI components on the spot, and then never use them again, or maybe use them again if I feel like it. Like tossing out a riff on the guitar.", "parent": "Fragments.txt", "score": 0.5033177137374878}, {"content": "This is not groundbreaking news, but it's groundbreaking for me. I started my software engineering career writing code with cloud applications in mind, and the idea that you can ship cool projects without running database migrations or doing extensive backtesting against your monolith *is* groundbreaking to me. In college I wanted my own blog and instead of getting a static site generator I built out a cloud application with NextJS, PostgreSQL and Heroku. I did learn a lot and it helped me land my first internship, but now it strikes me as an incredibly wrong minded approach. ", "parent": "NOW PAGE.txt", "score": 0.5082723498344421}, {"content": "The idea is to just make a ton of side projects and put them all here. I have some preliminary ideas on how I can organize this but I'm not particularly set on anything right now. I don't feel particularly limited by framework choice either - with the liberal use of iFrames, I can simply embed other projects using different frameworks here. I've already done that with a project I've created with Svelte.", "parent": "Fragments.txt", "score": 0.5250985026359558}, {"content": "[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]] ", "parent": "untitled-9-20-2021.txt", "score": 0.5269678831100464}, {"content": "Fortunately, it looks like there's progress being made here, with projects like [https://github.com/blocks/blocks.](https://github.com/blocks/blocks.) I want to build my own solutions, maybe borrowing from current projects.[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.529536247253418}, {"content": "I bring this up because it would be nice if there were a way to \"compose\" UI features the same way you can compose command line features. Imagine if I had been able to add a stealth button to my app without editing my app, but by building a new app that I then composed my app with. There are lots of other UI elements I'd like to add to my app - maybe a button that pushes all my notes up to Github, for example. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.5354973673820496}, {"content": "With cloud software, our digital lives lack this permanence. Startups shut down left and right, products get split into multiple products or merged together, interfaces get redesigned and their redesigns get redesigned, all at the whims of the markets or feuding product managers. This is not a stable foundation to build anything lasting on top of.", "parent": "Generational Computing.txt", "score": 0.5410845875740051}, {"content": "It is this property that allows programmers to cheat the Gods, and achieve divine levels of creative output thought forbidden to mortals. A programmer can create abstractions than enable them to create in days what previously took months. I myself rewrote a good part of exegesis 2 months before I released it, and the new abstractions I picked enabled me to redo in those 2 months what took me almost a year at first. Moreover, programmers can share their abstractions, and borrow the inventions of others as well.", "parent": "Prometheus.txt", "score": 0.5439258813858032}], "This site will be that infrastructure for me. It will be a place for me to play with ideas quickly.": [{"content": "This site will be that infrastructure for me. It will be a place for me to play with ideas quickly.", "parent": "Fragments.txt", "score": -1.1920928955078125e-07}, {"content": "If you share some infrastructure that lets you play around with ideas quickly and also share them quickly, that solves the problem. Stuff like Repl.it does this, but I feel less of a sense of ownership over it.", "parent": "Fragments.txt", "score": 0.3905799984931946}, {"content": "I want this new site to be a space for that.", "parent": "Fragments.txt", "score": 0.4342777729034424}, {"content": "The idea is to just make a ton of side projects and put them all here. I have some preliminary ideas on how I can organize this but I'm not particularly set on anything right now. I don't feel particularly limited by framework choice either - with the liberal use of iFrames, I can simply embed other projects using different frameworks here. I've already done that with a project I've created with Svelte.", "parent": "Fragments.txt", "score": 0.45364832878112793}, {"content": "Many of my ideas are in service of a singular dream: having the ability to combine incoherent fragments of creative inspiration into a cohesive organized whole. exegesis is about enabling that with writing. I hope the design of this site will help me do that with interface ideas.", "parent": "Fragments.txt", "score": 0.47800207138061523}, {"content": "The idea will be for members to create their own pages on the site, to experiment with one-off ideas inspired by the website critiques.", "parent": "untitled-9-24-2021.txt", "score": 0.49965840578079224}, {"content": "I want a space to be able to make up UI components on the spot, and then never use them again, or maybe use them again if I feel like it. Like tossing out a riff on the guitar.", "parent": "Fragments.txt", "score": 0.5038065910339355}, {"content": "The vision is to have a tool that provides a visual interface for creating layouts, and maybe even rigging up basic stateful logic, or data fetching logic. I've more or less nailed down a preferred personal stack for creating projects with React, Express and Postgres, so it shouldn't be terribly difficult to even integrate database logic/fetching logic into such a tool (so long as some flexibility is lost on technology choice).[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5153072476387024}, {"content": "Tagging this all meta-acropolis, an edtech project I'm in the early stages of working on. Don't have any code for it, just ideas, but I plan on putting something together soon\u2122. [[meta-acropolis]] [[ideas]] ", "parent": "untitled-9-21-2021.txt", "score": 0.5178381204605103}, {"content": "At the Recurse center, grinding leetcode and working on nomad hypertext, a collection of interface ideas that center around local-first notetaking powered by semantic search and AI. ", "parent": "NOW-Jan-05-2024.txt", "score": 0.5404753088951111}], "I want my computer to feel like my guitar. I want it to feel like I can noodle here.": [{"content": "I want my computer to feel like my guitar. I want it to feel like I can noodle here.", "parent": "Fragments.txt", "score": -3.5762786865234375e-07}, {"content": "I love how physical playing the guitar is. I love the tactile sensation of steel strings digging into my fingers. I love how it requires me to coordinate all of my senses together. I love being able to experiment with small, self contained ideas with looper pedal. I love how it lets you map musical ideas into your head into concrete muscle memory, and I love that this muscle memory is *portable* between different keys and different songs.  ", "parent": "NOW PAGE.txt", "score": 0.431050181388855}, {"content": "I desperately want programming to feel like this.", "parent": "Fragments.txt", "score": 0.44290077686309814}, {"content": "I want a space to be able to make up UI components on the spot, and then never use them again, or maybe use them again if I feel like it. Like tossing out a riff on the guitar.", "parent": "Fragments.txt", "score": 0.47815436124801636}, {"content": "I fell in love with playing the guitar because it rewards this lack of an attention span. You can copy a riff in minutes. You can create a new riff in minutes. Picking up a guitar puts me in an instant flow state, because I can just screw around and play with ideas instantly. It feels like a REPL for musical ideas.", "parent": "Fragments.txt", "score": 0.4895334839820862}, {"content": "I might not really care for making music, but learning how to play the guitar showed me what I'm looking for from a creative process. If I can form a creative process that feels like playing the guitar and outputs software, that would be very rewarding.", "parent": "NOW PAGE.txt", "score": 0.5027806758880615}, {"content": "My dream is to enable something I term \"generational computing.\" I want my kids and my grandkids to someday be able to interface with the artifacts of my digital life. I want them to be able to read my notes and ask an LLM about what I've learned over my life. I want them to be able to chat with a replica of me trained on my writings. I want them to be able to look through the music I made and the music I listened to, and see the connections between the two. I want them to be able to upload their own musical ideas or writings, and see the connections between what they've made and what I've made. ", "parent": "Generational Computing.txt", "score": 0.5132529735565186}, {"content": "I enjoy the process of sitting with my guitar, generating riff ideas on the fly, soloing over 8 bar progressions on my looper, but I'm not excited at all about creating a song. In many ways, my feelings about software are kind of the opposite. I have mixed, love/hate feelings about the process of writing software (reading documentation, chasing down bugs, writing tests, etc), but I feel incredibly excited about the end product. ", "parent": "NOW PAGE.txt", "score": 0.5239198207855225}, {"content": " The goal is to recreate the feeling of a musical jam session, but in a website. ", "parent": "untitled-9-24-2021.txt", "score": 0.5377058386802673}, {"content": "I'm not really sure how to square this. One idea I've been obsessed with is how I can make the process of writing software more like the process of making music. ", "parent": "NOW PAGE.txt", "score": 0.5415611267089844}], "Next.js's file-based routing makes it easy to create a fresh page on my site. styled-components helps isolate css styles so that I don't have to worry about conflicting css rules.": [{"content": "Next.js's file-based routing makes it easy to create a fresh page on my site. styled-components helps isolate css styles so that I don't have to worry about conflicting css rules.", "parent": "Fragments.txt", "score": -1.1920928955078125e-07}, {"content": "[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]] ", "parent": "untitled-9-20-2021.txt", "score": 0.4935348629951477}, {"content": "The vision is to have a tool that provides a visual interface for creating layouts, and maybe even rigging up basic stateful logic, or data fetching logic. I've more or less nailed down a preferred personal stack for creating projects with React, Express and Postgres, so it shouldn't be terribly difficult to even integrate database logic/fetching logic into such a tool (so long as some flexibility is lost on technology choice).[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5132689476013184}, {"content": "The idea is to just make a ton of side projects and put them all here. I have some preliminary ideas on how I can organize this but I'm not particularly set on anything right now. I don't feel particularly limited by framework choice either - with the liberal use of iFrames, I can simply embed other projects using different frameworks here. I've already done that with a project I've created with Svelte.", "parent": "Fragments.txt", "score": 0.5736734867095947}, {"content": "In any case I wanted to try something new because that's what Recurse is all about, so I tried making a project with just JS and JSDoc for some semblance of type safety. ", "parent": "The making of Nomad Hypertext.txt", "score": 0.5826491117477417}, {"content": "For example, I'm starting to suspect that no styling library is going to provide a good experience, because the fundamental pain point is trying to express a visual idea with a text-based set of rules. A styling library can provide some affordances that make things easier - easy theming, dark mode, conditional styles, etc. etc - but the fundamental painful experience of trying to express a visual idea in code cannot be ameliorated with better code tools.[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5923919677734375}, {"content": " [[ideas]]: A tool that analyzes a react project and shows your component structure for you in a nice and visual way. Probably already exists, idk", "parent": "untitled-9-20-2021.txt", "score": 0.603219747543335}, {"content": "I want a space to be able to make up UI components on the spot, and then never use them again, or maybe use them again if I feel like it. Like tossing out a riff on the guitar.", "parent": "Fragments.txt", "score": 0.6104965209960938}, {"content": "One last thing: There is a solution that combines the flexibility of plaintext with the aesthetics of rich text - Markdown! I don't think I'll support Markdown formatting in nomad hypertext, but for my static site generator Yurt, I will try to do that in the future. The utility would mostly be from having usable links. ", "parent": "Plaintext is your best friend.txt", "score": 0.614643931388855}, {"content": "There are pros and cons to this approach. The biggest pro is that it generates a static blog. There's no backend to maintain, and it's quite lightweight and loads fast, while also providing the benefit of semantic hyperlinks. The con is that since the index is precomputed, you can't search for arbitrary things like you can in nomad hypertext. ", "parent": "What is Yurt.txt", "score": 0.6148358583450317}], "A minimap makes all of this accessible from anywhere. You can access it by clicking the green button at the bottom, or by pressing command K.": [{"content": "A minimap makes all of this accessible from anywhere. You can access it by clicking the green button at the bottom, or by pressing command K.", "parent": "Fragments.txt", "score": 1.7881393432617188e-07}, {"content": "I built a \"stealth\" button for nomad hypertext. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.6093430519104004}, {"content": "When this feature is activated, it hides all the text on your screen behind red bars. You're still able to see how much you're typing and how much you're deleting, which is handy.", "parent": "Interface Work: Stealth Button.txt", "score": 0.6423196196556091}, {"content": "![Stealth button in action](stealth.png)", "parent": "Interface Work: Stealth Button.txt", "score": 0.6519769430160522}, {"content": "It uses neural search to show you how your ideas are connected to each other. This is done offline and privately on your computer, entirely on your machine. ", "parent": "What is Nomad Hypertext.txt", "score": 0.6999512314796448}, {"content": "Visual developer tools", "parent": "untitled-9-24-2021.txt", "score": 0.7097442150115967}, {"content": "Next to every paragraph, there is a button that will show you other related paragraphs from your other notes. ", "parent": "What is Nomad Hypertext.txt", "score": 0.7116510272026062}, {"content": "One of the reasons I was excited to make Nomad Hypertext local first was the idea that by using simple text files, I'd be able to add more features to my notes, without working on Nomad Hypertext itself. For example, if I wanted summaries of my notes, I could build an entirely new summarizer app, that simply operates on the same files that Nomad Hypertext does. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.7193576097488403}, {"content": "I bring this up because it would be nice if there were a way to \"compose\" UI features the same way you can compose command line features. Imagine if I had been able to add a stealth button to my app without editing my app, but by building a new app that I then composed my app with. There are lots of other UI elements I'd like to add to my app - maybe a button that pushes all my notes up to Github, for example. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.7199399471282959}, {"content": "At the Recurse center, grinding leetcode and working on nomad hypertext, a collection of interface ideas that center around local-first notetaking powered by semantic search and AI. ", "parent": "NOW-Jan-05-2024.txt", "score": 0.7205777168273926}], "The idea is to just make a ton of side projects and put them all here. I have some preliminary ideas on how I can organize this but I'm not particularly set on anything right now. I don't feel particularly limited by framework choice either - with the liberal use of iFrames, I can simply embed other projects using different frameworks here. I've already done that with a project I've created with Svelte.": [{"content": "The idea is to just make a ton of side projects and put them all here. I have some preliminary ideas on how I can organize this but I'm not particularly set on anything right now. I don't feel particularly limited by framework choice either - with the liberal use of iFrames, I can simply embed other projects using different frameworks here. I've already done that with a project I've created with Svelte.", "parent": "Fragments.txt", "score": 5.960464477539063e-08}, {"content": "The vision is to have a tool that provides a visual interface for creating layouts, and maybe even rigging up basic stateful logic, or data fetching logic. I've more or less nailed down a preferred personal stack for creating projects with React, Express and Postgres, so it shouldn't be terribly difficult to even integrate database logic/fetching logic into such a tool (so long as some flexibility is lost on technology choice).[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.4173157811164856}, {"content": "Fortunately, it looks like there's progress being made here, with projects like [https://github.com/blocks/blocks.](https://github.com/blocks/blocks.) I want to build my own solutions, maybe borrowing from current projects.[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.43375295400619507}, {"content": "This site will be that infrastructure for me. It will be a place for me to play with ideas quickly.", "parent": "Fragments.txt", "score": 0.45364832878112793}, {"content": "In any case I wanted to try something new because that's what Recurse is all about, so I tried making a project with just JS and JSDoc for some semblance of type safety. ", "parent": "The making of Nomad Hypertext.txt", "score": 0.4834802746772766}, {"content": "The main focus here is personal projects - learning more code and writing more are auxiliary activities that help this end. First among these personal projects is [[exegesis]], but I have a number of other personal projects that I want to work on as well. ", "parent": "Goals for Spring Quarter.txt", "score": 0.4844501468131166}, {"content": "[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]] ", "parent": "untitled-9-20-2021.txt", "score": 0.484669029712677}, {"content": "I want to learn more code. Working on [[exegesis]] over the course of a year, I saw my coding ability improve substantially. Towards the last 2 months, while rewriting a part of the codebase, I found myself dumbfounded by some of the decisions and patterns I had used a year earlier. The code I wrote towards the end was noticeably cleaner and more maintainable, mostly because I had familiarized myself with [[React]] hooks. Learning NextJS and GraphQL was also very rewarding, and both technologies were used extensively in the final version of exegesis. Looking forwards, I am thinking about learning Go, Clojure and maybe Rust. Go is the most practical one of all these for my purposes, and could open up a lot of job offers. Clojure is the most interesting from a theoretical standpoint, since I've never used a lisp or functional language. Rust is interesting because I hate systems/low-level programming, but I suspect that might only be because I hate C, and maybe Rust's more modern features will sell me on it. ", "parent": "Reflections for the New Year.txt", "score": 0.514636218547821}, {"content": "I've found writing down tasks and decomposing them into smaller ones helps. Right now, I do this in [[exegesis]], which honestly feels somewhat suboptimal. I also have another side project called [https://focusmachine.app/](https://focusmachine.app/) to remind me of what I'm currently supposed to be focusing - it's really stupid, it just asks you what you want to work on and then spams you with a reminder to focus on that at user-inputted interval. [[focus]] [[focus-machine]] [[ideas]] [[exegesis]] ", "parent": "untitled-9-24-2021.txt", "score": 0.518540620803833}, {"content": "I want a space to be able to make up UI components on the spot, and then never use them again, or maybe use them again if I feel like it. Like tossing out a riff on the guitar.", "parent": "Fragments.txt", "score": 0.5188599824905396}], "Many of my ideas are in service of a singular dream: having the ability to combine incoherent fragments of creative inspiration into a cohesive organized whole. exegesis is about enabling that with writing. I hope the design of this site will help me do that with interface ideas.": [{"content": "Many of my ideas are in service of a singular dream: having the ability to combine incoherent fragments of creative inspiration into a cohesive organized whole. exegesis is about enabling that with writing. I hope the design of this site will help me do that with interface ideas.", "parent": "Fragments.txt", "score": 0.0}, {"content": "My favorite use of [[exegesis]] is to write down ideas that I have. I write about exegesis in exegesis, and a lot of features that I've added to exegesis started as sudden thoughts that were captured in exegesis. In my experience, ideas are like seeds, and writing them down helps them grow. I might think nothing of a simple idea I capture one day, but a week later it might have renewed significance, and it could even spark new ideas. ", "parent": "On tools for thought: knowledge management vs creativity.txt", "score": 0.3723407983779907}, {"content": "I had some interesting ideas this morning on exegesis. The future of [[tools for thought]] should be social, and maybe people and profiles should be first order features in exegesis. Let me clarify what I mean by this. Right now, exegesis' model is very simple: you have pages, and you have tags that you can apply to pages and parts of pages. If there's a tag that has the same title as a page, clicking the tag will lead you to the page, and the page will show everywhere it's been linked. Simple, basic, backlinking. [[exegesis]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-20-2021.txt", "score": 0.41140586137771606}, {"content": "In some sense exegesis gave birth to itself, because I used it to organize my ideas about exegesis. On days where exegesis was not working because I had broken something while coding it, I noticed that I could not think as clearly. Its absence was felt.", "parent": "Second Brains.txt", "score": 0.41238075494766235}, {"content": "I want to try something: just posting a mind dump on [[exegesis]] every morning. I've had a theory for a while now that the best use case for exegesis is journaling, and this would be a good way to put it to the test. It will also be a good way for me to share my ideas with the world. ", "parent": "untitled-9-20-2021.txt", "score": 0.41432303190231323}, {"content": "What is the point of exegesis then? The point is serendipity - it's a place for me to capture little scraps of thought - ideas, feelings, anything that comes to you at the moment. ", "parent": "Second Brains.txt", "score": 0.4201217293739319}, {"content": "I want to write more. I don't really care about writing \"better\" or more \"professionally\", because I don't write for a living, and I'm not really interested in selling people on my opinions. Instead, I want to write to broadcast my interests, so I can attract others who have similar interests. Hopefully, [[exegesis]] will be an able and capable platform for me to do this. ", "parent": "Reflections for the New Year.txt", "score": 0.43470174074172974}, {"content": "Directly relevant to exegesis, I was just speaking earlier about making social [[tools for thought]]. An interesting question to consider while creating this new social [[exegesis]]: How do I avoid making an echo-chamber platform susceptible to Curtis' critique, while fulfilling Fischer's vision for a web that can \"generate new discourse networks that have no correlate in the social field outside cyberspace?\" [[exegesis]] [[questions]] [[quotes]] [[Capitalist-Realism]] [[tools for thought]] ", "parent": "untitled-9-20-2021.txt", "score": 0.43765562772750854}, {"content": "I've found writing down tasks and decomposing them into smaller ones helps. Right now, I do this in [[exegesis]], which honestly feels somewhat suboptimal. I also have another side project called [https://focusmachine.app/](https://focusmachine.app/) to remind me of what I'm currently supposed to be focusing - it's really stupid, it just asks you what you want to work on and then spams you with a reminder to focus on that at user-inputted interval. [[focus]] [[focus-machine]] [[ideas]] [[exegesis]] ", "parent": "untitled-9-24-2021.txt", "score": 0.4383555054664612}, {"content": "None of these thoughts will be very organized. That's kind of the point of [[exegesis]] anyways - to enable non linear, disorganized thinking. ", "parent": "untitled-9-20-2021.txt", "score": 0.4422798752784729}], "Cardinal Newman said of Napoleon, 'He understood the grammar of gunpowder.'... Alexis de Tocqueville was the first to master the grammar of print and typography.\nFrom pg 28 of Understanding Media by Marshall McLuhan": [{"content": "Cardinal Newman said of Napoleon, 'He understood the grammar of gunpowder.'... Alexis de Tocqueville was the first to master the grammar of print and typography.\nFrom pg 28 of Understanding Media by Marshall McLuhan", "parent": "Fragments.txt", "score": -2.384185791015625e-07}, {"content": "The way Napoleon understood the grammar of gunpowder and de Tocqueville understood the grammar of print and typography, I would like to master the grammar of hypertext.", "parent": "Fragments.txt", "score": 0.2680152654647827}, {"content": "The auteur believes otherwise. Language, he says, cannot communicate an idea without botching it. And if communicating an idea were not bad enough, mediating between multiple ideas using as flawed a tool as language is immeasurably worse. ", "parent": "On auteurs and language.txt", "score": 0.6444592475891113}, {"content": "The auteur is suspicious of language.", "parent": "On auteurs and language.txt", "score": 0.661712646484375}, {"content": "But it is only recently that writers have endeavored to steal fire for themselves. Only recently have brave pioneers ventured to create tools for that one art synonymous with thought, that one medium separating man from animal, that one power \"which outlasts kingdoms.\" Here, the work has only begun.", "parent": "Prometheus.txt", "score": 0.668369472026825}, {"content": "Thinking about Marshall McLuhan and the Medium is the Message. More specifically, thinking about his concept of sensory ratios, and how biased we are towards the visual sense. ", "parent": "NOW-Jan-05-2024.txt", "score": 0.674816906452179}, {"content": "Above all, don't forget - technology exists to serve man, the \"blessed machine\" exists to serve \"the crude biomass.\" Your brain is not a tool for stocking your notes, your notes are a tool for your brain. I don't write everything down in exegesis, I still read physical books, a good deal of my thinking gets done on pen and paper. If I forget something, I figure it's evolution's way of telling me it wasn't important.", "parent": "Second Brains.txt", "score": 0.6820273399353027}, {"content": "It also seems like [[philosophy]] requires a war-like state of mind - against others, against oneself, against philosophy itself. I'm again reminded of an aphorism from [[The Gay Science]], simply titled \"excelsior\" - \"Thou wilt never more pray, never more worship, never more repose in infinite trust - thou refusest to stand still and dismiss thy thoughts before an ultimate wisdom, an ultimate virtue, an ultimate power, - thou hast no constant guardian and friend in thy seven solitudes - thou livest without the outlook on a mountain that has snow on its head and fire in its heart - there is no longer any requiter for thee, nor any amender with his finishing touch - there is no longer any reason in that which happens, or any love in that which will happen to thee - there is no longer any resting-place for thy weary heart, where it has only to find and no longer to seek, thou art opposed to any kind of ultimate peace, thou desirest the eternal recurrence of war and peace: - man of renunciation, wilt thou renounce in all these things? Who will give thee the strength to do so? No one has yet had this strength!\" - There is a lake which one day refused to flow away, and threw up a dam at the place where it had hitherto discharged: since then this lake has always risen higher and higher. Perhaps the very renunciation will also furnish us with the strength with which the renunciation itself can be borne; perhaps man will ever rise higher and higher from that point onward, when he no longer flows out into a God.\"[[quotes]] [[Nietzsche]] [[philosophy]] [[The Gay Science]] ", "parent": "untitled-9-21-2021.txt", "score": 0.6839933395385742}, {"content": "A couple of ideas I think are very related but couldn't figure out how to weave in: [[Nietzsche]]'s distinction between the Apollonian and the Dionysian, the distinction made in [[Zen and the Art of Motorcycle Repair]] between Romantic Quality and Classical Quality.", "parent": "On tools for thought: knowledge management vs creativity.txt", "score": 0.6871855854988098}, {"content": "Nietzsche argues that there exists a philosophical system for each person that would justify their existence - like the \"books of apologia and prophecies that would vindicate for all time the actions of every person in the universe\" in The Library of Babel.", "parent": "Why I made exegesis.txt", "score": 0.6890204548835754}], "The way Napoleon understood the grammar of gunpowder and de Tocqueville understood the grammar of print and typography, I would like to master the grammar of hypertext.": [{"content": "The way Napoleon understood the grammar of gunpowder and de Tocqueville understood the grammar of print and typography, I would like to master the grammar of hypertext.", "parent": "Fragments.txt", "score": -2.384185791015625e-07}, {"content": "Cardinal Newman said of Napoleon, 'He understood the grammar of gunpowder.'... Alexis de Tocqueville was the first to master the grammar of print and typography.\nFrom pg 28 of Understanding Media by Marshall McLuhan", "parent": "Fragments.txt", "score": 0.2680015563964844}, {"content": "On the other hand, hypertext is built around the idea of a hyperlink, which is just a link from one document to another. Think about Wikipedia, and how every page is rich with links and connections to other pages. It is incoherent to talk about reading Wikipedia \"from start to end.\" Books create linear paths from A to B, hypertext creates entire worlds ripe for exploration.", "parent": "Why I made exegesis.txt", "score": 0.55735844373703}, {"content": "I was greatly inspired by two blogposts. The first, [Hyperlink Maximalism](https://thesephist.com/posts/hyperlink/) by Linus Lee talks about generating hyperlinks automatically between documents, and comes with a [demo](https://notation.app) that made a deep impression on me. To be honest, nomad hypertext is just Linus' demo using semantic search instead of full text search.", "parent": "What is Nomad Hypertext.txt", "score": 0.5900716185569763}, {"content": "One last thing: There is a solution that combines the flexibility of plaintext with the aesthetics of rich text - Markdown! I don't think I'll support Markdown formatting in nomad hypertext, but for my static site generator Yurt, I will try to do that in the future. The utility would mostly be from having usable links. ", "parent": "Plaintext is your best friend.txt", "score": 0.598389744758606}, {"content": "I'll end with a haiku. \n\nNomad Hypertext\nPowered by semantic search\nGives inspiration", "parent": "What is Nomad Hypertext.txt", "score": 0.601775050163269}, {"content": "There are lots of tools for thought out there with names inspired by great empires or their capitals: Roam (Rome) Research, Athens Research, Vienna Hypertext, etc. etc. I like all of these apps and have taken inspiration from them.\n\nBut isn't it strange that they have such imperial names? Tools for thought aren't about hierarchy and order, they're about freeing your thoughts to mingle with each other. It's less about ordering your thoughts into a hierarchical empire, and more about letting them wander freely, so that they might bear fruit. \n\nThat's why I picked the name nomad hypertext. ", "parent": "What is Nomad Hypertext.txt", "score": 0.6035699844360352}, {"content": "Nomad Hypertext is a writing app built around semantic search. ", "parent": "What is Nomad Hypertext.txt", "score": 0.6039693355560303}, {"content": "I may take a typography class this quarter. It's not required for graduation, but I figure it could help me design better products, and maybe make [[exegesis]] look prettier. ", "parent": "untitled-9-22-2021.txt", "score": 0.6126015186309814}, {"content": "One of the reasons I was excited to make Nomad Hypertext local first was the idea that by using simple text files, I'd be able to add more features to my notes, without working on Nomad Hypertext itself. For example, if I wanted summaries of my notes, I could build an entirely new summarizer app, that simply operates on the same files that Nomad Hypertext does. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.6128926277160645}]}