{"~":[{"content":"A thousand suns","parent":"posts/Why I made exegesis.txt","score":0.8319412092112017},{"content":"Plaintext is your best friend.","parent":"posts/Plaintext is your best friend.txt","score":0.8278526468544705},{"content":"Afternoon","parent":"posts/untitled-9-21-2021.txt","score":0.8262986789560413},{"content":"You're viewing this on a statically generated blog using Yurt!","parent":"posts/What is Yurt.txt","score":0.8260014199682172},{"content":"\"The tiniest event can tear a hole in the grey curtain of reaction which has marked the horizons of possibility under capitalist realism. From a situation in which nothing can happen, suddenly anything is possible again.\"[[personal-reflection]] [[quotes]] [[Capitalist-Realism]]","parent":"posts/untitled-9-20-2021.txt","score":0.8223588348016678},{"content":"\"From the moment I understood the weakness of my flesh, it disgusted me. I craved for strength and certainty of steel. I aspired to the purity of the blessed machine. Your kind cling to your flesh, as though it will not decay and fail you. One day the crude biomass you call a temple will wither and you will beg my kind to save you.\n\nBut I am already saved. For the Machine is immortal.\"\n\n- Magos Dominus Reditus, Warhammer 40k","parent":"posts/Second Brains.txt","score":0.8206241415459742},{"content":"[[philosophy]] [[deleuze]]","parent":"posts/untitled-9-30-2021.txt","score":0.8192152841997462},{"content":"Sitting in the MU again, this time with a view of the quad. Listening to \"The Time of the Season\" by the Zombies.","parent":"posts/untitled-9-24-2021.txt","score":0.8183824623083222},{"content":"Executing","parent":"posts/Goals for Spring Quarter.txt","score":0.8177347150596291},{"content":"I'm borrowing heavily from [[Zen and the Art of Motorcycle Repair]] here, obviously.","parent":"posts/untitled-9-30-2021.txt","score":0.8170123182828641},{"content":"Sometimes, you want multiple paragraphs to be grouped together as if they were one. This might be because you're using new lines for emphasis, rather than as a split between ideas. \n\nTo group multiple paragraphs together, put a ~ before the starting paragraph and another ~ after the ending paragraph.  \n\nThis collection of three paragraphs is an example of how to do that.","parent":"posts/What is Nomad Hypertext.txt","score":0.8168817487823052},{"content":"[[meta-acropolis proof of concept]] Maybe do the demo for [[metaphysics]] instead. It's a subject I actually care about, and I'm taking the course this quarter. Also, I finished number theory last quarter and I have no intention of touching it again if I don't have to. testing edits. 5","parent":"posts/untitled-1-4-2022.txt","score":0.8167884409523942},{"content":"Hobbies:","parent":"posts/Goals for Spring Quarter.txt","score":0.8166671776230381},{"content":"This quote reflects a common strain of thinking in Silicon Valley, that our biological selves are hopeless broken, that we need to hack into our brains dopamine-systems and rewire them for maximal productivity, that everything natural is ripe for disruption. This thinking is especially prevalent with the recent rise of PKMs (personal knowledge management systems) like Roam and Notion. Here, an electronic notetaking app is the \"blessed machine\", and your natural memory is the \"flesh that will decay and fail you.\"","parent":"posts/Second Brains.txt","score":0.8143794586493673},{"content":"Code:","parent":"posts/Goals for Spring Quarter.txt","score":0.8143709919826895},{"content":"I'm taking a gap quarter this Spring to work on some personal projects. It is always better to have a plan than to have no plan, even if things don't work out your way, so here are some tentative goals for my gap quarter.","parent":"posts/Goals for Spring Quarter.txt","score":0.8140836497805376},{"content":"That was an interesting reply, and it really got me thinking. She said something along the lines of [[twitter]] being her favorite [[tools for thought]].","parent":"posts/untitled-9-24-2021.txt","score":0.813830911515195},{"content":"The fact that most people interact with computers through web and mobile was not some foregone conclusion. It took serious effort and ingenuity from really smart people to make these platforms accessible to regular people. Once upon a time, filesystems and personal computers were the dominant paradigm of computing, and it was web and mobile that were strange, inaccessible pipe dreams. Increasingly, the opposite is the case.","parent":"posts/The AI-first operating system of the future.txt","score":0.81372877865983},{"content":"Next to every paragraph, there is a button that will show you other related paragraphs from your other notes.","parent":"posts/What is Nomad Hypertext.txt","score":0.8135618415312197},{"content":"Focus[[focus]] [[focus-machine]] [[ideas]]","parent":"posts/untitled-9-24-2021.txt","score":0.8134866602495796}],"":[{"content":"Building tools","parent":"posts/untitled-9-20-2021.txt","score":0.8593290080388},{"content":"The club does 2 things.","parent":"posts/untitled-9-24-2021.txt","score":0.8589669169415844},{"content":"Induction","parent":"posts/untitled-9-22-2021.txt","score":0.8577220980911441},{"content":"Code:","parent":"posts/Goals for Spring Quarter.txt","score":0.856649564390397},{"content":"Executing","parent":"posts/Goals for Spring Quarter.txt","score":0.8556654491388678},{"content":"Priority 1: Code-related creative work (continue work on exegesis, other personal projects, learn more code, write more)","parent":"posts/Goals for Spring Quarter.txt","score":0.8537043599402795},{"content":"Next to every paragraph, there is a button that will show you other related paragraphs from your other notes.","parent":"posts/What is Nomad Hypertext.txt","score":0.8514450468005932},{"content":"we live in a society","parent":"posts/untitled-9-30-2021.txt","score":0.8499151373626692},{"content":"Priority 2: Activities that are a break from code-related creative work (piano, guitar, fiction/nonfiction reading, drawing, fitness)","parent":"posts/Goals for Spring Quarter.txt","score":0.8497861585687644},{"content":"Learn a grappling art (because of quarantine, this will just be maintaining general fitness levels for now)","parent":"posts/Goals for Spring Quarter.txt","score":0.8496945903933114},{"content":"For drawing, I'd like to practice drawing reference images in my own style 3 times a week, with a focus on drawing more three dimensionally, drawing people/poses, and using color.","parent":"posts/Goals for Spring Quarter.txt","score":0.8478182318510581},{"content":"Afternoon","parent":"posts/untitled-9-21-2021.txt","score":0.8472546071060495},{"content":"Hobbies:","parent":"posts/Goals for Spring Quarter.txt","score":0.8467379006001533},{"content":"This is for scenarios where you do want to write in an organized manner. For example, right now, this entire page is about","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8466474388580029},{"content":"Focus[[focus]] [[focus-machine]] [[ideas]]","parent":"posts/untitled-9-24-2021.txt","score":0.8456538970968254},{"content":"Higher-order creativity","parent":"posts/Prometheus.txt","score":0.8455300536527719},{"content":"Nomad Hypertext is a writing app built around semantic search.","parent":"posts/What is Nomad Hypertext.txt","score":0.8455138568311819},{"content":"I'm taking a gap quarter this Spring to work on some personal projects. It is always better to have a plan than to have no plan, even if things don't work out your way, so here are some tentative goals for my gap quarter.","parent":"posts/Goals for Spring Quarter.txt","score":0.8451682294721505},{"content":"Writing cascades","parent":"posts/untitled-10-1-2021.txt","score":0.8444322593169847},{"content":"Plaintext is your best friend.","parent":"posts/Plaintext is your best friend.txt","score":0.8437967333727141}],"I opted to use Javascript instead of Typescript out of mix of curiosity and laziness. Like most people, I was introduced to Javascript before I was introduced to Typescript. Like most people, I suffered through many null errors and was relieved when I discovered that the Typescript compiler could save me from many of them. Like most people, though I am grateful for Typescript, I find it occasionally cumbersome. ":[{"content":"I opted to use Javascript instead of Typescript out of mix of curiosity and laziness. Like most people, I was introduced to Javascript before I was introduced to Typescript. Like most people, I suffered through many null errors and was relieved when I discovered that the Typescript compiler could save me from many of them. Like most people, though I am grateful for Typescript, I find it occasionally cumbersome.","parent":"posts/The making of Nomad Hypertext.txt","score":1.0000000000000002},{"content":"I read Rich Harris' twitter thread on how Javascript with JSDoc is actually pretty good, and decided to give it a shot. To be clear, I'm not blaming Rich Harris for my choice - he qualified his point, saying JS with JSDoc is preferable to Typescript for library development, because not having an intermediate build step makes it easier to reproduce bugs in a REPL. He still recommends using Typescript for projects (I think), so I was acting against his advice here.","parent":"posts/The making of Nomad Hypertext.txt","score":0.9181468061587815},{"content":"The results were... mixed. I did get to move faster at the start, but started running into more and more type-related bugs as development went on. If I were to do this project again, I'd stick to Typescript.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8899930626238798},{"content":"In any case I wanted to try something new because that's what Recurse is all about, so I tried making a project with just JS and JSDoc for some semblance of type safety.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8859134358350728},{"content":"To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8761542557070856},{"content":"I want to learn more code. Working on [[exegesis]] over the course of a year, I saw my coding ability improve substantially. Towards the last 2 months, while rewriting a part of the codebase, I found myself dumbfounded by some of the decisions and patterns I had used a year earlier. The code I wrote towards the end was noticeably cleaner and more maintainable, mostly because I had familiarized myself with [[React]] hooks. Learning NextJS and GraphQL was also very rewarding, and both technologies were used extensively in the final version of exegesis. Looking forwards, I am thinking about learning Go, Clojure and maybe Rust. Go is the most practical one of all these for my purposes, and could open up a lot of job offers. Clojure is the most interesting from a theoretical standpoint, since I've never used a lisp or functional language. Rust is interesting because I hate systems/low-level programming, but I suspect that might only be because I hate C, and maybe Rust's more modern features will sell me on it.","parent":"posts/Reflections for the New Year.txt","score":0.8752240958398452},{"content":"Learning Javascript, I never took notes, because all the reference docs were online anyways. Besides, the difficult part of programming isn't remembering APIs, it's the process of taking an idea and building it out, and there's no way to get better at that except by building. There's a reason most university CS courses don't test memorization heavily and instead focus on having students build projects. I suspect this is true for a lot of subjects.","parent":"posts/On tools for thought: knowledge management vs creativity.txt","score":0.8706489621585423},{"content":"// MISTAKE 1: JAVASCRIPT INSTEAD OF TYPESCRIPT","parent":"posts/The making of Nomad Hypertext.txt","score":0.8655980385722168},{"content":"I want to clarify that I'm not bullish at all on no-code. I think \"no-code\" and \"low-code\" are the wrong way to frame things. There is a place for tools like this, but it's more productive to think of them as \"visual developer tools.\"[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8530787376873685},{"content":"For example, I'm starting to suspect that no styling library is going to provide a good experience, because the fundamental pain point is trying to express a visual idea with a text-based set of rules. A styling library can provide some affordances that make things easier - easy theming, dark mode, conditional styles, etc. etc - but the fundamental painful experience of trying to express a visual idea in code cannot be ameliorated with better code tools.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8450701291457767},{"content":"This is not the case for programming. Making better tools for programming (new languages, new frameworks, new libraries) itself requires programming, and while making programming tools is different in important respects from writing regular programs, it is still programming. Making guitars is not playing guitars, making paints is not painting, but making better programming tools is programming. Programming, then, is an, intrinsically recursive creative medium.","parent":"posts/Prometheus.txt","score":0.8420998178920495},{"content":"Electron really, really, really sucks. For starters, you have to use CommonJS. That itself would be bad enough, but there are a huge pile of other inconveniences that Electron dumps on you: Using window.prompt() doesn't work (because it blocks the main thread apparently) and it generates HUGE executables without making the slightest effort to tree-shake anything (it was literally bundling in sample text files I was using in the repo). Creating my own window.prompt() alternative was an interesting exercise, but I wish I wasn't forced into doing it.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8412620513479563},{"content":"This was reassuring, because it meant I had made something genuinely useful. In the past, I have made things I simply had no desire to use - one example is [JAFT](https://nichwch.medium.com/what-is-jaft-f543a4fad9d7), a time tracking app I made after making YANA (the predecessor to exegesis). I stopped using it after a bit, and didn't bother renewing the domain. I don't miss JAFT at all. The fact that I did miss exegesis on the days where it wasn't operational was a good sign.","parent":"posts/Second Brains.txt","score":0.83877813092618},{"content":"You might object: Just because the vector DB and text embedding model are tied to JS doesn't mean your whole application does! You'd be right. I could have rolled the vector DB and text embedding model into a separate executable, compiling a node wrapper around those libraries into their own executables, then calling those executables from my Tauri app with IPC.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8387495087765879},{"content":"I've been working on notetaking apps for years now. I starting working on the first one on the bus back from my internship. I had an idea for a simple interaction - users should be able to highlight a piece of text, then add tags to that text. I distinctly remember thinking to myself, \"That should be a piece of cake! I should be able to finish it during the 45 minute bus  ride.\"\n\n\nIt ended up taking the rest of the summer. I was 19, naive, and had no idea what a nightmare the contenteditable HTML standard was.","parent":"posts/Plaintext is your best friend.txt","score":0.8371860376913534},{"content":"Front end development should be way more visual. A great deal of front-end development pain points cannot be fixed with fancier libraries and languages, because the fundamental mismatch is trying to create something visual with a text-based tool.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8356711228805364},{"content":"I avoided this IPC-executable approach because I thought it'd be really complicated. To some extent, this was the correct decision - I'm glad I got a MVP of my project out during my time at Recurse.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8349325634245024},{"content":"[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]]","parent":"posts/untitled-9-20-2021.txt","score":0.8338740430133538},{"content":"Working on exegesis was a grueling affair at times. I rewrote the schema multiple times, rewrote the backend from scratch 2 months before release, chased countless UI bugs, and manually patched abandoned NPM packages. Part of it may have been due to my inexperience, but [working with ](https://nichwch.medium.com/making-yana-e3fade3f56e7)[rich text](https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480) is just a [difficult task](https://twitter.com/thesephist/status/1360298464349999108), period. At one point, I considered giving up after finding a rival writing app I thought I simply couldn't compete with - I have a copy of an unfinished essay I started writing on why I had given up tucked away somewhere.","parent":"posts/Prometheus.txt","score":0.833460501989729},{"content":"I desperately want programming to feel like this.","parent":"posts/Fragments.txt","score":0.8332490126478909}],"// MISTAKE 1: JAVASCRIPT INSTEAD OF TYPESCRIPT":[{"content":"// MISTAKE 1: JAVASCRIPT INSTEAD OF TYPESCRIPT","parent":"posts/The making of Nomad Hypertext.txt","score":1.0000000000000002},{"content":"// MISTAKE 2: ELECTRON","parent":"posts/The making of Nomad Hypertext.txt","score":0.8888806252527257},{"content":"// MISTAKE 3: NOT BEING UNIX-PILLED ENOUGH","parent":"posts/The making of Nomad Hypertext.txt","score":0.8722778892479812},{"content":"I opted to use Javascript instead of Typescript out of mix of curiosity and laziness. Like most people, I was introduced to Javascript before I was introduced to Typescript. Like most people, I suffered through many null errors and was relieved when I discovered that the Typescript compiler could save me from many of them. Like most people, though I am grateful for Typescript, I find it occasionally cumbersome.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8655980385722168},{"content":"// 1. SECTION TITLE","parent":"posts/Plaintext is your best friend.txt","score":0.8585255527870423},{"content":"// Postscript","parent":"posts/On tools for thought: knowledge management vs creativity.txt","score":0.8556284878214605},{"content":"// Namespaces","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8370206861460926},{"content":"// Edit: 1/6/2021","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8366851811180231},{"content":"// FREE AND OPEN SOURCE","parent":"posts/What is Nomad Hypertext.txt","score":0.8351064898795407},{"content":"// Context","parent":"posts/Context and community makes music more enjoyable, and it's missing from modern streaming services.txt","score":0.8331416549502653},{"content":"// HOW TO USE NOMAD HYPERTEXT","parent":"posts/What is Nomad Hypertext.txt","score":0.8324849205685318},{"content":"// [https://ava.substack.com/p/one-small-thing?token=eyJ1c2VyX2lkIjoxMDUwNzA4NywicG9zdF9pZCI6NDA3ODUwNjgsIl8iOiI4R2RYTiIsImlhdCI6MTYzMjM1NzQxNiwiZXhwIjoxNjMyMzYxMDE2LCJpc3MiOiJwdWItMjM0MTciLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.lHl23vruozg5jSB6kISO4zswiVGojLBM2UkPLlrmx_Q](https://ava.substack.com/p/one-small-thing?token=eyJ1c2VyX2lkIjoxMDUwNzA4NywicG9zdF9pZCI6NDA3ODUwNjgsIl8iOiI4R2RYTiIsImlhdCI6MTYzMjM1NzQxNiwiZXhwIjoxNjMyMzYxMDE2LCJpc3MiOiJwdWItMjM0MTciLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.lHl23vruozg5jSB6kISO4zswiVGojLBM2UkPLlrmx_Q)","parent":"posts/untitled-9-22-2021.txt","score":0.8315613221768517},{"content":"// Technology that controls you","parent":"posts/Giant Robots.txt","score":0.8311007210300653},{"content":"// Read this, liked it a lot.","parent":"posts/untitled-9-22-2021.txt","score":0.8295258563648199},{"content":"I read Rich Harris' twitter thread on how Javascript with JSDoc is actually pretty good, and decided to give it a shot. To be clear, I'm not blaming Rich Harris for my choice - he qualified his point, saying JS with JSDoc is preferable to Typescript for library development, because not having an intermediate build step makes it easier to reproduce bugs in a REPL. He still recommends using Typescript for projects (I think), so I was acting against his advice here.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8284956673422915},{"content":"// SEMANTIC SEARCH IS ALL YOU NEED","parent":"posts/What is Nomad Hypertext.txt","score":0.827327400223343},{"content":"// Technology that you control","parent":"posts/Giant Robots.txt","score":0.8240700541443117},{"content":"// Key Features","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8234808283226457},{"content":"// Like this! This line will not show up in the index.","parent":"posts/What is Nomad Hypertext.txt","score":0.8224342149532513},{"content":"The results were... mixed. I did get to move faster at the start, but started running into more and more type-related bugs as development went on. If I were to do this project again, I'd stick to Typescript.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8209456503209374}],"To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri. ":[{"content":"To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri.","parent":"posts/The making of Nomad Hypertext.txt","score":1},{"content":"Nomad Hypertext is a writing app built around semantic search.","parent":"posts/What is Nomad Hypertext.txt","score":0.9018091339147541},{"content":"There are pros and cons to this approach. The biggest pro is that it generates a static blog. There's no backend to maintain, and it's quite lightweight and loads fast, while also providing the benefit of semantic hyperlinks. The con is that since the index is precomputed, you can't search for arbitrary things like you can in nomad hypertext.","parent":"posts/What is Yurt.txt","score":0.890067246426061},{"content":"I was greatly inspired by two blogposts. The first, [Hyperlink Maximalism](https://thesephist.com/posts/hyperlink/) by Linus Lee talks about generating hyperlinks automatically between documents, and comes with a [demo](https://notation.app) that made a deep impression on me. To be honest, nomad hypertext is just Linus' demo using semantic search instead of full text search.","parent":"posts/What is Nomad Hypertext.txt","score":0.8830939951497949},{"content":"The results were... mixed. I did get to move faster at the start, but started running into more and more type-related bugs as development went on. If I were to do this project again, I'd stick to Typescript.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8813125965108983},{"content":"One last thing: There is a solution that combines the flexibility of plaintext with the aesthetics of rich text - Markdown! I don't think I'll support Markdown formatting in nomad hypertext, but for my static site generator Yurt, I will try to do that in the future. The utility would mostly be from having usable links.","parent":"posts/Plaintext is your best friend.txt","score":0.881064905878126},{"content":"// HOW TO USE NOMAD HYPERTEXT","parent":"posts/What is Nomad Hypertext.txt","score":0.8805950337110664},{"content":"I want to clarify that I'm not bullish at all on no-code. I think \"no-code\" and \"low-code\" are the wrong way to frame things. There is a place for tools like this, but it's more productive to think of them as \"visual developer tools.\"[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8799834049531692},{"content":"In any case I wanted to try something new because that's what Recurse is all about, so I tried making a project with just JS and JSDoc for some semblance of type safety.","parent":"posts/The making of Nomad Hypertext.txt","score":0.879423394812943},{"content":"I opted to use Javascript instead of Typescript out of mix of curiosity and laziness. Like most people, I was introduced to Javascript before I was introduced to Typescript. Like most people, I suffered through many null errors and was relieved when I discovered that the Typescript compiler could save me from many of them. Like most people, though I am grateful for Typescript, I find it occasionally cumbersome.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8761542557070856},{"content":"I'll end with a haiku. \n\nNomad Hypertext\nPowered by semantic search\nGives inspiration","parent":"posts/What is Nomad Hypertext.txt","score":0.8750874150049902},{"content":"However, when building Yurt, the static site builder for nomad hypertext, I found myself repeating a lot of logic. I found myself wanting to add features to the indexing engine, like being able to use cloud providers instead of local models (because doing all this processing locally can take ages!). In the future, I might want to use multimodal models, so I can see similarity between images, text, and audio. \n\nFactoring out the semantic search element of my app would have been the correct, unix-ey thing to do, and it would allow me to make these extensions in the future. I plan on doing this soon.","parent":"posts/The making of Nomad Hypertext.txt","score":0.872952068480043},{"content":"I read Rich Harris' twitter thread on how Javascript with JSDoc is actually pretty good, and decided to give it a shot. To be clear, I'm not blaming Rich Harris for my choice - he qualified his point, saying JS with JSDoc is preferable to Typescript for library development, because not having an intermediate build step makes it easier to reproduce bugs in a REPL. He still recommends using Typescript for projects (I think), so I was acting against his advice here.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8712134788707568},{"content":"Electron really, really, really sucks. For starters, you have to use CommonJS. That itself would be bad enough, but there are a huge pile of other inconveniences that Electron dumps on you: Using window.prompt() doesn't work (because it blocks the main thread apparently) and it generates HUGE executables without making the slightest effort to tree-shake anything (it was literally bundling in sample text files I was using in the repo). Creating my own window.prompt() alternative was an interesting exercise, but I wish I wasn't forced into doing it.","parent":"posts/The making of Nomad Hypertext.txt","score":0.869926390278184},{"content":"Yurt is a static site generator, built off the same principles as Nomad Hypertext.","parent":"posts/What is Yurt.txt","score":0.8685906772172811},{"content":"I've been working on notetaking apps for years now. I starting working on the first one on the bus back from my internship. I had an idea for a simple interaction - users should be able to highlight a piece of text, then add tags to that text. I distinctly remember thinking to myself, \"That should be a piece of cake! I should be able to finish it during the 45 minute bus  ride.\"\n\n\nIt ended up taking the rest of the summer. I was 19, naive, and had no idea what a nightmare the contenteditable HTML standard was.","parent":"posts/Plaintext is your best friend.txt","score":0.8638877128159577},{"content":"There are lots of tools for thought out there with names inspired by great empires or their capitals: Roam (Rome) Research, Athens Research, Vienna Hypertext, etc. etc. I like all of these apps and have taken inspiration from them.\n\nBut isn't it strange that they have such imperial names? Tools for thought aren't about hierarchy and order, they're about freeing your thoughts to mingle with each other. It's less about ordering your thoughts into a hierarchical empire, and more about letting them wander freely, so that they might bear fruit. \n\nThat's why I picked the name nomad hypertext.","parent":"posts/What is Nomad Hypertext.txt","score":0.8624226361282945},{"content":"Why not Tauri? With Tauri you have to write your backend routes in Rust. Surprisingly, I could not find any in-memory vector databases in Rust. I also have never written Rust in my life, though I would have been happy to pick it up to avoid using Electron. More importantly, I don't think there was a library that would have let me run Hugging Face's text embedding model in Rust. For these reasons, I had to use JS for my backend, which meant I had to use Electron.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8607893681215181},{"content":"You might object: Just because the vector DB and text embedding model are tied to JS doesn't mean your whole application does! You'd be right. I could have rolled the vector DB and text embedding model into a separate executable, compiling a node wrapper around those libraries into their own executables, then calling those executables from my Tauri app with IPC.","parent":"posts/The making of Nomad Hypertext.txt","score":0.859340092454445},{"content":"Front end development should be way more visual. A great deal of front-end development pain points cannot be fixed with fancier libraries and languages, because the fundamental mismatch is trying to create something visual with a text-based tool.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8572622569175641}],"In any case I wanted to try something new because that's what Recurse is all about, so I tried making a project with just JS and JSDoc for some semblance of type safety. ":[{"content":"In any case I wanted to try something new because that's what Recurse is all about, so I tried making a project with just JS and JSDoc for some semblance of type safety.","parent":"posts/The making of Nomad Hypertext.txt","score":0.9999999999999998},{"content":"I read Rich Harris' twitter thread on how Javascript with JSDoc is actually pretty good, and decided to give it a shot. To be clear, I'm not blaming Rich Harris for my choice - he qualified his point, saying JS with JSDoc is preferable to Typescript for library development, because not having an intermediate build step makes it easier to reproduce bugs in a REPL. He still recommends using Typescript for projects (I think), so I was acting against his advice here.","parent":"posts/The making of Nomad Hypertext.txt","score":0.9225330114860658},{"content":"I opted to use Javascript instead of Typescript out of mix of curiosity and laziness. Like most people, I was introduced to Javascript before I was introduced to Typescript. Like most people, I suffered through many null errors and was relieved when I discovered that the Typescript compiler could save me from many of them. Like most people, though I am grateful for Typescript, I find it occasionally cumbersome.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8859134358350728},{"content":"To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri.","parent":"posts/The making of Nomad Hypertext.txt","score":0.879423394812943},{"content":"You might object: Just because the vector DB and text embedding model are tied to JS doesn't mean your whole application does! You'd be right. I could have rolled the vector DB and text embedding model into a separate executable, compiling a node wrapper around those libraries into their own executables, then calling those executables from my Tauri app with IPC.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8775182074222531},{"content":"Learning Javascript, I never took notes, because all the reference docs were online anyways. Besides, the difficult part of programming isn't remembering APIs, it's the process of taking an idea and building it out, and there's no way to get better at that except by building. There's a reason most university CS courses don't test memorization heavily and instead focus on having students build projects. I suspect this is true for a lot of subjects.","parent":"posts/On tools for thought: knowledge management vs creativity.txt","score":0.8692173036072471},{"content":"The results were... mixed. I did get to move faster at the start, but started running into more and more type-related bugs as development went on. If I were to do this project again, I'd stick to Typescript.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8691583905146432},{"content":"I want to learn more code. Working on [[exegesis]] over the course of a year, I saw my coding ability improve substantially. Towards the last 2 months, while rewriting a part of the codebase, I found myself dumbfounded by some of the decisions and patterns I had used a year earlier. The code I wrote towards the end was noticeably cleaner and more maintainable, mostly because I had familiarized myself with [[React]] hooks. Learning NextJS and GraphQL was also very rewarding, and both technologies were used extensively in the final version of exegesis. Looking forwards, I am thinking about learning Go, Clojure and maybe Rust. Go is the most practical one of all these for my purposes, and could open up a lot of job offers. Clojure is the most interesting from a theoretical standpoint, since I've never used a lisp or functional language. Rust is interesting because I hate systems/low-level programming, but I suspect that might only be because I hate C, and maybe Rust's more modern features will sell me on it.","parent":"posts/Reflections for the New Year.txt","score":0.8552024301844935},{"content":"The vision is to have a tool that provides a visual interface for creating layouts, and maybe even rigging up basic stateful logic, or data fetching logic. I've more or less nailed down a preferred personal stack for creating projects with React, Express and Postgres, so it shouldn't be terribly difficult to even integrate database logic/fetching logic into such a tool (so long as some flexibility is lost on technology choice).[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8533982619413523},{"content":"I want to clarify that I'm not bullish at all on no-code. I think \"no-code\" and \"low-code\" are the wrong way to frame things. There is a place for tools like this, but it's more productive to think of them as \"visual developer tools.\"[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8522391881658763},{"content":"I've been working on notetaking apps for years now. I starting working on the first one on the bus back from my internship. I had an idea for a simple interaction - users should be able to highlight a piece of text, then add tags to that text. I distinctly remember thinking to myself, \"That should be a piece of cake! I should be able to finish it during the 45 minute bus  ride.\"\n\n\nIt ended up taking the rest of the summer. I was 19, naive, and had no idea what a nightmare the contenteditable HTML standard was.","parent":"posts/Plaintext is your best friend.txt","score":0.8496241971937336},{"content":"[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]]","parent":"posts/untitled-9-20-2021.txt","score":0.846165455149972},{"content":"Electron really, really, really sucks. For starters, you have to use CommonJS. That itself would be bad enough, but there are a huge pile of other inconveniences that Electron dumps on you: Using window.prompt() doesn't work (because it blocks the main thread apparently) and it generates HUGE executables without making the slightest effort to tree-shake anything (it was literally bundling in sample text files I was using in the repo). Creating my own window.prompt() alternative was an interesting exercise, but I wish I wasn't forced into doing it.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8458137611335913},{"content":"This was reassuring, because it meant I had made something genuinely useful. In the past, I have made things I simply had no desire to use - one example is [JAFT](https://nichwch.medium.com/what-is-jaft-f543a4fad9d7), a time tracking app I made after making YANA (the predecessor to exegesis). I stopped using it after a bit, and didn't bother renewing the domain. I don't miss JAFT at all. The fact that I did miss exegesis on the days where it wasn't operational was a good sign.","parent":"posts/Second Brains.txt","score":0.8455476259502613},{"content":"Front end development should be way more visual. A great deal of front-end development pain points cannot be fixed with fancier libraries and languages, because the fundamental mismatch is trying to create something visual with a text-based tool.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.845185804848239},{"content":"For example, I'm starting to suspect that no styling library is going to provide a good experience, because the fundamental pain point is trying to express a visual idea with a text-based set of rules. A styling library can provide some affordances that make things easier - easy theming, dark mode, conditional styles, etc. etc - but the fundamental painful experience of trying to express a visual idea in code cannot be ameliorated with better code tools.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8451603429635177},{"content":"Tagging this all meta-acropolis, an edtech project I'm in the early stages of working on. Don't have any code for it, just ideas, but I plan on putting something together soon™. [[meta-acropolis]] [[ideas]]","parent":"posts/untitled-9-21-2021.txt","score":0.8437719345320766},{"content":"To make regular progress towards personal projects, I'll be writing more on my development progress with [[exegesis]], under the tag [[devlog]]. I'll also be publishing another post soon on my plans for future features, and when I expect to release them by. I will do something similar with my other projects.","parent":"posts/Goals for Spring Quarter.txt","score":0.8437077677924777},{"content":"This is not the case for programming. Making better tools for programming (new languages, new frameworks, new libraries) itself requires programming, and while making programming tools is different in important respects from writing regular programs, it is still programming. Making guitars is not playing guitars, making paints is not painting, but making better programming tools is programming. Programming, then, is an, intrinsically recursive creative medium.","parent":"posts/Prometheus.txt","score":0.8436104049877049},{"content":"[[ideas]]: A tool that analyzes a react project and shows your component structure for you in a nice and visual way. Probably already exists, idk","parent":"posts/untitled-9-20-2021.txt","score":0.8434137024162389}],"I read Rich Harris' twitter thread on how Javascript with JSDoc is actually pretty good, and decided to give it a shot. To be clear, I'm not blaming Rich Harris for my choice - he qualified his point, saying JS with JSDoc is preferable to Typescript for library development, because not having an intermediate build step makes it easier to reproduce bugs in a REPL. He still recommends using Typescript for projects (I think), so I was acting against his advice here. ":[{"content":"I read Rich Harris' twitter thread on how Javascript with JSDoc is actually pretty good, and decided to give it a shot. To be clear, I'm not blaming Rich Harris for my choice - he qualified his point, saying JS with JSDoc is preferable to Typescript for library development, because not having an intermediate build step makes it easier to reproduce bugs in a REPL. He still recommends using Typescript for projects (I think), so I was acting against his advice here.","parent":"posts/The making of Nomad Hypertext.txt","score":1},{"content":"In any case I wanted to try something new because that's what Recurse is all about, so I tried making a project with just JS and JSDoc for some semblance of type safety.","parent":"posts/The making of Nomad Hypertext.txt","score":0.9225330114860658},{"content":"I opted to use Javascript instead of Typescript out of mix of curiosity and laziness. Like most people, I was introduced to Javascript before I was introduced to Typescript. Like most people, I suffered through many null errors and was relieved when I discovered that the Typescript compiler could save me from many of them. Like most people, though I am grateful for Typescript, I find it occasionally cumbersome.","parent":"posts/The making of Nomad Hypertext.txt","score":0.9181468061587815},{"content":"The results were... mixed. I did get to move faster at the start, but started running into more and more type-related bugs as development went on. If I were to do this project again, I'd stick to Typescript.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8757715507625694},{"content":"To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8712134788707568},{"content":"Learning Javascript, I never took notes, because all the reference docs were online anyways. Besides, the difficult part of programming isn't remembering APIs, it's the process of taking an idea and building it out, and there's no way to get better at that except by building. There's a reason most university CS courses don't test memorization heavily and instead focus on having students build projects. I suspect this is true for a lot of subjects.","parent":"posts/On tools for thought: knowledge management vs creativity.txt","score":0.8619376888121185},{"content":"You might object: Just because the vector DB and text embedding model are tied to JS doesn't mean your whole application does! You'd be right. I could have rolled the vector DB and text embedding model into a separate executable, compiling a node wrapper around those libraries into their own executables, then calling those executables from my Tauri app with IPC.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8618081129033529},{"content":"I want to learn more code. Working on [[exegesis]] over the course of a year, I saw my coding ability improve substantially. Towards the last 2 months, while rewriting a part of the codebase, I found myself dumbfounded by some of the decisions and patterns I had used a year earlier. The code I wrote towards the end was noticeably cleaner and more maintainable, mostly because I had familiarized myself with [[React]] hooks. Learning NextJS and GraphQL was also very rewarding, and both technologies were used extensively in the final version of exegesis. Looking forwards, I am thinking about learning Go, Clojure and maybe Rust. Go is the most practical one of all these for my purposes, and could open up a lot of job offers. Clojure is the most interesting from a theoretical standpoint, since I've never used a lisp or functional language. Rust is interesting because I hate systems/low-level programming, but I suspect that might only be because I hate C, and maybe Rust's more modern features will sell me on it.","parent":"posts/Reflections for the New Year.txt","score":0.8532930485375612},{"content":"Front end development should be way more visual. A great deal of front-end development pain points cannot be fixed with fancier libraries and languages, because the fundamental mismatch is trying to create something visual with a text-based tool.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8453474004370706},{"content":"Electron really, really, really sucks. For starters, you have to use CommonJS. That itself would be bad enough, but there are a huge pile of other inconveniences that Electron dumps on you: Using window.prompt() doesn't work (because it blocks the main thread apparently) and it generates HUGE executables without making the slightest effort to tree-shake anything (it was literally bundling in sample text files I was using in the repo). Creating my own window.prompt() alternative was an interesting exercise, but I wish I wasn't forced into doing it.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8452508737741177},{"content":"I want to clarify that I'm not bullish at all on no-code. I think \"no-code\" and \"low-code\" are the wrong way to frame things. There is a place for tools like this, but it's more productive to think of them as \"visual developer tools.\"[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8445825388939996},{"content":"For example, I'm starting to suspect that no styling library is going to provide a good experience, because the fundamental pain point is trying to express a visual idea with a text-based set of rules. A styling library can provide some affordances that make things easier - easy theming, dark mode, conditional styles, etc. etc - but the fundamental painful experience of trying to express a visual idea in code cannot be ameliorated with better code tools.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8425181762409971},{"content":"This is not the case for programming. Making better tools for programming (new languages, new frameworks, new libraries) itself requires programming, and while making programming tools is different in important respects from writing regular programs, it is still programming. Making guitars is not playing guitars, making paints is not painting, but making better programming tools is programming. Programming, then, is an, intrinsically recursive creative medium.","parent":"posts/Prometheus.txt","score":0.8371861923770096},{"content":"I avoided this IPC-executable approach because I thought it'd be really complicated. To some extent, this was the correct decision - I'm glad I got a MVP of my project out during my time at Recurse.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8364206164473147},{"content":"// MISTAKE 1: JAVASCRIPT INSTEAD OF TYPESCRIPT","parent":"posts/The making of Nomad Hypertext.txt","score":0.8284956673422915},{"content":"Why not Tauri? With Tauri you have to write your backend routes in Rust. Surprisingly, I could not find any in-memory vector databases in Rust. I also have never written Rust in my life, though I would have been happy to pick it up to avoid using Electron. More importantly, I don't think there was a library that would have let me run Hugging Face's text embedding model in Rust. For these reasons, I had to use JS for my backend, which meant I had to use Electron.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8204764437146165},{"content":"This was reassuring, because it meant I had made something genuinely useful. In the past, I have made things I simply had no desire to use - one example is [JAFT](https://nichwch.medium.com/what-is-jaft-f543a4fad9d7), a time tracking app I made after making YANA (the predecessor to exegesis). I stopped using it after a bit, and didn't bother renewing the domain. I don't miss JAFT at all. The fact that I did miss exegesis on the days where it wasn't operational was a good sign.","parent":"posts/Second Brains.txt","score":0.8178844571323882},{"content":"I've been working on notetaking apps for years now. I starting working on the first one on the bus back from my internship. I had an idea for a simple interaction - users should be able to highlight a piece of text, then add tags to that text. I distinctly remember thinking to myself, \"That should be a piece of cake! I should be able to finish it during the 45 minute bus  ride.\"\n\n\nIt ended up taking the rest of the summer. I was 19, naive, and had no idea what a nightmare the contenteditable HTML standard was.","parent":"posts/Plaintext is your best friend.txt","score":0.8167384825715751},{"content":"[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]]","parent":"posts/untitled-9-20-2021.txt","score":0.8166023738755606},{"content":"Learn more code (new languages, new frameworks, new databases, fancy tech like blockchain and ML, etc. etc.)","parent":"posts/Goals for Spring Quarter.txt","score":0.8147597489884901}],"The results were... mixed. I did get to move faster at the start, but started running into more and more type-related bugs as development went on. If I were to do this project again, I'd stick to Typescript. ":[{"content":"The results were... mixed. I did get to move faster at the start, but started running into more and more type-related bugs as development went on. If I were to do this project again, I'd stick to Typescript.","parent":"posts/The making of Nomad Hypertext.txt","score":0.9999999999999998},{"content":"I opted to use Javascript instead of Typescript out of mix of curiosity and laziness. Like most people, I was introduced to Javascript before I was introduced to Typescript. Like most people, I suffered through many null errors and was relieved when I discovered that the Typescript compiler could save me from many of them. Like most people, though I am grateful for Typescript, I find it occasionally cumbersome.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8899930626238798},{"content":"To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8813125965108983},{"content":"I read Rich Harris' twitter thread on how Javascript with JSDoc is actually pretty good, and decided to give it a shot. To be clear, I'm not blaming Rich Harris for my choice - he qualified his point, saying JS with JSDoc is preferable to Typescript for library development, because not having an intermediate build step makes it easier to reproduce bugs in a REPL. He still recommends using Typescript for projects (I think), so I was acting against his advice here.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8757715507625694},{"content":"In any case I wanted to try something new because that's what Recurse is all about, so I tried making a project with just JS and JSDoc for some semblance of type safety.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8691583905146432},{"content":"I want to learn more code. Working on [[exegesis]] over the course of a year, I saw my coding ability improve substantially. Towards the last 2 months, while rewriting a part of the codebase, I found myself dumbfounded by some of the decisions and patterns I had used a year earlier. The code I wrote towards the end was noticeably cleaner and more maintainable, mostly because I had familiarized myself with [[React]] hooks. Learning NextJS and GraphQL was also very rewarding, and both technologies were used extensively in the final version of exegesis. Looking forwards, I am thinking about learning Go, Clojure and maybe Rust. Go is the most practical one of all these for my purposes, and could open up a lot of job offers. Clojure is the most interesting from a theoretical standpoint, since I've never used a lisp or functional language. Rust is interesting because I hate systems/low-level programming, but I suspect that might only be because I hate C, and maybe Rust's more modern features will sell me on it.","parent":"posts/Reflections for the New Year.txt","score":0.8529366514478323},{"content":"There was a problem with both of these outlets, however: my short attention span. I struggled to work on larger drawings, because I'd give up on them and start new doodles. The same happened with code projects.","parent":"posts/Fragments.txt","score":0.8523563628460776},{"content":"Front end development should be way more visual. A great deal of front-end development pain points cannot be fixed with fancier libraries and languages, because the fundamental mismatch is trying to create something visual with a text-based tool.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8517208637274895},{"content":"I want to clarify that I'm not bullish at all on no-code. I think \"no-code\" and \"low-code\" are the wrong way to frame things. There is a place for tools like this, but it's more productive to think of them as \"visual developer tools.\"[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.848912386280654},{"content":"Working on exegesis was a grueling affair at times. I rewrote the schema multiple times, rewrote the backend from scratch 2 months before release, chased countless UI bugs, and manually patched abandoned NPM packages. Part of it may have been due to my inexperience, but [working with ](https://nichwch.medium.com/making-yana-e3fade3f56e7)[rich text](https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480) is just a [difficult task](https://twitter.com/thesephist/status/1360298464349999108), period. At one point, I considered giving up after finding a rival writing app I thought I simply couldn't compete with - I have a copy of an unfinished essay I started writing on why I had given up tucked away somewhere.","parent":"posts/Prometheus.txt","score":0.8475128695237493},{"content":"Learning Javascript, I never took notes, because all the reference docs were online anyways. Besides, the difficult part of programming isn't remembering APIs, it's the process of taking an idea and building it out, and there's no way to get better at that except by building. There's a reason most university CS courses don't test memorization heavily and instead focus on having students build projects. I suspect this is true for a lot of subjects.","parent":"posts/On tools for thought: knowledge management vs creativity.txt","score":0.846779988546338},{"content":"To make regular progress towards personal projects, I'll be writing more on my development progress with [[exegesis]], under the tag [[devlog]]. I'll also be publishing another post soon on my plans for future features, and when I expect to release them by. I will do something similar with my other projects.","parent":"posts/Goals for Spring Quarter.txt","score":0.8435743484873486},{"content":"Why did it take so long? Part of it is just a lack of experience. While making exegesis, I changed the database schema countless times, wrote dozens of migrations, accidentally wiped my database once (thank God for RDS backups), and rewrote the backend from scratch 2 months before release. There was also a good amount of feature creep. Whenever I thought I was close to finished, something unexpected would pop up - I started writing this essay 3 months before I actually released exegesis. Whatever the reason, if you count development time on the predecessor to exegesis, I've spent almost a tenth of my life building this. The entire project clocks in at a couple thousand lines of code. It is the largest, most complex, and most difficult thing I have built so far in my life.  [The last time I worked on a project this long, it was the first video game I made back in my senior year of high school.](https://medium.com/@nichwch/machine-gods-devlog-1-166dff474366) Even then, it was really about 6 months of development total, with a huge gap in between because of school, and it was all made with no-code game development tools, because back then the idea of using actual code terrified me. [[exegesis]] [[personal-reflection]]","parent":"posts/Reflections on exegesis.txt","score":0.842940769750904},{"content":"Electron really, really, really sucks. For starters, you have to use CommonJS. That itself would be bad enough, but there are a huge pile of other inconveniences that Electron dumps on you: Using window.prompt() doesn't work (because it blocks the main thread apparently) and it generates HUGE executables without making the slightest effort to tree-shake anything (it was literally bundling in sample text files I was using in the repo). Creating my own window.prompt() alternative was an interesting exercise, but I wish I wasn't forced into doing it.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8417125149119119},{"content":"This project, too, has had a large effect on me - you can't work on something for a year and not have it affect you. I started this project sitting in a coffee shop; now I haven't sat in one for months. I know this sounds like navel gazing, but I've worked on this project through a pandemic, civil unrest, and statewide wildfires. Now it's finished, and I almost feel a little bittersweet releasing it.","parent":"posts/Reflections on exegesis.txt","score":0.8404525077317956},{"content":"Working on a refactor for [[exegesis]] and [[synesthesia]], thinking about how to budget time. Working strategy is to take estimate for each feature, and double the time for each to account for stupid roadblocks (wifi not working, interrupted by something, bad documentation, etc. etc.) [[code]] [[devlog]]","parent":"posts/untitled-9-21-2021.txt","score":0.8402603878763578},{"content":"You might object: Just because the vector DB and text embedding model are tied to JS doesn't mean your whole application does! You'd be right. I could have rolled the vector DB and text embedding model into a separate executable, compiling a node wrapper around those libraries into their own executables, then calling those executables from my Tauri app with IPC.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8399667954544817},{"content":"For example, I'm starting to suspect that no styling library is going to provide a good experience, because the fundamental pain point is trying to express a visual idea with a text-based set of rules. A styling library can provide some affordances that make things easier - easy theming, dark mode, conditional styles, etc. etc - but the fundamental painful experience of trying to express a visual idea in code cannot be ameliorated with better code tools.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8392767426312017},{"content":"This is not the case for programming. Making better tools for programming (new languages, new frameworks, new libraries) itself requires programming, and while making programming tools is different in important respects from writing regular programs, it is still programming. Making guitars is not playing guitars, making paints is not painting, but making better programming tools is programming. Programming, then, is an, intrinsically recursive creative medium.","parent":"posts/Prometheus.txt","score":0.8379592814788124},{"content":"That last project had a significant effect on me. Back in high school, I was heavily involved in Model UN and other political clubs. Making the [game](https://nichwch.itch.io/machinegods) made me realize it was making things and not winning arguments that really made me happier. It was also what convinced me that programming could be something more than rote problem solving, and even be a genuine creative medium. It was why I switched my major from Economics to Computer Science in college.[[personal-reflection]]","parent":"posts/Reflections on exegesis.txt","score":0.8319105427049873}],"Why not Tauri? With Tauri you have to write your backend routes in Rust. Surprisingly, I could not find any in-memory vector databases in Rust. I also have never written Rust in my life, though I would have been happy to pick it up to avoid using Electron. More importantly, I don't think there was a library that would have let me run Hugging Face's text embedding model in Rust. For these reasons, I had to use JS for my backend, which meant I had to use Electron. ":[{"content":"Why not Tauri? With Tauri you have to write your backend routes in Rust. Surprisingly, I could not find any in-memory vector databases in Rust. I also have never written Rust in my life, though I would have been happy to pick it up to avoid using Electron. More importantly, I don't think there was a library that would have let me run Hugging Face's text embedding model in Rust. For these reasons, I had to use JS for my backend, which meant I had to use Electron.","parent":"posts/The making of Nomad Hypertext.txt","score":1.0000000000000002},{"content":"You might object: Just because the vector DB and text embedding model are tied to JS doesn't mean your whole application does! You'd be right. I could have rolled the vector DB and text embedding model into a separate executable, compiling a node wrapper around those libraries into their own executables, then calling those executables from my Tauri app with IPC.","parent":"posts/The making of Nomad Hypertext.txt","score":0.9157126219636793},{"content":"To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8607893681215181},{"content":"The vision is to have a tool that provides a visual interface for creating layouts, and maybe even rigging up basic stateful logic, or data fetching logic. I've more or less nailed down a preferred personal stack for creating projects with React, Express and Postgres, so it shouldn't be terribly difficult to even integrate database logic/fetching logic into such a tool (so long as some flexibility is lost on technology choice).[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8386114238260176},{"content":"I want to learn more code. Working on [[exegesis]] over the course of a year, I saw my coding ability improve substantially. Towards the last 2 months, while rewriting a part of the codebase, I found myself dumbfounded by some of the decisions and patterns I had used a year earlier. The code I wrote towards the end was noticeably cleaner and more maintainable, mostly because I had familiarized myself with [[React]] hooks. Learning NextJS and GraphQL was also very rewarding, and both technologies were used extensively in the final version of exegesis. Looking forwards, I am thinking about learning Go, Clojure and maybe Rust. Go is the most practical one of all these for my purposes, and could open up a lot of job offers. Clojure is the most interesting from a theoretical standpoint, since I've never used a lisp or functional language. Rust is interesting because I hate systems/low-level programming, but I suspect that might only be because I hate C, and maybe Rust's more modern features will sell me on it.","parent":"posts/Reflections for the New Year.txt","score":0.8374431336021636},{"content":"However, when building Yurt, the static site builder for nomad hypertext, I found myself repeating a lot of logic. I found myself wanting to add features to the indexing engine, like being able to use cloud providers instead of local models (because doing all this processing locally can take ages!). In the future, I might want to use multimodal models, so I can see similarity between images, text, and audio. \n\nFactoring out the semantic search element of my app would have been the correct, unix-ey thing to do, and it would allow me to make these extensions in the future. I plan on doing this soon.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8353475022540945},{"content":"Electron really, really, really sucks. For starters, you have to use CommonJS. That itself would be bad enough, but there are a huge pile of other inconveniences that Electron dumps on you: Using window.prompt() doesn't work (because it blocks the main thread apparently) and it generates HUGE executables without making the slightest effort to tree-shake anything (it was literally bundling in sample text files I was using in the repo). Creating my own window.prompt() alternative was an interesting exercise, but I wish I wasn't forced into doing it.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8330523094327501},{"content":"Front end development should be way more visual. A great deal of front-end development pain points cannot be fixed with fancier libraries and languages, because the fundamental mismatch is trying to create something visual with a text-based tool.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8317315623665075},{"content":"In any case I wanted to try something new because that's what Recurse is all about, so I tried making a project with just JS and JSDoc for some semblance of type safety.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8308083464794871},{"content":"I want to clarify that I'm not bullish at all on no-code. I think \"no-code\" and \"low-code\" are the wrong way to frame things. There is a place for tools like this, but it's more productive to think of them as \"visual developer tools.\"[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8303841216461699},{"content":"[[ideas]]: A tool that analyzes a react project and shows your component structure for you in a nice and visual way. Probably already exists, idk","parent":"posts/untitled-9-20-2021.txt","score":0.8264579864151181},{"content":"Visual developer tools","parent":"posts/untitled-9-24-2021.txt","score":0.8263576988818534},{"content":"For example, I'm starting to suspect that no styling library is going to provide a good experience, because the fundamental pain point is trying to express a visual idea with a text-based set of rules. A styling library can provide some affordances that make things easier - easy theming, dark mode, conditional styles, etc. etc - but the fundamental painful experience of trying to express a visual idea in code cannot be ameliorated with better code tools.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.824406608629287},{"content":"The results were... mixed. I did get to move faster at the start, but started running into more and more type-related bugs as development went on. If I were to do this project again, I'd stick to Typescript.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8237347239160693},{"content":"[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]]","parent":"posts/untitled-9-20-2021.txt","score":0.8207096479709594},{"content":"I read Rich Harris' twitter thread on how Javascript with JSDoc is actually pretty good, and decided to give it a shot. To be clear, I'm not blaming Rich Harris for my choice - he qualified his point, saying JS with JSDoc is preferable to Typescript for library development, because not having an intermediate build step makes it easier to reproduce bugs in a REPL. He still recommends using Typescript for projects (I think), so I was acting against his advice here.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8204764437146165},{"content":"I avoided this IPC-executable approach because I thought it'd be really complicated. To some extent, this was the correct decision - I'm glad I got a MVP of my project out during my time at Recurse.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8203033225488906},{"content":"There are pros and cons to this approach. The biggest pro is that it generates a static blog. There's no backend to maintain, and it's quite lightweight and loads fast, while also providing the benefit of semantic hyperlinks. The con is that since the index is precomputed, you can't search for arbitrary things like you can in nomad hypertext.","parent":"posts/What is Yurt.txt","score":0.8202216316254836},{"content":"One last thing: There is a solution that combines the flexibility of plaintext with the aesthetics of rich text - Markdown! I don't think I'll support Markdown formatting in nomad hypertext, but for my static site generator Yurt, I will try to do that in the future. The utility would mostly be from having usable links.","parent":"posts/Plaintext is your best friend.txt","score":0.820216141628212},{"content":"Nomad Hypertext is a writing app built around semantic search.","parent":"posts/What is Nomad Hypertext.txt","score":0.8191180421639299}],"Electron really, really, really sucks. For starters, you have to use CommonJS. That itself would be bad enough, but there are a huge pile of other inconveniences that Electron dumps on you: Using window.prompt() doesn't work (because it blocks the main thread apparently) and it generates HUGE executables without making the slightest effort to tree-shake anything (it was literally bundling in sample text files I was using in the repo). Creating my own window.prompt() alternative was an interesting exercise, but I wish I wasn't forced into doing it.":[{"content":"Electron really, really, really sucks. For starters, you have to use CommonJS. That itself would be bad enough, but there are a huge pile of other inconveniences that Electron dumps on you: Using window.prompt() doesn't work (because it blocks the main thread apparently) and it generates HUGE executables without making the slightest effort to tree-shake anything (it was literally bundling in sample text files I was using in the repo). Creating my own window.prompt() alternative was an interesting exercise, but I wish I wasn't forced into doing it.","parent":"posts/The making of Nomad Hypertext.txt","score":0.9999999999999998},{"content":"To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri.","parent":"posts/The making of Nomad Hypertext.txt","score":0.869926390278184},{"content":"In any case I wanted to try something new because that's what Recurse is all about, so I tried making a project with just JS and JSDoc for some semblance of type safety.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8458137611335913},{"content":"I read Rich Harris' twitter thread on how Javascript with JSDoc is actually pretty good, and decided to give it a shot. To be clear, I'm not blaming Rich Harris for my choice - he qualified his point, saying JS with JSDoc is preferable to Typescript for library development, because not having an intermediate build step makes it easier to reproduce bugs in a REPL. He still recommends using Typescript for projects (I think), so I was acting against his advice here.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8452508737741177},{"content":"The results were... mixed. I did get to move faster at the start, but started running into more and more type-related bugs as development went on. If I were to do this project again, I'd stick to Typescript.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8417125149119119},{"content":"I opted to use Javascript instead of Typescript out of mix of curiosity and laziness. Like most people, I was introduced to Javascript before I was introduced to Typescript. Like most people, I suffered through many null errors and was relieved when I discovered that the Typescript compiler could save me from many of them. Like most people, though I am grateful for Typescript, I find it occasionally cumbersome.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8412620513479563},{"content":"None of it worked. Why? It's not that these tools don't work in general - plenty of people swear by them. The problem was either with the tools, or with me. Technology exists for the utility of the user, not the other way around, so I rejected the latter answer.","parent":"posts/Why I made exegesis.txt","score":0.8362453258126036},{"content":"Working on exegesis was a grueling affair at times. I rewrote the schema multiple times, rewrote the backend from scratch 2 months before release, chased countless UI bugs, and manually patched abandoned NPM packages. Part of it may have been due to my inexperience, but [working with ](https://nichwch.medium.com/making-yana-e3fade3f56e7)[rich text](https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480) is just a [difficult task](https://twitter.com/thesephist/status/1360298464349999108), period. At one point, I considered giving up after finding a rival writing app I thought I simply couldn't compete with - I have a copy of an unfinished essay I started writing on why I had given up tucked away somewhere.","parent":"posts/Prometheus.txt","score":0.834783388184337},{"content":"Why not Tauri? With Tauri you have to write your backend routes in Rust. Surprisingly, I could not find any in-memory vector databases in Rust. I also have never written Rust in my life, though I would have been happy to pick it up to avoid using Electron. More importantly, I don't think there was a library that would have let me run Hugging Face's text embedding model in Rust. For these reasons, I had to use JS for my backend, which meant I had to use Electron.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8330523094327501},{"content":"You might object: Just because the vector DB and text embedding model are tied to JS doesn't mean your whole application does! You'd be right. I could have rolled the vector DB and text embedding model into a separate executable, compiling a node wrapper around those libraries into their own executables, then calling those executables from my Tauri app with IPC.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8321207834807103},{"content":"I've been working on notetaking apps for years now. I starting working on the first one on the bus back from my internship. I had an idea for a simple interaction - users should be able to highlight a piece of text, then add tags to that text. I distinctly remember thinking to myself, \"That should be a piece of cake! I should be able to finish it during the 45 minute bus  ride.\"\n\n\nIt ended up taking the rest of the summer. I was 19, naive, and had no idea what a nightmare the contenteditable HTML standard was.","parent":"posts/Plaintext is your best friend.txt","score":0.8279215141949121},{"content":"I want to clarify that I'm not bullish at all on no-code. I think \"no-code\" and \"low-code\" are the wrong way to frame things. There is a place for tools like this, but it's more productive to think of them as \"visual developer tools.\"[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8272762190381103},{"content":"Front end development should be way more visual. A great deal of front-end development pain points cannot be fixed with fancier libraries and languages, because the fundamental mismatch is trying to create something visual with a text-based tool.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8251000204544287},{"content":"[[ideas]]: A tool that analyzes a react project and shows your component structure for you in a nice and visual way. Probably already exists, idk","parent":"posts/untitled-9-20-2021.txt","score":0.8246616064317839},{"content":"For example, I'm starting to suspect that no styling library is going to provide a good experience, because the fundamental pain point is trying to express a visual idea with a text-based set of rules. A styling library can provide some affordances that make things easier - easy theming, dark mode, conditional styles, etc. etc - but the fundamental painful experience of trying to express a visual idea in code cannot be ameliorated with better code tools.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.822047904476671},{"content":"Learning Javascript, I never took notes, because all the reference docs were online anyways. Besides, the difficult part of programming isn't remembering APIs, it's the process of taking an idea and building it out, and there's no way to get better at that except by building. There's a reason most university CS courses don't test memorization heavily and instead focus on having students build projects. I suspect this is true for a lot of subjects.","parent":"posts/On tools for thought: knowledge management vs creativity.txt","score":0.8209951068667363},{"content":"The counter argument here is that people don't want to use files, and they don't want to manage their own systems. I don't think this is a forgone conclusion. Think about how much effort has been poured into making new technologies like touchscreens and AI legible to ordinary people.","parent":"posts/The AI-first operating system of the future.txt","score":0.8207567744781428},{"content":"I desperately want programming to feel like this.","parent":"posts/Fragments.txt","score":0.8190470138228072},{"content":"[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]]","parent":"posts/untitled-9-20-2021.txt","score":0.818608615400155},{"content":"I want to learn more code. Working on [[exegesis]] over the course of a year, I saw my coding ability improve substantially. Towards the last 2 months, while rewriting a part of the codebase, I found myself dumbfounded by some of the decisions and patterns I had used a year earlier. The code I wrote towards the end was noticeably cleaner and more maintainable, mostly because I had familiarized myself with [[React]] hooks. Learning NextJS and GraphQL was also very rewarding, and both technologies were used extensively in the final version of exegesis. Looking forwards, I am thinking about learning Go, Clojure and maybe Rust. Go is the most practical one of all these for my purposes, and could open up a lot of job offers. Clojure is the most interesting from a theoretical standpoint, since I've never used a lisp or functional language. Rust is interesting because I hate systems/low-level programming, but I suspect that might only be because I hate C, and maybe Rust's more modern features will sell me on it.","parent":"posts/Reflections for the New Year.txt","score":0.8182456173695191}],"// MISTAKE 3: NOT BEING UNIX-PILLED ENOUGH":[{"content":"// MISTAKE 3: NOT BEING UNIX-PILLED ENOUGH","parent":"posts/The making of Nomad Hypertext.txt","score":1.0000000000000002},{"content":"// MISTAKE 2: ELECTRON","parent":"posts/The making of Nomad Hypertext.txt","score":0.8859775973130889},{"content":"// MISTAKE 1: JAVASCRIPT INSTEAD OF TYPESCRIPT","parent":"posts/The making of Nomad Hypertext.txt","score":0.8722778892479812},{"content":"// FREE AND OPEN SOURCE","parent":"posts/What is Nomad Hypertext.txt","score":0.8560959094780675},{"content":"// Edit: 1/6/2021","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8437867817452491},{"content":"// Read this, liked it a lot.","parent":"posts/untitled-9-22-2021.txt","score":0.8437021599738481},{"content":"// Namespaces","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8434722726521844},{"content":"// HOW TO USE NOMAD HYPERTEXT","parent":"posts/What is Nomad Hypertext.txt","score":0.8362551905203593},{"content":"// 1. SECTION TITLE","parent":"posts/Plaintext is your best friend.txt","score":0.8329877639986104},{"content":"// ABOUT THE NAME","parent":"posts/What is Nomad Hypertext.txt","score":0.8316653050824783},{"content":"// Like this! This line will not show up in the index.","parent":"posts/What is Nomad Hypertext.txt","score":0.8307794205048777},{"content":"// Context","parent":"posts/Context and community makes music more enjoyable, and it's missing from modern streaming services.txt","score":0.8277104031713757},{"content":"// Key Features","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8268009923507204},{"content":"// Technology that controls you","parent":"posts/Giant Robots.txt","score":0.8243926464745764},{"content":"// SEMANTIC SEARCH IS ALL YOU NEED","parent":"posts/What is Nomad Hypertext.txt","score":0.822794995570417},{"content":"// Technology that you control","parent":"posts/Giant Robots.txt","score":0.8225283739244968},{"content":"// Postscript","parent":"posts/On tools for thought: knowledge management vs creativity.txt","score":0.8175352867264489},{"content":"// [https://ava.substack.com/p/one-small-thing?token=eyJ1c2VyX2lkIjoxMDUwNzA4NywicG9zdF9pZCI6NDA3ODUwNjgsIl8iOiI4R2RYTiIsImlhdCI6MTYzMjM1NzQxNiwiZXhwIjoxNjMyMzYxMDE2LCJpc3MiOiJwdWItMjM0MTciLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.lHl23vruozg5jSB6kISO4zswiVGojLBM2UkPLlrmx_Q](https://ava.substack.com/p/one-small-thing?token=eyJ1c2VyX2lkIjoxMDUwNzA4NywicG9zdF9pZCI6NDA3ODUwNjgsIl8iOiI4R2RYTiIsImlhdCI6MTYzMjM1NzQxNiwiZXhwIjoxNjMyMzYxMDE2LCJpc3MiOiJwdWItMjM0MTciLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.lHl23vruozg5jSB6kISO4zswiVGojLBM2UkPLlrmx_Q)","parent":"posts/untitled-9-22-2021.txt","score":0.8168214623647735},{"content":"//\t\t\t|___Music Theory","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8151031988603202},{"content":"//\t\t\t|\t\t|___Songs to Practice","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8140417677378449}],"You might object: Just because the vector DB and text embedding model are tied to JS doesn't mean your whole application does! You'd be right. I could have rolled the vector DB and text embedding model into a separate executable, compiling a node wrapper around those libraries into their own executables, then calling those executables from my Tauri app with IPC.":[{"content":"You might object: Just because the vector DB and text embedding model are tied to JS doesn't mean your whole application does! You'd be right. I could have rolled the vector DB and text embedding model into a separate executable, compiling a node wrapper around those libraries into their own executables, then calling those executables from my Tauri app with IPC.","parent":"posts/The making of Nomad Hypertext.txt","score":1.0000000000000002},{"content":"Why not Tauri? With Tauri you have to write your backend routes in Rust. Surprisingly, I could not find any in-memory vector databases in Rust. I also have never written Rust in my life, though I would have been happy to pick it up to avoid using Electron. More importantly, I don't think there was a library that would have let me run Hugging Face's text embedding model in Rust. For these reasons, I had to use JS for my backend, which meant I had to use Electron.","parent":"posts/The making of Nomad Hypertext.txt","score":0.9157126219636793},{"content":"In any case I wanted to try something new because that's what Recurse is all about, so I tried making a project with just JS and JSDoc for some semblance of type safety.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8775182074222531},{"content":"I read Rich Harris' twitter thread on how Javascript with JSDoc is actually pretty good, and decided to give it a shot. To be clear, I'm not blaming Rich Harris for my choice - he qualified his point, saying JS with JSDoc is preferable to Typescript for library development, because not having an intermediate build step makes it easier to reproduce bugs in a REPL. He still recommends using Typescript for projects (I think), so I was acting against his advice here.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8618081129033529},{"content":"To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri.","parent":"posts/The making of Nomad Hypertext.txt","score":0.859340092454445},{"content":"The vision is to have a tool that provides a visual interface for creating layouts, and maybe even rigging up basic stateful logic, or data fetching logic. I've more or less nailed down a preferred personal stack for creating projects with React, Express and Postgres, so it shouldn't be terribly difficult to even integrate database logic/fetching logic into such a tool (so long as some flexibility is lost on technology choice).[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.840959028563714},{"content":"The results were... mixed. I did get to move faster at the start, but started running into more and more type-related bugs as development went on. If I were to do this project again, I'd stick to Typescript.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8399667954544817},{"content":"I opted to use Javascript instead of Typescript out of mix of curiosity and laziness. Like most people, I was introduced to Javascript before I was introduced to Typescript. Like most people, I suffered through many null errors and was relieved when I discovered that the Typescript compiler could save me from many of them. Like most people, though I am grateful for Typescript, I find it occasionally cumbersome.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8387495087765879},{"content":"At build time, it embeds all your posts into vectors and puts them into a vector database. Then, for each paragraph in a post, it queries the vector database for the 20 most similar paragraphs from all your notes. It stores these in a precomputed index. It then statically generates a blog for you (like Gatsby or any other static site generator), and uses this index so users can see related ideas when they click on a paragraph.","parent":"posts/What is Yurt.txt","score":0.8376197839777222},{"content":"Front end development should be way more visual. A great deal of front-end development pain points cannot be fixed with fancier libraries and languages, because the fundamental mismatch is trying to create something visual with a text-based tool.[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8344359004166197},{"content":"Electron really, really, really sucks. For starters, you have to use CommonJS. That itself would be bad enough, but there are a huge pile of other inconveniences that Electron dumps on you: Using window.prompt() doesn't work (because it blocks the main thread apparently) and it generates HUGE executables without making the slightest effort to tree-shake anything (it was literally bundling in sample text files I was using in the repo). Creating my own window.prompt() alternative was an interesting exercise, but I wish I wasn't forced into doing it.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8321207834807103},{"content":"It does this by dividing your notes up into paragraph-sized blocks and indexing them into a vector database with an AI embedding model.","parent":"posts/What is Nomad Hypertext.txt","score":0.8277770159272286},{"content":"However, when building Yurt, the static site builder for nomad hypertext, I found myself repeating a lot of logic. I found myself wanting to add features to the indexing engine, like being able to use cloud providers instead of local models (because doing all this processing locally can take ages!). In the future, I might want to use multimodal models, so I can see similarity between images, text, and audio. \n\nFactoring out the semantic search element of my app would have been the correct, unix-ey thing to do, and it would allow me to make these extensions in the future. I plan on doing this soon.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8241660033194451},{"content":"[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]]","parent":"posts/untitled-9-20-2021.txt","score":0.8220396262845099},{"content":"I avoided this IPC-executable approach because I thought it'd be really complicated. To some extent, this was the correct decision - I'm glad I got a MVP of my project out during my time at Recurse.","parent":"posts/The making of Nomad Hypertext.txt","score":0.82055024674282},{"content":"I want to clarify that I'm not bullish at all on no-code. I think \"no-code\" and \"low-code\" are the wrong way to frame things. There is a place for tools like this, but it's more productive to think of them as \"visual developer tools.\"[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8202781846508114},{"content":"Visual developer tools","parent":"posts/untitled-9-24-2021.txt","score":0.8173759368682367},{"content":"I want to learn more code. Working on [[exegesis]] over the course of a year, I saw my coding ability improve substantially. Towards the last 2 months, while rewriting a part of the codebase, I found myself dumbfounded by some of the decisions and patterns I had used a year earlier. The code I wrote towards the end was noticeably cleaner and more maintainable, mostly because I had familiarized myself with [[React]] hooks. Learning NextJS and GraphQL was also very rewarding, and both technologies were used extensively in the final version of exegesis. Looking forwards, I am thinking about learning Go, Clojure and maybe Rust. Go is the most practical one of all these for my purposes, and could open up a lot of job offers. Clojure is the most interesting from a theoretical standpoint, since I've never used a lisp or functional language. Rust is interesting because I hate systems/low-level programming, but I suspect that might only be because I hate C, and maybe Rust's more modern features will sell me on it.","parent":"posts/Reflections for the New Year.txt","score":0.8134100494290956},{"content":"Nomad Hypertext is a writing app built around semantic search.","parent":"posts/What is Nomad Hypertext.txt","score":0.8119078311787972},{"content":"1. The current wave of backlink-focused apps have a compelling response to this objection, which is that they're not focused on just copying information, they're focused on capturing the connections between ideas. Fair enough. But why require the end user to manually copy information down? It seems that this could be done more effectively through an annotation layer.","parent":"posts/On tools for thought: knowledge management vs creativity.txt","score":0.8116239053855738}],"// MISTAKE 2: ELECTRON":[{"content":"// MISTAKE 2: ELECTRON","parent":"posts/The making of Nomad Hypertext.txt","score":1},{"content":"// MISTAKE 1: JAVASCRIPT INSTEAD OF TYPESCRIPT","parent":"posts/The making of Nomad Hypertext.txt","score":0.8888806252527257},{"content":"// MISTAKE 3: NOT BEING UNIX-PILLED ENOUGH","parent":"posts/The making of Nomad Hypertext.txt","score":0.8859775973130889},{"content":"// Edit: 1/6/2021","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8276973651266246},{"content":"// Technology that you control","parent":"posts/Giant Robots.txt","score":0.8274827186830237},{"content":"// Technology that controls you","parent":"posts/Giant Robots.txt","score":0.8262673529270672},{"content":"// Read this, liked it a lot.","parent":"posts/untitled-9-22-2021.txt","score":0.8258854065948841},{"content":"// 1. SECTION TITLE","parent":"posts/Plaintext is your best friend.txt","score":0.8243998469116918},{"content":"// FREE AND OPEN SOURCE","parent":"posts/What is Nomad Hypertext.txt","score":0.8241104200341773},{"content":"//\t\t\t|___Music Theory","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8238103838045899},{"content":"// Context","parent":"posts/Context and community makes music more enjoyable, and it's missing from modern streaming services.txt","score":0.8230764236164665},{"content":"// Namespaces","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8167605907619993},{"content":"// SEMANTIC SEARCH IS ALL YOU NEED","parent":"posts/What is Nomad Hypertext.txt","score":0.8139593532133714},{"content":"// ABOUT THE NAME","parent":"posts/What is Nomad Hypertext.txt","score":0.8124862649483557},{"content":"// HOW TO USE NOMAD HYPERTEXT","parent":"posts/What is Nomad Hypertext.txt","score":0.8104209540970866},{"content":"// Bio pages","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.809675625897663},{"content":"// Key Features","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8093582317908438},{"content":"// Like this! This line will not show up in the index.","parent":"posts/What is Nomad Hypertext.txt","score":0.80571213671965},{"content":"// Community","parent":"posts/Context and community makes music more enjoyable, and it's missing from modern streaming services.txt","score":0.8052067098735944},{"content":"//\t\t\t|___Practice Routine","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8048464046063697}],"I avoided this IPC-executable approach because I thought it'd be really complicated. To some extent, this was the correct decision - I'm glad I got a MVP of my project out during my time at Recurse. ":[{"content":"I avoided this IPC-executable approach because I thought it'd be really complicated. To some extent, this was the correct decision - I'm glad I got a MVP of my project out during my time at Recurse.","parent":"posts/The making of Nomad Hypertext.txt","score":1},{"content":"Some thoughts on my Operating Systems course.","parent":"posts/untitled-10-11-2021.txt","score":0.8593913823538039},{"content":"I want to learn more code. Working on [[exegesis]] over the course of a year, I saw my coding ability improve substantially. Towards the last 2 months, while rewriting a part of the codebase, I found myself dumbfounded by some of the decisions and patterns I had used a year earlier. The code I wrote towards the end was noticeably cleaner and more maintainable, mostly because I had familiarized myself with [[React]] hooks. Learning NextJS and GraphQL was also very rewarding, and both technologies were used extensively in the final version of exegesis. Looking forwards, I am thinking about learning Go, Clojure and maybe Rust. Go is the most practical one of all these for my purposes, and could open up a lot of job offers. Clojure is the most interesting from a theoretical standpoint, since I've never used a lisp or functional language. Rust is interesting because I hate systems/low-level programming, but I suspect that might only be because I hate C, and maybe Rust's more modern features will sell me on it.","parent":"posts/Reflections for the New Year.txt","score":0.8505137613699641},{"content":"To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8489872708484153},{"content":"Working on a refactor for [[exegesis]] and [[synesthesia]], thinking about how to budget time. Working strategy is to take estimate for each feature, and double the time for each to account for stupid roadblocks (wifi not working, interrupted by something, bad documentation, etc. etc.) [[code]] [[devlog]]","parent":"posts/untitled-9-21-2021.txt","score":0.8442390462601336},{"content":"This was reassuring, because it meant I had made something genuinely useful. In the past, I have made things I simply had no desire to use - one example is [JAFT](https://nichwch.medium.com/what-is-jaft-f543a4fad9d7), a time tracking app I made after making YANA (the predecessor to exegesis). I stopped using it after a bit, and didn't bother renewing the domain. I don't miss JAFT at all. The fact that I did miss exegesis on the days where it wasn't operational was a good sign.","parent":"posts/Second Brains.txt","score":0.8438245863771019},{"content":"Working on exegesis was a grueling affair at times. I rewrote the schema multiple times, rewrote the backend from scratch 2 months before release, chased countless UI bugs, and manually patched abandoned NPM packages. Part of it may have been due to my inexperience, but [working with ](https://nichwch.medium.com/making-yana-e3fade3f56e7)[rich text](https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480) is just a [difficult task](https://twitter.com/thesephist/status/1360298464349999108), period. At one point, I considered giving up after finding a rival writing app I thought I simply couldn't compete with - I have a copy of an unfinished essay I started writing on why I had given up tucked away somewhere.","parent":"posts/Prometheus.txt","score":0.8426705947299056},{"content":"Why did it take so long? Part of it is just a lack of experience. While making exegesis, I changed the database schema countless times, wrote dozens of migrations, accidentally wiped my database once (thank God for RDS backups), and rewrote the backend from scratch 2 months before release. There was also a good amount of feature creep. Whenever I thought I was close to finished, something unexpected would pop up - I started writing this essay 3 months before I actually released exegesis. Whatever the reason, if you count development time on the predecessor to exegesis, I've spent almost a tenth of my life building this. The entire project clocks in at a couple thousand lines of code. It is the largest, most complex, and most difficult thing I have built so far in my life.  [The last time I worked on a project this long, it was the first video game I made back in my senior year of high school.](https://medium.com/@nichwch/machine-gods-devlog-1-166dff474366) Even then, it was really about 6 months of development total, with a huge gap in between because of school, and it was all made with no-code game development tools, because back then the idea of using actual code terrified me. [[exegesis]] [[personal-reflection]]","parent":"posts/Reflections on exegesis.txt","score":0.8426629117085003},{"content":"In any case I wanted to try something new because that's what Recurse is all about, so I tried making a project with just JS and JSDoc for some semblance of type safety.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8407768797276166},{"content":"That last project had a significant effect on me. Back in high school, I was heavily involved in Model UN and other political clubs. Making the [game](https://nichwch.itch.io/machinegods) made me realize it was making things and not winning arguments that really made me happier. It was also what convinced me that programming could be something more than rote problem solving, and even be a genuine creative medium. It was why I switched my major from Economics to Computer Science in college.[[personal-reflection]]","parent":"posts/Reflections on exegesis.txt","score":0.8394749698133306},{"content":"I want to clarify that I'm not bullish at all on no-code. I think \"no-code\" and \"low-code\" are the wrong way to frame things. There is a place for tools like this, but it's more productive to think of them as \"visual developer tools.\"[[code]] [[ideas]] [[tools for thought]]","parent":"posts/untitled-9-24-2021.txt","score":0.8388660816835133},{"content":"I read Rich Harris' twitter thread on how Javascript with JSDoc is actually pretty good, and decided to give it a shot. To be clear, I'm not blaming Rich Harris for my choice - he qualified his point, saying JS with JSDoc is preferable to Typescript for library development, because not having an intermediate build step makes it easier to reproduce bugs in a REPL. He still recommends using Typescript for projects (I think), so I was acting against his advice here.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8364206164473147},{"content":"I opted to use Javascript instead of Typescript out of mix of curiosity and laziness. Like most people, I was introduced to Javascript before I was introduced to Typescript. Like most people, I suffered through many null errors and was relieved when I discovered that the Typescript compiler could save me from many of them. Like most people, though I am grateful for Typescript, I find it occasionally cumbersome.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8349325634245024},{"content":"I spend an inordinate amount of time on Youtube. Having noticed this one morning, I quietly told myself that I wouldn't check Youtube for the rest of the work session - only to find that I would unconsciously press \"Y+enter\" and let the address bar's autocomplete lead me to Youtube. I would find myself on the site, not remembering how I had gotten there. More importantly, the home page recommendations had learned my preferences incredibly well. As soon as I landed on Youtube, there would be at least one video there ready for me to watch. That morning, I got nothing done. Youtube's algorithm had figured out that I really liked watching short clips of Mad Men and provided me a steady drip-feed of them, which I gorged on instead of getting anything done.","parent":"posts/Controlling what you see.txt","score":0.833151708144729},{"content":"The main focus here is personal projects - learning more code and writing more are auxiliary activities that help this end. First among these personal projects is [[exegesis]], but I have a number of other personal projects that I want to work on as well.","parent":"posts/Goals for Spring Quarter.txt","score":0.8327013322768922},{"content":"Also encouraging was the fact that I started hearing about similar notetaking apps a couple months into developing exegesis. Apps like Roam Research, and Obsidian were making waves on Twitter, and were taking a similar approach to nonlinear writing that I wanted to take exegesis in. This proved that I wasn't alone in needing this kind of product.","parent":"posts/Second Brains.txt","score":0.8312641561938895},{"content":"It is this property that allows programmers to cheat the Gods, and achieve divine levels of creative output thought forbidden to mortals. A programmer can create abstractions than enable them to create in days what previously took months. I myself rewrote a good part of exegesis 2 months before I released it, and the new abstractions I picked enabled me to redo in those 2 months what took me almost a year at first. Moreover, programmers can share their abstractions, and borrow the inventions of others as well.","parent":"posts/Prometheus.txt","score":0.8300715816310617},{"content":"This morning I was listening to a podcast suggested by [[Linus Lee]] - Changelog. I don't usually listen to podcasts, but I have had good experiences with audiobooks in the past. It was nice being able to absorb information over breakfast without staring at a screen. The subject material was interesting; it was some CMU professor doing research on individual programmers and the myth of the \"10x developer.\"","parent":"posts/untitled-9-20-2021.txt","score":0.8299596220993631},{"content":"Priority 1: Code-related creative work (continue work on exegesis, other personal projects, learn more code, write more)","parent":"posts/Goals for Spring Quarter.txt","score":0.8290268710490699},{"content":"The results were... mixed. I did get to move faster at the start, but started running into more and more type-related bugs as development went on. If I were to do this project again, I'd stick to Typescript.","parent":"posts/The making of Nomad Hypertext.txt","score":0.828955538538594}],"However, when building Yurt, the static site builder for nomad hypertext, I found myself repeating a lot of logic. I found myself wanting to add features to the indexing engine, like being able to use cloud providers instead of local models (because doing all this processing locally can take ages!). In the future, I might want to use multimodal models, so I can see similarity between images, text, and audio. \n\nFactoring out the semantic search element of my app would have been the correct, unix-ey thing to do, and it would allow me to make these extensions in the future. I plan on doing this soon.  ":[{"content":"However, when building Yurt, the static site builder for nomad hypertext, I found myself repeating a lot of logic. I found myself wanting to add features to the indexing engine, like being able to use cloud providers instead of local models (because doing all this processing locally can take ages!). In the future, I might want to use multimodal models, so I can see similarity between images, text, and audio. \n\nFactoring out the semantic search element of my app would have been the correct, unix-ey thing to do, and it would allow me to make these extensions in the future. I plan on doing this soon.","parent":"posts/The making of Nomad Hypertext.txt","score":1},{"content":"Nomad Hypertext is a writing app built around semantic search.","parent":"posts/What is Nomad Hypertext.txt","score":0.9097940323598066},{"content":"Yurt is a static site generator, built off the same principles as Nomad Hypertext.","parent":"posts/What is Yurt.txt","score":0.9038866326526283},{"content":"I'll end with a haiku. \n\nNomad Hypertext\nPowered by semantic search\nGives inspiration","parent":"posts/What is Nomad Hypertext.txt","score":0.8983631716561449},{"content":"I was greatly inspired by two blogposts. The first, [Hyperlink Maximalism](https://thesephist.com/posts/hyperlink/) by Linus Lee talks about generating hyperlinks automatically between documents, and comes with a [demo](https://notation.app) that made a deep impression on me. To be honest, nomad hypertext is just Linus' demo using semantic search instead of full text search.","parent":"posts/What is Nomad Hypertext.txt","score":0.897222302727622},{"content":"There are pros and cons to this approach. The biggest pro is that it generates a static blog. There's no backend to maintain, and it's quite lightweight and loads fast, while also providing the benefit of semantic hyperlinks. The con is that since the index is precomputed, you can't search for arbitrary things like you can in nomad hypertext.","parent":"posts/What is Yurt.txt","score":0.8908018391370122},{"content":"One last thing: There is a solution that combines the flexibility of plaintext with the aesthetics of rich text - Markdown! I don't think I'll support Markdown formatting in nomad hypertext, but for my static site generator Yurt, I will try to do that in the future. The utility would mostly be from having usable links.","parent":"posts/Plaintext is your best friend.txt","score":0.8889775156533777},{"content":"To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri.","parent":"posts/The making of Nomad Hypertext.txt","score":0.872952068480043},{"content":"The basic idea here is that semantic search functions better than backlinking, tags, or folders at helping you see connections between your ideas. It is also much simpler to implement. With backlinks and tags, you often need specialized file types, but semantic search works on top of plain text.","parent":"posts/What is Nomad Hypertext.txt","score":0.8719613995388409},{"content":"You're viewing this on a statically generated blog using Yurt!","parent":"posts/What is Yurt.txt","score":0.8646037703994298},{"content":"The second would be [All you need is links](https://subconscious.substack.com/p/all-you-need-is-links) by Gordon Brander. He puts forth the case that you can implement pretty much any feature you might want a tool for thought to have, using only hyperlinks. I found the idea that you could create a myriad of functionality with just one powerful feature extremely fascinating. \n\nWhat he says about links, I believe to be true about semantic search.","parent":"posts/What is Nomad Hypertext.txt","score":0.8639621530792511},{"content":"There are lots of tools for thought out there with names inspired by great empires or their capitals: Roam (Rome) Research, Athens Research, Vienna Hypertext, etc. etc. I like all of these apps and have taken inspiration from them.\n\nBut isn't it strange that they have such imperial names? Tools for thought aren't about hierarchy and order, they're about freeing your thoughts to mingle with each other. It's less about ordering your thoughts into a hierarchical empire, and more about letting them wander freely, so that they might bear fruit. \n\nThat's why I picked the name nomad hypertext.","parent":"posts/What is Nomad Hypertext.txt","score":0.8590567587884681},{"content":"Edit: I have added very basic support for Markdown to Yurt - right now pretty much only links work.","parent":"posts/Plaintext is your best friend.txt","score":0.8535269069014153},{"content":"I think eventually, I might want to deploy a blog with a full fledged backend, so users can query anything they'd like to my blog.","parent":"posts/What is Yurt.txt","score":0.8474195362120055},{"content":"At build time, it embeds all your posts into vectors and puts them into a vector database. Then, for each paragraph in a post, it queries the vector database for the 20 most similar paragraphs from all your notes. It stores these in a precomputed index. It then statically generates a blog for you (like Gatsby or any other static site generator), and uses this index so users can see related ideas when they click on a paragraph.","parent":"posts/What is Yurt.txt","score":0.8433884987876732},{"content":"The bottom line is with a notetaking app, what I'm really looking for is the ability to see connections between my ideas. I don't care about pretty formatting. Plain text is uglier, but it increases the range of things you can do with your notes - you can pipe it into an LLM, you can pipe it into a summarizer, you can take notes on Apple Notes then paste them into your notes later, you can set up a service that lets you text a number that will then paste your texts into your notes, etc. etc.","parent":"posts/Plaintext is your best friend.txt","score":0.8386012763489294},{"content":"The future of rational tools for thought and PKMs probably look a lot less like [[roam]], and [more like projects that use AI to automatically link subjects for you](https://thesephist.com/posts/browser/). 2","parent":"posts/On tools for thought: knowledge management vs creativity.txt","score":0.8382349055927956},{"content":"It does this by dividing your notes up into paragraph-sized blocks and indexing them into a vector database with an AI embedding model.","parent":"posts/What is Nomad Hypertext.txt","score":0.8372264006195737},{"content":"Why not Tauri? With Tauri you have to write your backend routes in Rust. Surprisingly, I could not find any in-memory vector databases in Rust. I also have never written Rust in my life, though I would have been happy to pick it up to avoid using Electron. More importantly, I don't think there was a library that would have let me run Hugging Face's text embedding model in Rust. For these reasons, I had to use JS for my backend, which meant I had to use Electron.","parent":"posts/The making of Nomad Hypertext.txt","score":0.8353475022540945},{"content":"// HOW TO USE NOMAD HYPERTEXT","parent":"posts/What is Nomad Hypertext.txt","score":0.8337563230601178}],"  ":[{"content":"Building tools","parent":"posts/untitled-9-20-2021.txt","score":0.8593290080388},{"content":"The club does 2 things.","parent":"posts/untitled-9-24-2021.txt","score":0.8589669169415844},{"content":"Induction","parent":"posts/untitled-9-22-2021.txt","score":0.8577220980911441},{"content":"Code:","parent":"posts/Goals for Spring Quarter.txt","score":0.856649564390397},{"content":"Executing","parent":"posts/Goals for Spring Quarter.txt","score":0.8556654491388678},{"content":"Priority 1: Code-related creative work (continue work on exegesis, other personal projects, learn more code, write more)","parent":"posts/Goals for Spring Quarter.txt","score":0.8537043599402795},{"content":"Next to every paragraph, there is a button that will show you other related paragraphs from your other notes.","parent":"posts/What is Nomad Hypertext.txt","score":0.8514450468005932},{"content":"we live in a society","parent":"posts/untitled-9-30-2021.txt","score":0.8499151373626692},{"content":"Priority 2: Activities that are a break from code-related creative work (piano, guitar, fiction/nonfiction reading, drawing, fitness)","parent":"posts/Goals for Spring Quarter.txt","score":0.8497861585687644},{"content":"Learn a grappling art (because of quarantine, this will just be maintaining general fitness levels for now)","parent":"posts/Goals for Spring Quarter.txt","score":0.8496945903933114},{"content":"For drawing, I'd like to practice drawing reference images in my own style 3 times a week, with a focus on drawing more three dimensionally, drawing people/poses, and using color.","parent":"posts/Goals for Spring Quarter.txt","score":0.8478182318510581},{"content":"Afternoon","parent":"posts/untitled-9-21-2021.txt","score":0.8472546071060495},{"content":"Hobbies:","parent":"posts/Goals for Spring Quarter.txt","score":0.8467379006001533},{"content":"This is for scenarios where you do want to write in an organized manner. For example, right now, this entire page is about","parent":"posts/Roadmap to exegesis' beta release.txt","score":0.8466474388580029},{"content":"Focus[[focus]] [[focus-machine]] [[ideas]]","parent":"posts/untitled-9-24-2021.txt","score":0.8456538970968254},{"content":"Higher-order creativity","parent":"posts/Prometheus.txt","score":0.8455300536527719},{"content":"Nomad Hypertext is a writing app built around semantic search.","parent":"posts/What is Nomad Hypertext.txt","score":0.8455138568311819},{"content":"I'm taking a gap quarter this Spring to work on some personal projects. It is always better to have a plan than to have no plan, even if things don't work out your way, so here are some tentative goals for my gap quarter.","parent":"posts/Goals for Spring Quarter.txt","score":0.8451682294721505},{"content":"Writing cascades","parent":"posts/untitled-10-1-2021.txt","score":0.8444322593169847},{"content":"Plaintext is your best friend.","parent":"posts/Plaintext is your best friend.txt","score":0.8437967333727141}]}