{"I've vacillated on this blog between the idea of working on small projects and working on large projects. I thought I'd try something of a hybrid approach - having a main project, and then working on spinoff projects when I need a break. I spent last week working on such a project.": [{"content": "I've vacillated on this blog between the idea of working on small projects and working on large projects. I thought I'd try something of a hybrid approach - having a main project, and then working on spinoff projects when I need a break. I spent last week working on such a project.", "parent": "Gridworld.txt", "score": 4.6780524642908716e-07}, {"content": "The good news is I've found a method of working on side projects that does work for me: working on one side project at a time, with the intention of getting real users. This is a way of working I previously tried explicitly to steer away from - I've written previously on my blog that I wanted to work on lots of small projects instead of obsessively on one big project. ", "parent": "An Update.txt", "score": 0.3152129650115967}, {"content": "The previous method of working I sketched out in this blog (working on small projects, writing about them in public) is not working for me. It was working for me for a while, mostly while I was building at the Recurse center, but it's not anymore, and it's because I just don't feel motivated to work on lots of small projects that no one uses. ", "parent": "An Update.txt", "score": 0.3336295485496521}, {"content": "Reflecting on how this went, I'm glad I branched out into another project, but I honestly don't really care about Gridworld all that much. It feels disconnected from everything else I made and I'm not super interested in following up more on it. I think the approach of working on one main project with breaks to work on smaller projects is a good one, but I want those smaller projects to be more related to my main project. I have lots of side project ideas related to tools for thought and music. I thought it'd be cool to do LLM research for its own sake, but I've realized I don't care all that much about the fundamental properties of LLMs - I care more about using them as a tool to build the things I already want to build. There are plenty of possibilities there, for example adding semantic search to Synesthesia to supplement the tagging system (which I honestly do not like at all). As I continue to build side projects in my spare time I want to keep this in mind.", "parent": "Gridworld.txt", "score": 0.3726163651358887}, {"content": "The idea is to just make a ton of side projects and put them all here. I have some preliminary ideas on how I can organize this but I'm not particularly set on anything right now. I don't feel particularly limited by framework choice either - with the liberal use of iFrames, I can simply embed other projects using different frameworks here. I've already done that with a project I've created with Svelte.", "parent": "Fragments.txt", "score": 0.44291961193084717}, {"content": "The main focus here is personal projects - learning more code and writing more are auxiliary activities that help this end. First among these personal projects is [[exegesis]], but I have a number of other personal projects that I want to work on as well. ", "parent": "Goals for Spring Quarter.txt", "score": 0.4474194049835205}, {"content": "I've found writing down tasks and decomposing them into smaller ones helps. Right now, I do this in [[exegesis]], which honestly feels somewhat suboptimal. I also have another side project called [https://focusmachine.app/](https://focusmachine.app/) to remind me of what I'm currently supposed to be focusing - it's really stupid, it just asks you what you want to work on and then spams you with a reminder to focus on that at user-inputted interval. [[focus]] [[focus-machine]] [[ideas]] [[exegesis]] ", "parent": "untitled-9-24-2021.txt", "score": 0.4503493905067444}, {"content": "Working on a refactor for [[exegesis]] and [[synesthesia]], thinking about how to budget time. Working strategy is to take estimate for each feature, and double the time for each to account for stupid roadblocks (wifi not working, interrupted by something, bad documentation, etc. etc.) [[code]] [[devlog]] ", "parent": "untitled-9-21-2021.txt", "score": 0.4737122058868408}, {"content": "I want to try a different approach this time. There will be no central organizing idea or principle. Playing the guitar taught me that my creative process works best when I'm free to noodle on the ideas that are immediately interesting to me, not ideas that are part of some preset plan. I have fond memories of sitting on the bus back from my first internship, cracking open my laptop, deciding to try and hack together a first version of YANA. I feel considerably less nostalgic for the late nights I spent during the pandemic trying to \"scale\" my idea, wrestling with pitch decks and AWS dashboards. I had lots of other ideas at the time, but didn't work on them because I felt focusing on exegesis was the correct thing to do. When I first started playing the guitar, I felt guilty learning other songs if I hadn't finished learning a past song. In reality, giving up on songs/concepts I wasn't interested in was incredibly good for my learning in the long run (provided I was still learning new things).", "parent": "Interface Work.txt", "score": 0.4843509793281555}, {"content": "For a while, I exclusively worked on a long, serious projects. I wanted to build a billion dollar product. I wanted to be the founder of a successful startup. I wanted to write, but I wanted to write on my own platform that everybody else would also write on, that would have all the features I wanted that everybody else would love.", "parent": "Fragments.txt", "score": 0.4899227023124695}], "": [{"content": "~", "parent": "NOW PAGE.txt", "score": 0.6013319492340088}, {"content": "~", "parent": "Fragments.txt", "score": 0.6013319492340088}, {"content": "~", "parent": "Fragments.txt", "score": 0.6013319492340088}, {"content": "~", "parent": "Plaintext is your best friend.txt", "score": 0.6013771295547485}, {"content": "~", "parent": "untitled-1-4-2022.txt", "score": 0.6013792157173157}, {"content": "~", "parent": "The making of Nomad Hypertext.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "The making of Nomad Hypertext.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "Second Brains.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "What is Nomad Hypertext.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "What is Nomad Hypertext.txt", "score": 0.6014099717140198}], "[Gridworld](https://gridworld.nicholaschen.io) is a turn-based, LLM-based, grid-based world simulator. ": [{"content": "[Gridworld](https://gridworld.nicholaschen.io) is a turn-based, LLM-based, grid-based world simulator. ", "parent": "Gridworld.txt", "score": 0.0}, {"content": "One fun thing about this project is it made me think a lot about grids. Grids are cool! You can use them in lots of unorthodox ways. I saw [Clavier36](https://clavier36.com/) while working on Gridworld and it made me wonder what a similar interface for composing prompts might look like.  ", "parent": "Gridworld.txt", "score": 0.45109066395272357}, {"content": "The core game loop looks like this: At the end of each turn, extract all agents from the board (by finding cells that contain text that has an agent). For each agent, plot what action to take, given the current board state and the agent's past history. Then, for the grid as a whole, consider any environmental affects that might happen (fire spreading, rivers flowing, etc). Finally, given all agent actions and environmental affects, decide the next state of the grid.", "parent": "Gridworld.txt", "score": 0.5510760930205061}, {"content": "Reflecting on how this went, I'm glad I branched out into another project, but I honestly don't really care about Gridworld all that much. It feels disconnected from everything else I made and I'm not super interested in following up more on it. I think the approach of working on one main project with breaks to work on smaller projects is a good one, but I want those smaller projects to be more related to my main project. I have lots of side project ideas related to tools for thought and music. I thought it'd be cool to do LLM research for its own sake, but I've realized I don't care all that much about the fundamental properties of LLMs - I care more about using them as a tool to build the things I already want to build. There are plenty of possibilities there, for example adding semantic search to Synesthesia to supplement the tagging system (which I honestly do not like at all). As I continue to build side projects in my spare time I want to keep this in mind.", "parent": "Gridworld.txt", "score": 0.5606955544530019}, {"content": "I was drawn to the idea of a simple world state - a simple two dimensional array of text. I figured it would be difficult for the LLM to simulate convincing theory of mind (e.g. agents can plot against other agents without the other agents knowing )with just a 2D grid, so I added additional state to simulate the memory and thought process of agents. In practice, this is all very simple as well - it's just an array of text, representing the agent's past thought processes.", "parent": "Gridworld.txt", "score": 0.5904418414099772}, {"content": "The core game state is just a grid of strings. You can denominate agents between angle brackets. Agents have their own internal thought processes and planning stage at the end of each turn. ", "parent": "Gridworld.txt", "score": 0.6052934056147022}, {"content": "In practice, I had to add quite a few \"proofreading\" steps and some bespoke logic to spot invalid game states - agents suddenly disappearing from the grid, agents suddenly jumping across the map, agents showing up twice because the world reconciliation step didn't erase the agent's previous position, etc.", "parent": "Gridworld.txt", "score": 0.6271182471436767}, {"content": "My motivation for working on this project was to explore the frame of LLMs as simulators. Could you use LLMs to simulate how multiple agents interact with each other in a given scenario?", "parent": "Gridworld.txt", "score": 0.6292367876951642}, {"content": "This site will be that infrastructure for me. It will be a place for me to play with ideas quickly.", "parent": "Fragments.txt", "score": 0.666196346282959}, {"content": "rhizome.world", "parent": "untitled-9-24-2021.txt", "score": 0.6720868349075317}], "The core game state is just a grid of strings. You can denominate agents between angle brackets. Agents have their own internal thought processes and planning stage at the end of each turn. ": [{"content": "The core game state is just a grid of strings. You can denominate agents between angle brackets. Agents have their own internal thought processes and planning stage at the end of each turn. ", "parent": "Gridworld.txt", "score": 4.7000302683120054e-07}, {"content": "The core game loop looks like this: At the end of each turn, extract all agents from the board (by finding cells that contain text that has an agent). For each agent, plot what action to take, given the current board state and the agent's past history. Then, for the grid as a whole, consider any environmental affects that might happen (fire spreading, rivers flowing, etc). Finally, given all agent actions and environmental affects, decide the next state of the grid.", "parent": "Gridworld.txt", "score": 0.285038113594009}, {"content": "I was drawn to the idea of a simple world state - a simple two dimensional array of text. I figured it would be difficult for the LLM to simulate convincing theory of mind (e.g. agents can plot against other agents without the other agents knowing )with just a 2D grid, so I added additional state to simulate the memory and thought process of agents. In practice, this is all very simple as well - it's just an array of text, representing the agent's past thought processes.", "parent": "Gridworld.txt", "score": 0.3033403108619771}, {"content": "In practice, I had to add quite a few \"proofreading\" steps and some bespoke logic to spot invalid game states - agents suddenly disappearing from the grid, agents suddenly jumping across the map, agents showing up twice because the world reconciliation step didn't erase the agent's previous position, etc.", "parent": "Gridworld.txt", "score": 0.4357089589181633}, {"content": "[Gridworld](https://gridworld.nicholaschen.io) is a turn-based, LLM-based, grid-based world simulator. ", "parent": "Gridworld.txt", "score": 0.6053252105265834}, {"content": "[People have researched this topic in the past.](https://arxiv.org/pdf/2304.03442) Usually, however, they've used fairly complicated world simulators and agent loops. Given vast improvements in model quality, is it possible to eschew this programmatic scaffolding in favor of something simpler? This seems to be a general trend with language models - as base models improve, the amount of programmatic \"scaffolding\" you need around them decreases. For example, as context windows have increased, RAG is used less often. You can skip the overhead of spinning up a vector database in favor of just stuffing all your context into the prompt.", "parent": "Gridworld.txt", "score": 0.6166962195198502}, {"content": "One fun thing about this project is it made me think a lot about grids. Grids are cool! You can use them in lots of unorthodox ways. I saw [Clavier36](https://clavier36.com/) while working on Gridworld and it made me wonder what a similar interface for composing prompts might look like.  ", "parent": "Gridworld.txt", "score": 0.6417904715678748}, {"content": "My motivation for working on this project was to explore the frame of LLMs as simulators. Could you use LLMs to simulate how multiple agents interact with each other in a given scenario?", "parent": "Gridworld.txt", "score": 0.64286663398331}, {"content": "Psychology, ethics, and game theory are diverse fields that all point towards blindness being situationally useful. All fields relate to human action, so maybe it's possible to generalize this on that level. ", "parent": "Strategic blindness.txt", "score": 0.6517689228057861}, {"content": "That makes the answer to the question, \"Can you get rid of scaffolding in favor of just relying on the base model?\" a resounding no. The models really struggle with maintaining object permanence. You need to model this programmatically - even if the context window is large enough to store a world model, the LLM itself hallucinates too often to maintain coherence over multiple turns.", "parent": "Gridworld.txt", "score": 0.6722658786511129}], "My motivation for working on this project was to explore the frame of LLMs as simulators. Could you use LLMs to simulate how multiple agents interact with each other in a given scenario?": [{"content": "My motivation for working on this project was to explore the frame of LLMs as simulators. Could you use LLMs to simulate how multiple agents interact with each other in a given scenario?", "parent": "Gridworld.txt", "score": 0.0}, {"content": "I was drawn to the idea of a simple world state - a simple two dimensional array of text. I figured it would be difficult for the LLM to simulate convincing theory of mind (e.g. agents can plot against other agents without the other agents knowing )with just a 2D grid, so I added additional state to simulate the memory and thought process of agents. In practice, this is all very simple as well - it's just an array of text, representing the agent's past thought processes.", "parent": "Gridworld.txt", "score": 0.45338508944250544}, {"content": "[People have researched this topic in the past.](https://arxiv.org/pdf/2304.03442) Usually, however, they've used fairly complicated world simulators and agent loops. Given vast improvements in model quality, is it possible to eschew this programmatic scaffolding in favor of something simpler? This seems to be a general trend with language models - as base models improve, the amount of programmatic \"scaffolding\" you need around them decreases. For example, as context windows have increased, RAG is used less often. You can skip the overhead of spinning up a vector database in favor of just stuffing all your context into the prompt.", "parent": "Gridworld.txt", "score": 0.5567196444868661}, {"content": "Reflecting on how this went, I'm glad I branched out into another project, but I honestly don't really care about Gridworld all that much. It feels disconnected from everything else I made and I'm not super interested in following up more on it. I think the approach of working on one main project with breaks to work on smaller projects is a good one, but I want those smaller projects to be more related to my main project. I have lots of side project ideas related to tools for thought and music. I thought it'd be cool to do LLM research for its own sake, but I've realized I don't care all that much about the fundamental properties of LLMs - I care more about using them as a tool to build the things I already want to build. There are plenty of possibilities there, for example adding semantic search to Synesthesia to supplement the tagging system (which I honestly do not like at all). As I continue to build side projects in my spare time I want to keep this in mind.", "parent": "Gridworld.txt", "score": 0.5704500542097131}, {"content": "In practice, I had to add quite a few \"proofreading\" steps and some bespoke logic to spot invalid game states - agents suddenly disappearing from the grid, agents suddenly jumping across the map, agents showing up twice because the world reconciliation step didn't erase the agent's previous position, etc.", "parent": "Gridworld.txt", "score": 0.591389953060119}, {"content": "That makes the answer to the question, \"Can you get rid of scaffolding in favor of just relying on the base model?\" a resounding no. The models really struggle with maintaining object permanence. You need to model this programmatically - even if the context window is large enough to store a world model, the LLM itself hallucinates too often to maintain coherence over multiple turns.", "parent": "Gridworld.txt", "score": 0.6074816064690001}, {"content": "[Gridworld](https://gridworld.nicholaschen.io) is a turn-based, LLM-based, grid-based world simulator. ", "parent": "Gridworld.txt", "score": 0.6292367876951642}, {"content": "I've had some spirited debates on this subject, most recently with [[Jared]] of [[hyperlink-academy]]. I personally believe this is possible, but I've also heard very good arguments otherwise. The synthesis in my head is currently this: the instructor/student relationship is not neccessary, but a social learning environment is. To improve at something, we need to be around people better than ourselves, and a certain level of humility is required to learn from those better than ourselves. An instructor/student relationship is an institutionalized way to approximate this; how effective it is depends on the quality of the institution. I don't think it's the only way to achieve this however, and there are interesting experiments in cohort-based learning that could illustrate other ways to provide a social learning environment.[[meta-acropolis]] [[ideas]] [[Jared]] [[hyperlink-academy]] ", "parent": "untitled-9-21-2021.txt", "score": 0.6293033361434937}, {"content": "My dream is to enable something I term \"generational computing.\" I want my kids and my grandkids to someday be able to interface with the artifacts of my digital life. I want them to be able to read my notes and ask an LLM about what I've learned over my life. I want them to be able to chat with a replica of me trained on my writings. I want them to be able to look through the music I made and the music I listened to, and see the connections between the two. I want them to be able to upload their own musical ideas or writings, and see the connections between what they've made and what I've made. ", "parent": "Generational Computing.txt", "score": 0.6342108249664307}, {"content": "The core game state is just a grid of strings. You can denominate agents between angle brackets. Agents have their own internal thought processes and planning stage at the end of each turn. ", "parent": "Gridworld.txt", "score": 0.6428392442588694}], "[People have researched this topic in the past.](https://arxiv.org/pdf/2304.03442) Usually, however, they've used fairly complicated world simulators and agent loops. Given vast improvements in model quality, is it possible to eschew this programmatic scaffolding in favor of something simpler? This seems to be a general trend with language models - as base models improve, the amount of programmatic \"scaffolding\" you need around them decreases. For example, as context windows have increased, RAG is used less often. You can skip the overhead of spinning up a vector database in favor of just stuffing all your context into the prompt.": [{"content": "[People have researched this topic in the past.](https://arxiv.org/pdf/2304.03442) Usually, however, they've used fairly complicated world simulators and agent loops. Given vast improvements in model quality, is it possible to eschew this programmatic scaffolding in favor of something simpler? This seems to be a general trend with language models - as base models improve, the amount of programmatic \"scaffolding\" you need around them decreases. For example, as context windows have increased, RAG is used less often. You can skip the overhead of spinning up a vector database in favor of just stuffing all your context into the prompt.", "parent": "Gridworld.txt", "score": 0.0}, {"content": "That makes the answer to the question, \"Can you get rid of scaffolding in favor of just relying on the base model?\" a resounding no. The models really struggle with maintaining object permanence. You need to model this programmatically - even if the context window is large enough to store a world model, the LLM itself hallucinates too often to maintain coherence over multiple turns.", "parent": "Gridworld.txt", "score": 0.45828000602994234}, {"content": "One downside of this approach is that it makes parallelizing summaries impossible. The context also tends to bloat, and pieces of context that aren't relevant anymore tend to stay in the context anyways. ", "parent": "Interface Journal: Summary Tool.txt", "score": 0.5148218870162964}, {"content": "The future of rational tools for thought and PKMs probably look a lot less like [[roam]], and [more like projects that use AI to automatically link subjects for you](https://thesephist.com/posts/browser/). 2", "parent": "On tools for thought: knowledge management vs creativity.txt", "score": 0.5174254179000854}, {"content": "However, when building Yurt, the static site builder for nomad hypertext, I found myself repeating a lot of logic. I found myself wanting to add features to the indexing engine, like being able to use cloud providers instead of local models (because doing all this processing locally can take ages!). In the future, I might want to use multimodal models, so I can see similarity between images, text, and audio. \n\nFactoring out the semantic search element of my app would have been the correct, unix-ey thing to do, and it would allow me to make these extensions in the future. I plan on doing this soon.  ", "parent": "The making of Nomad Hypertext.txt", "score": 0.53337562084198}, {"content": "I was drawn to the idea of a simple world state - a simple two dimensional array of text. I figured it would be difficult for the LLM to simulate convincing theory of mind (e.g. agents can plot against other agents without the other agents knowing )with just a 2D grid, so I added additional state to simulate the memory and thought process of agents. In practice, this is all very simple as well - it's just an array of text, representing the agent's past thought processes.", "parent": "Gridworld.txt", "score": 0.5380882727352616}, {"content": "However, in practice that's kind of hard. One challenge is that a lot of functionality that could in practice be reusable sometimes has to be coupled into application logic - an example of this is the semantic search in Nomad Hypertext. It would be great if my (hypothetical) summarizer app could list out the themes I was writing about this week, and there was a modal where you could use semantic search to find all other instances in my notes where I've written about that theme. It would be even greater if I didn't have to rewrite all this from scratch. Unfortunately, since semantic search is baked into Nomad Hypertext as an application, not a separate service, I can't reuse that functionality super easily in another app.", "parent": "Interface Work: Stealth Button.txt", "score": 0.5419080257415771}, {"content": "My motivation for working on this project was to explore the frame of LLMs as simulators. Could you use LLMs to simulate how multiple agents interact with each other in a given scenario?", "parent": "Gridworld.txt", "score": 0.5567196444868661}, {"content": "Thinking about offline first software, and how offline, open source AI models combined with CRDTs might offer the opportunity to create offline-first software that is not only more private than cloud software, but also *better.*", "parent": "NOW-Jan-05-2024.txt", "score": 0.566504955291748}, {"content": "I've had some spirited debates on this subject, most recently with [[Jared]] of [[hyperlink-academy]]. I personally believe this is possible, but I've also heard very good arguments otherwise. The synthesis in my head is currently this: the instructor/student relationship is not neccessary, but a social learning environment is. To improve at something, we need to be around people better than ourselves, and a certain level of humility is required to learn from those better than ourselves. An instructor/student relationship is an institutionalized way to approximate this; how effective it is depends on the quality of the institution. I don't think it's the only way to achieve this however, and there are interesting experiments in cohort-based learning that could illustrate other ways to provide a social learning environment.[[meta-acropolis]] [[ideas]] [[Jared]] [[hyperlink-academy]] ", "parent": "untitled-9-21-2021.txt", "score": 0.5701935887336731}], "I was drawn to the idea of a simple world state - a simple two dimensional array of text. I figured it would be difficult for the LLM to simulate convincing theory of mind (e.g. agents can plot against other agents without the other agents knowing )with just a 2D grid, so I added additional state to simulate the memory and thought process of agents. In practice, this is all very simple as well - it's just an array of text, representing the agent's past thought processes.": [{"content": "I was drawn to the idea of a simple world state - a simple two dimensional array of text. I figured it would be difficult for the LLM to simulate convincing theory of mind (e.g. agents can plot against other agents without the other agents knowing )with just a 2D grid, so I added additional state to simulate the memory and thought process of agents. In practice, this is all very simple as well - it's just an array of text, representing the agent's past thought processes.", "parent": "Gridworld.txt", "score": 4.542259061102172e-07}, {"content": "The core game state is just a grid of strings. You can denominate agents between angle brackets. Agents have their own internal thought processes and planning stage at the end of each turn. ", "parent": "Gridworld.txt", "score": 0.3033402391579967}, {"content": "My motivation for working on this project was to explore the frame of LLMs as simulators. Could you use LLMs to simulate how multiple agents interact with each other in a given scenario?", "parent": "Gridworld.txt", "score": 0.4532905262321635}, {"content": "In practice, I had to add quite a few \"proofreading\" steps and some bespoke logic to spot invalid game states - agents suddenly disappearing from the grid, agents suddenly jumping across the map, agents showing up twice because the world reconciliation step didn't erase the agent's previous position, etc.", "parent": "Gridworld.txt", "score": 0.45705530633246005}, {"content": "The core game loop looks like this: At the end of each turn, extract all agents from the board (by finding cells that contain text that has an agent). For each agent, plot what action to take, given the current board state and the agent's past history. Then, for the grid as a whole, consider any environmental affects that might happen (fire spreading, rivers flowing, etc). Finally, given all agent actions and environmental affects, decide the next state of the grid.", "parent": "Gridworld.txt", "score": 0.4727329117303639}, {"content": "[People have researched this topic in the past.](https://arxiv.org/pdf/2304.03442) Usually, however, they've used fairly complicated world simulators and agent loops. Given vast improvements in model quality, is it possible to eschew this programmatic scaffolding in favor of something simpler? This seems to be a general trend with language models - as base models improve, the amount of programmatic \"scaffolding\" you need around them decreases. For example, as context windows have increased, RAG is used less often. You can skip the overhead of spinning up a vector database in favor of just stuffing all your context into the prompt.", "parent": "Gridworld.txt", "score": 0.538019109076378}, {"content": "That makes the answer to the question, \"Can you get rid of scaffolding in favor of just relying on the base model?\" a resounding no. The models really struggle with maintaining object permanence. You need to model this programmatically - even if the context window is large enough to store a world model, the LLM itself hallucinates too often to maintain coherence over multiple turns.", "parent": "Gridworld.txt", "score": 0.5516397441364951}, {"content": "[Gridworld](https://gridworld.nicholaschen.io) is a turn-based, LLM-based, grid-based world simulator. ", "parent": "Gridworld.txt", "score": 0.5903586489350019}, {"content": "The vision is to have a tool that provides a visual interface for creating layouts, and maybe even rigging up basic stateful logic, or data fetching logic. I've more or less nailed down a preferred personal stack for creating projects with React, Express and Postgres, so it shouldn't be terribly difficult to even integrate database logic/fetching logic into such a tool (so long as some flexibility is lost on technology choice).[[code]] [[ideas]] [[tools for thought]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5954838991165161}, {"content": "One fun thing about this project is it made me think a lot about grids. Grids are cool! You can use them in lots of unorthodox ways. I saw [Clavier36](https://clavier36.com/) while working on Gridworld and it made me wonder what a similar interface for composing prompts might look like.  ", "parent": "Gridworld.txt", "score": 0.6105223479046171}], "The core game loop looks like this: At the end of each turn, extract all agents from the board (by finding cells that contain text that has an agent). For each agent, plot what action to take, given the current board state and the agent's past history. Then, for the grid as a whole, consider any environmental affects that might happen (fire spreading, rivers flowing, etc). Finally, given all agent actions and environmental affects, decide the next state of the grid.": [{"content": "The core game loop looks like this: At the end of each turn, extract all agents from the board (by finding cells that contain text that has an agent). For each agent, plot what action to take, given the current board state and the agent's past history. Then, for the grid as a whole, consider any environmental affects that might happen (fire spreading, rivers flowing, etc). Finally, given all agent actions and environmental affects, decide the next state of the grid.", "parent": "Gridworld.txt", "score": 1.1102230246251565e-16}, {"content": "The core game state is just a grid of strings. You can denominate agents between angle brackets. Agents have their own internal thought processes and planning stage at the end of each turn. ", "parent": "Gridworld.txt", "score": 0.28501704699119823}, {"content": "In practice, I had to add quite a few \"proofreading\" steps and some bespoke logic to spot invalid game states - agents suddenly disappearing from the grid, agents suddenly jumping across the map, agents showing up twice because the world reconciliation step didn't erase the agent's previous position, etc.", "parent": "Gridworld.txt", "score": 0.4164012684531294}, {"content": "I was drawn to the idea of a simple world state - a simple two dimensional array of text. I figured it would be difficult for the LLM to simulate convincing theory of mind (e.g. agents can plot against other agents without the other agents knowing )with just a 2D grid, so I added additional state to simulate the memory and thought process of agents. In practice, this is all very simple as well - it's just an array of text, representing the agent's past thought processes.", "parent": "Gridworld.txt", "score": 0.4727170042042834}, {"content": "[Gridworld](https://gridworld.nicholaschen.io) is a turn-based, LLM-based, grid-based world simulator. ", "parent": "Gridworld.txt", "score": 0.5510760930205061}, {"content": "My motivation for working on this project was to explore the frame of LLMs as simulators. Could you use LLMs to simulate how multiple agents interact with each other in a given scenario?", "parent": "Gridworld.txt", "score": 0.6435808022495932}, {"content": "One fun thing about this project is it made me think a lot about grids. Grids are cool! You can use them in lots of unorthodox ways. I saw [Clavier36](https://clavier36.com/) while working on Gridworld and it made me wonder what a similar interface for composing prompts might look like.  ", "parent": "Gridworld.txt", "score": 0.6608657437802115}, {"content": "[People have researched this topic in the past.](https://arxiv.org/pdf/2304.03442) Usually, however, they've used fairly complicated world simulators and agent loops. Given vast improvements in model quality, is it possible to eschew this programmatic scaffolding in favor of something simpler? This seems to be a general trend with language models - as base models improve, the amount of programmatic \"scaffolding\" you need around them decreases. For example, as context windows have increased, RAG is used less often. You can skip the overhead of spinning up a vector database in favor of just stuffing all your context into the prompt.", "parent": "Gridworld.txt", "score": 0.6705986053532432}, {"content": "Psychology, ethics, and game theory are diverse fields that all point towards blindness being situationally useful. All fields relate to human action, so maybe it's possible to generalize this on that level. ", "parent": "Strategic blindness.txt", "score": 0.6735666990280151}, {"content": "In game theory, there are mixed strategic games where the Nash equilibrium for all parties is to choose randomly. Here, the only way to blind one's opponent is to blind oneself too. ", "parent": "Strategic blindness.txt", "score": 0.68892502784729}], "In practice, I had to add quite a few \"proofreading\" steps and some bespoke logic to spot invalid game states - agents suddenly disappearing from the grid, agents suddenly jumping across the map, agents showing up twice because the world reconciliation step didn't erase the agent's previous position, etc.": [{"content": "In practice, I had to add quite a few \"proofreading\" steps and some bespoke logic to spot invalid game states - agents suddenly disappearing from the grid, agents suddenly jumping across the map, agents showing up twice because the world reconciliation step didn't erase the agent's previous position, etc.", "parent": "Gridworld.txt", "score": -2.220446049250313e-16}, {"content": "The core game loop looks like this: At the end of each turn, extract all agents from the board (by finding cells that contain text that has an agent). For each agent, plot what action to take, given the current board state and the agent's past history. Then, for the grid as a whole, consider any environmental affects that might happen (fire spreading, rivers flowing, etc). Finally, given all agent actions and environmental affects, decide the next state of the grid.", "parent": "Gridworld.txt", "score": 0.4164012684531294}, {"content": "The core game state is just a grid of strings. You can denominate agents between angle brackets. Agents have their own internal thought processes and planning stage at the end of each turn. ", "parent": "Gridworld.txt", "score": 0.4356896854271527}, {"content": "I was drawn to the idea of a simple world state - a simple two dimensional array of text. I figured it would be difficult for the LLM to simulate convincing theory of mind (e.g. agents can plot against other agents without the other agents knowing )with just a 2D grid, so I added additional state to simulate the memory and thought process of agents. In practice, this is all very simple as well - it's just an array of text, representing the agent's past thought processes.", "parent": "Gridworld.txt", "score": 0.4570334850613813}, {"content": "In high school, I made this [platformer game](https://nichwch.itch.io/machinegods) that I thought was quite easy but my friends found to be incredibly difficult. It turned out that I'd developed an incredible amount of muscle memory while testing the game out. I'm always scared that something similar will happen with the applications that I design. It's worse because I code and design my own projects, and sometimes it's not clear if I designed something because it's intuitive, or because it matches the database schema more cleanly. On the one hand, it feels incredibly elegant to have your design to express the same consistent schema both in its user-facing interface and its inner workings. On the other hand, isn't your job as a designer to shield your users from complexity?", "parent": "Narcissus.txt", "score": 0.5825041927094652}, {"content": "My motivation for working on this project was to explore the frame of LLMs as simulators. Could you use LLMs to simulate how multiple agents interact with each other in a given scenario?", "parent": "Gridworld.txt", "score": 0.591389953060119}, {"content": "[People have researched this topic in the past.](https://arxiv.org/pdf/2304.03442) Usually, however, they've used fairly complicated world simulators and agent loops. Given vast improvements in model quality, is it possible to eschew this programmatic scaffolding in favor of something simpler? This seems to be a general trend with language models - as base models improve, the amount of programmatic \"scaffolding\" you need around them decreases. For example, as context windows have increased, RAG is used less often. You can skip the overhead of spinning up a vector database in favor of just stuffing all your context into the prompt.", "parent": "Gridworld.txt", "score": 0.6224123819112186}, {"content": "Why did it take so long? Part of it is just a lack of experience. While making exegesis, I changed the database schema countless times, wrote dozens of migrations, accidentally wiped my database once (thank God for RDS backups), and rewrote the backend from scratch 2 months before release. There was also a good amount of feature creep. Whenever I thought I was close to finished, something unexpected would pop up - I started writing this essay 3 months before I actually released exegesis. Whatever the reason, if you count development time on the predecessor to exegesis, I've spent almost a tenth of my life building this. The entire project clocks in at a couple thousand lines of code. It is the largest, most complex, and most difficult thing I have built so far in my life.  [The last time I worked on a project this long, it was the first video game I made back in my senior year of high school.](https://medium.com/@nichwch/machine-gods-devlog-1-166dff474366) Even then, it was really about 6 months of development total, with a huge gap in between because of school, and it was all made with no-code game development tools, because back then the idea of using actual code terrified me. [[exegesis]] [[personal-reflection]] ", "parent": "Reflections on exegesis.txt", "score": 0.6232119798660278}, {"content": "[Gridworld](https://gridworld.nicholaschen.io) is a turn-based, LLM-based, grid-based world simulator. ", "parent": "Gridworld.txt", "score": 0.6271182471436767}, {"content": "That makes the answer to the question, \"Can you get rid of scaffolding in favor of just relying on the base model?\" a resounding no. The models really struggle with maintaining object permanence. You need to model this programmatically - even if the context window is large enough to store a world model, the LLM itself hallucinates too often to maintain coherence over multiple turns.", "parent": "Gridworld.txt", "score": 0.6274831500997318}], "That makes the answer to the question, \"Can you get rid of scaffolding in favor of just relying on the base model?\" a resounding no. The models really struggle with maintaining object permanence. You need to model this programmatically - even if the context window is large enough to store a world model, the LLM itself hallucinates too often to maintain coherence over multiple turns.": [{"content": "That makes the answer to the question, \"Can you get rid of scaffolding in favor of just relying on the base model?\" a resounding no. The models really struggle with maintaining object permanence. You need to model this programmatically - even if the context window is large enough to store a world model, the LLM itself hallucinates too often to maintain coherence over multiple turns.", "parent": "Gridworld.txt", "score": 2.220446049250313e-16}, {"content": "[People have researched this topic in the past.](https://arxiv.org/pdf/2304.03442) Usually, however, they've used fairly complicated world simulators and agent loops. Given vast improvements in model quality, is it possible to eschew this programmatic scaffolding in favor of something simpler? This seems to be a general trend with language models - as base models improve, the amount of programmatic \"scaffolding\" you need around them decreases. For example, as context windows have increased, RAG is used less often. You can skip the overhead of spinning up a vector database in favor of just stuffing all your context into the prompt.", "parent": "Gridworld.txt", "score": 0.45828000602994234}, {"content": "I was drawn to the idea of a simple world state - a simple two dimensional array of text. I figured it would be difficult for the LLM to simulate convincing theory of mind (e.g. agents can plot against other agents without the other agents knowing )with just a 2D grid, so I added additional state to simulate the memory and thought process of agents. In practice, this is all very simple as well - it's just an array of text, representing the agent's past thought processes.", "parent": "Gridworld.txt", "score": 0.551759044843038}, {"content": "My motivation for working on this project was to explore the frame of LLMs as simulators. Could you use LLMs to simulate how multiple agents interact with each other in a given scenario?", "parent": "Gridworld.txt", "score": 0.6074816064690001}, {"content": "In practice, I had to add quite a few \"proofreading\" steps and some bespoke logic to spot invalid game states - agents suddenly disappearing from the grid, agents suddenly jumping across the map, agents showing up twice because the world reconciliation step didn't erase the agent's previous position, etc.", "parent": "Gridworld.txt", "score": 0.6274831500997318}, {"content": "In high school, I made this [platformer game](https://nichwch.itch.io/machinegods) that I thought was quite easy but my friends found to be incredibly difficult. It turned out that I'd developed an incredible amount of muscle memory while testing the game out. I'm always scared that something similar will happen with the applications that I design. It's worse because I code and design my own projects, and sometimes it's not clear if I designed something because it's intuitive, or because it matches the database schema more cleanly. On the one hand, it feels incredibly elegant to have your design to express the same consistent schema both in its user-facing interface and its inner workings. On the other hand, isn't your job as a designer to shield your users from complexity?", "parent": "Narcissus.txt", "score": 0.6697969783585773}, {"content": "The core game state is just a grid of strings. You can denominate agents between angle brackets. Agents have their own internal thought processes and planning stage at the end of each turn. ", "parent": "Gridworld.txt", "score": 0.6721985286842249}, {"content": "[Gridworld](https://gridworld.nicholaschen.io) is a turn-based, LLM-based, grid-based world simulator. ", "parent": "Gridworld.txt", "score": 0.6744585617971278}, {"content": "However, when building Yurt, the static site builder for nomad hypertext, I found myself repeating a lot of logic. I found myself wanting to add features to the indexing engine, like being able to use cloud providers instead of local models (because doing all this processing locally can take ages!). In the future, I might want to use multimodal models, so I can see similarity between images, text, and audio. \n\nFactoring out the semantic search element of my app would have been the correct, unix-ey thing to do, and it would allow me to make these extensions in the future. I plan on doing this soon.  ", "parent": "The making of Nomad Hypertext.txt", "score": 0.6777401566505432}, {"content": "A safer (and more correct) assumption: *you* serve your tools, not the other way around. This puts a much higher burden on a designer - you are not making something people will use, you are making something people will (consciously or not) adapt themselves to and *serve*. Thinking this way puts you in a much more paranoid state of mind, which I believe is the correct stance to take towards technology. (1)", "parent": "Narcissus.txt", "score": 0.6868257599666268}], "Reflecting on how this went, I'm glad I branched out into another project, but I honestly don't really care about Gridworld all that much. It feels disconnected from everything else I made and I'm not super interested in following up more on it. I think the approach of working on one main project with breaks to work on smaller projects is a good one, but I want those smaller projects to be more related to my main project. I have lots of side project ideas related to tools for thought and music. I thought it'd be cool to do LLM research for its own sake, but I've realized I don't care all that much about the fundamental properties of LLMs - I care more about using them as a tool to build the things I already want to build. There are plenty of possibilities there, for example adding semantic search to Synesthesia to supplement the tagging system (which I honestly do not like at all). As I continue to build side projects in my spare time I want to keep this in mind.": [{"content": "Reflecting on how this went, I'm glad I branched out into another project, but I honestly don't really care about Gridworld all that much. It feels disconnected from everything else I made and I'm not super interested in following up more on it. I think the approach of working on one main project with breaks to work on smaller projects is a good one, but I want those smaller projects to be more related to my main project. I have lots of side project ideas related to tools for thought and music. I thought it'd be cool to do LLM research for its own sake, but I've realized I don't care all that much about the fundamental properties of LLMs - I care more about using them as a tool to build the things I already want to build. There are plenty of possibilities there, for example adding semantic search to Synesthesia to supplement the tagging system (which I honestly do not like at all). As I continue to build side projects in my spare time I want to keep this in mind.", "parent": "Gridworld.txt", "score": 1.1102230246251565e-16}, {"content": "I've vacillated on this blog between the idea of working on small projects and working on large projects. I thought I'd try something of a hybrid approach - having a main project, and then working on spinoff projects when I need a break. I spent last week working on such a project.", "parent": "Gridworld.txt", "score": 0.37261343131810554}, {"content": "I want to try a different approach this time. There will be no central organizing idea or principle. Playing the guitar taught me that my creative process works best when I'm free to noodle on the ideas that are immediately interesting to me, not ideas that are part of some preset plan. I have fond memories of sitting on the bus back from my first internship, cracking open my laptop, deciding to try and hack together a first version of YANA. I feel considerably less nostalgic for the late nights I spent during the pandemic trying to \"scale\" my idea, wrestling with pitch decks and AWS dashboards. I had lots of other ideas at the time, but didn't work on them because I felt focusing on exegesis was the correct thing to do. When I first started playing the guitar, I felt guilty learning other songs if I hadn't finished learning a past song. In reality, giving up on songs/concepts I wasn't interested in was incredibly good for my learning in the long run (provided I was still learning new things).", "parent": "Interface Work.txt", "score": 0.41302090883255005}, {"content": "I have not had as much time to work on programming side projects. In general, I've been spending more spare time on music rather than programming. There's nothing intrinsically wrong with that, but I feel like it's less a reflection of what I want than it is a reflection of my environment. \n\nI don't actually find music to be more fulfilling than programming. I got into playing the guitar mostly by accident and to be honest I am much better at the guitar than I am at programming, but playing the guitar was never my dream growing up. There are software ideas that I am excited about and obsessed with. I don't really feel the same way about music.", "parent": "NOW PAGE.txt", "score": 0.4171505570411682}, {"content": "The good news is I've found a method of working on side projects that does work for me: working on one side project at a time, with the intention of getting real users. This is a way of working I previously tried explicitly to steer away from - I've written previously on my blog that I wanted to work on lots of small projects instead of obsessively on one big project. ", "parent": "An Update.txt", "score": 0.4294358491897583}, {"content": "One fun thing about this project is it made me think a lot about grids. Grids are cool! You can use them in lots of unorthodox ways. I saw [Clavier36](https://clavier36.com/) while working on Gridworld and it made me wonder what a similar interface for composing prompts might look like.  ", "parent": "Gridworld.txt", "score": 0.4362914598478189}, {"content": "My goal in life right now is to focus more on programming, while keeping music as a hobby. I want to improve at both, and someday I'd like to unite these two interests - not in some surface level way like getting really into digital signal processing or generative music, but by making the process of writing software more like the process of making music (intuitive, embodied, modular, composable).", "parent": "NOW PAGE.txt", "score": 0.4408050775527954}, {"content": "The previous method of working I sketched out in this blog (working on small projects, writing about them in public) is not working for me. It was working for me for a while, mostly while I was building at the Recurse center, but it's not anymore, and it's because I just don't feel motivated to work on lots of small projects that no one uses. ", "parent": "An Update.txt", "score": 0.4410308599472046}, {"content": "I don't care if my work gets noticed, or if it's any good, or if it leads to anything at all. I don't know if I have any talent for interface research, but it seems like I might - my sophomore year of college, I designed a notetaking tool called YANA with a novel interface where you could select text and then add tags to it. The response to it was very positive, which encouraged me to try and build a startup out of it, which unfortunately led to me becoming monomaniacally obsessed with that idea at the expense of trying to explore any other ideas (an obsession I only shed once I made Nomad Hypertext, which I could call a \"finished\" product). ", "parent": "Interface Work.txt", "score": 0.45029544830322266}, {"content": "I've found writing down tasks and decomposing them into smaller ones helps. Right now, I do this in [[exegesis]], which honestly feels somewhat suboptimal. I also have another side project called [https://focusmachine.app/](https://focusmachine.app/) to remind me of what I'm currently supposed to be focusing - it's really stupid, it just asks you what you want to work on and then spams you with a reminder to focus on that at user-inputted interval. [[focus]] [[focus-machine]] [[ideas]] [[exegesis]] ", "parent": "untitled-9-24-2021.txt", "score": 0.4546831250190735}], "One fun thing about this project is it made me think a lot about grids. Grids are cool! You can use them in lots of unorthodox ways. I saw [Clavier36](https://clavier36.com/) while working on Gridworld and it made me wonder what a similar interface for composing prompts might look like.  ": [{"content": "One fun thing about this project is it made me think a lot about grids. Grids are cool! You can use them in lots of unorthodox ways. I saw [Clavier36](https://clavier36.com/) while working on Gridworld and it made me wonder what a similar interface for composing prompts might look like.  ", "parent": "Gridworld.txt", "score": -2.220446049250313e-16}, {"content": "Reflecting on how this went, I'm glad I branched out into another project, but I honestly don't really care about Gridworld all that much. It feels disconnected from everything else I made and I'm not super interested in following up more on it. I think the approach of working on one main project with breaks to work on smaller projects is a good one, but I want those smaller projects to be more related to my main project. I have lots of side project ideas related to tools for thought and music. I thought it'd be cool to do LLM research for its own sake, but I've realized I don't care all that much about the fundamental properties of LLMs - I care more about using them as a tool to build the things I already want to build. There are plenty of possibilities there, for example adding semantic search to Synesthesia to supplement the tagging system (which I honestly do not like at all). As I continue to build side projects in my spare time I want to keep this in mind.", "parent": "Gridworld.txt", "score": 0.4362914598478189}, {"content": "[Gridworld](https://gridworld.nicholaschen.io) is a turn-based, LLM-based, grid-based world simulator. ", "parent": "Gridworld.txt", "score": 0.45109066395272357}, {"content": "I'm not really sure how to square this. One idea I've been obsessed with is how I can make the process of writing software more like the process of making music. ", "parent": "NOW PAGE.txt", "score": 0.48818641901016235}, {"content": "In fact, in the middle of an essay, I should be able to invent a UI component just to illustrate a point.\n\nEarly internet vibes.", "parent": "Fragments.txt", "score": 0.5035684704780579}, {"content": "I bring this up because it would be nice if there were a way to \"compose\" UI features the same way you can compose command line features. Imagine if I had been able to add a stealth button to my app without editing my app, but by building a new app that I then composed my app with. There are lots of other UI elements I'd like to add to my app - maybe a button that pushes all my notes up to Github, for example. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.5150184035301208}, {"content": "I've found writing down tasks and decomposing them into smaller ones helps. Right now, I do this in [[exegesis]], which honestly feels somewhat suboptimal. I also have another side project called [https://focusmachine.app/](https://focusmachine.app/) to remind me of what I'm currently supposed to be focusing - it's really stupid, it just asks you what you want to work on and then spams you with a reminder to focus on that at user-inputted interval. [[focus]] [[focus-machine]] [[ideas]] [[exegesis]] ", "parent": "untitled-9-24-2021.txt", "score": 0.5235668420791626}, {"content": "I rewrote the indexing software for this blog in Python. The general philosophy of keeping things as modular as possible, storing content in interoperable, plain formats whenever possible, has been paying off. I'm realizing slowly how many other possibilities are opened up by keeping content in plaintext/markdown - I can write a weekend project mapping my blog posts by topic and time, I can create a word cloud visualization of my blog, I can build a game of pong where the blocks are paragraphs of my blogposts, all without touching any existing code. ", "parent": "NOW PAGE.txt", "score": 0.5268666744232178}, {"content": "It was nice building a new feature for an app I haven't touched in a while. Still, it got me thinking about extensibility and composability. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.5304293632507324}, {"content": "In high school, I made this [platformer game](https://nichwch.itch.io/machinegods) that I thought was quite easy but my friends found to be incredibly difficult. It turned out that I'd developed an incredible amount of muscle memory while testing the game out. I'm always scared that something similar will happen with the applications that I design. It's worse because I code and design my own projects, and sometimes it's not clear if I designed something because it's intuitive, or because it matches the database schema more cleanly. On the one hand, it feels incredibly elegant to have your design to express the same consistent schema both in its user-facing interface and its inner workings. On the other hand, isn't your job as a designer to shield your users from complexity?", "parent": "Narcissus.txt", "score": 0.5313408169508766}], "  ": [{"content": "  ", "parent": "Gridworld.txt", "score": 0.0}, {"content": "  ", "parent": "Narcissus.txt", "score": 9.618186328497202e-07}, {"content": "  ", "parent": "Narcissus.txt", "score": 1.0316966061463262e-06}, {"content": "  ", "parent": "The making of Nomad Hypertext.txt", "score": 1.9669532775878906e-06}, {"content": " ", "parent": "Plaintext is your best friend.txt", "score": 0.08612757921218872}, {"content": " ", "parent": "NOW PAGE.txt", "score": 0.08616328239440918}, {"content": " ", "parent": "Interface Journal: Summary Tool.txt", "score": 0.08616328239440918}, {"content": " ", "parent": "Interface Journal: Summary Tool.txt", "score": 0.08616328239440918}, {"content": " ", "parent": "Narcissus.txt", "score": 0.08616339216183688}, {"content": " ", "parent": "untitled-10-11-2021.txt", "score": 0.08616805076599121}]}