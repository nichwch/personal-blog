{"I built a \"stealth\" button for nomad hypertext. ": [{"content": "I built a \"stealth\" button for nomad hypertext. ", "parent": "Interface Work: Stealth Button.txt", "score": -2.220446049250313e-16}, {"content": "![Stealth button in action](stealth.png)", "parent": "Interface Work: Stealth Button.txt", "score": 0.37599278337429565}, {"content": "One of the reasons I was excited to make Nomad Hypertext local first was the idea that by using simple text files, I'd be able to add more features to my notes, without working on Nomad Hypertext itself. For example, if I wanted summaries of my notes, I could build an entirely new summarizer app, that simply operates on the same files that Nomad Hypertext does. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.43477347867457483}, {"content": "Nomad Hypertext is a writing app built around semantic search. ", "parent": "What is Nomad Hypertext.txt", "score": 0.4384613037109375}, {"content": "To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri. ", "parent": "The making of Nomad Hypertext.txt", "score": 0.44959694147109985}, {"content": "I was greatly inspired by two blogposts. The first, [Hyperlink Maximalism](https://thesephist.com/posts/hyperlink/) by Linus Lee talks about generating hyperlinks automatically between documents, and comes with a [demo](https://notation.app) that made a deep impression on me. To be honest, nomad hypertext is just Linus' demo using semantic search instead of full text search.", "parent": "What is Nomad Hypertext.txt", "score": 0.46882498264312744}, {"content": "One last thing: There is a solution that combines the flexibility of plaintext with the aesthetics of rich text - Markdown! I don't think I'll support Markdown formatting in nomad hypertext, but for my static site generator Yurt, I will try to do that in the future. The utility would mostly be from having usable links. ", "parent": "Plaintext is your best friend.txt", "score": 0.4692579507827759}, {"content": "Yurt is a static site generator, built off the same principles as Nomad Hypertext. ", "parent": "What is Yurt.txt", "score": 0.49214160442352295}, {"content": "There are pros and cons to this approach. The biggest pro is that it generates a static blog. There's no backend to maintain, and it's quite lightweight and loads fast, while also providing the benefit of semantic hyperlinks. The con is that since the index is precomputed, you can't search for arbitrary things like you can in nomad hypertext. ", "parent": "What is Yurt.txt", "score": 0.492456316947937}, {"content": "At the Recurse center, grinding leetcode and working on nomad hypertext, a collection of interface ideas that center around local-first notetaking powered by semantic search and AI. ", "parent": "NOW-Jan-05-2024.txt", "score": 0.49914735555648804}], "": [{"content": "~", "parent": "NOW PAGE.txt", "score": 0.6013321508520265}, {"content": "~", "parent": "Plaintext is your best friend.txt", "score": 0.6013771295547485}, {"content": "~", "parent": "Fragments.txt", "score": 0.601378321647644}, {"content": "~", "parent": "untitled-1-4-2022.txt", "score": 0.6013792157173157}, {"content": "~", "parent": "Fragments.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "Fragments.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "Fragments.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "Fragments.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "Fragments.txt", "score": 0.6014099717140198}, {"content": "~", "parent": "The making of Nomad Hypertext.txt", "score": 0.6014099717140198}], "![Stealth button in action](stealth.png)": [{"content": "![Stealth button in action](stealth.png)", "parent": "Interface Work: Stealth Button.txt", "score": 5.24576681537603e-07}, {"content": "I built a \"stealth\" button for nomad hypertext. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.37602004137261924}, {"content": "When this feature is activated, it hides all the text on your screen behind red bars. You're still able to see how much you're typing and how much you're deleting, which is handy.", "parent": "Interface Work: Stealth Button.txt", "score": 0.6292149063202017}, {"content": "I bring this up because it would be nice if there were a way to \"compose\" UI features the same way you can compose command line features. Imagine if I had been able to add a stealth button to my app without editing my app, but by building a new app that I then composed my app with. There are lots of other UI elements I'd like to add to my app - maybe a button that pushes all my notes up to Github, for example. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.6666524856719127}, {"content": "Code:", "parent": "Goals for Spring Quarter.txt", "score": 0.7223836183547974}, {"content": "Visual developer tools", "parent": "untitled-9-24-2021.txt", "score": 0.7367388010025024}, {"content": "Users should have complete control over what they see. I'm not saying algorithmic feeds don't have their place, but they should be something users opt in to. Andy [[Matuschak]] coined the idea of \"[programmable attention](https://notes.andymatuschak.org/zJrfPCbY7GcpV9asEc8NTVzXTAV4TvRFMuY6)\" as something [[tools for thought]] could enable. I will say that this already exists, only in the opposite, sinister sense - right now it's the platform programming your attention, not you. ", "parent": "Controlling what you see.txt", "score": 0.7397947311401367}, {"content": "A point worth repeating: in mecha fiction, we control 50-foot-tall war robots, in our world, we are controlled by the 5 inch screens in our pocket.", "parent": "Giant Robots.txt", "score": 0.7397966384887695}, {"content": "Upset at this state of affairs, I found [a chrome extension](https://chrome.google.com/webstore/detail/news-feed-eradicator/fjcldmjmjhkklehbacihaiopjklihlgg?hl=en) that disabled the \"feeds\" on a number of sites (Facebook, Youtube, LinkedIn, even HackerNews). This helped immediately. The unconscious, muscle-memory impulse to press Y and autocomplete into Youtube was still there, but when I opened the page, the algorithmic suggestions were all gone. Staring at the blank space, I would realize that I hadn't opened Youtube because I really wanted to watch anything, I had opened it because it was my impulse to do that while bored. ", "parent": "Controlling what you see.txt", "score": 0.7509773969650269}, {"content": "Focus[[focus]] [[focus-machine]] [[ideas]] ", "parent": "untitled-9-24-2021.txt", "score": 0.7510965466499329}], "I get paranoid sometimes when I'm writing on my laptop in public, because it feels like people might be staring at me and what I'm writing. Usually this doesn't really matter, but if I'm journaling about something private, I do care. ": [{"content": "I get paranoid sometimes when I'm writing on my laptop in public, because it feels like people might be staring at me and what I'm writing. Usually this doesn't really matter, but if I'm journaling about something private, I do care. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.0}, {"content": "So far, I do think it motivates me to write more as well. Knowing that my journal entries won't be useless unread text files on my machine and will instead be distilled into something more readable removes some of the friction from writing.", "parent": "Interface Journal: Summary Tool.txt", "score": 0.5192038824868602}, {"content": "I noticed that it had trouble maintaining continuity through different weeks. For example, if I started a project one week and wrote more about it the next week, it'd have trouble realizing that I was talking about the same project in both journal entries. This is because I write for myself in my journal, and don't feel a need to constantly reintroduce context that I'm aware of. I suspect most people also journal this way.", "parent": "Interface Journal: Summary Tool.txt", "score": 0.5252060633411175}, {"content": "If I start an exegesis brain dump (what I call my [[journal]] entries when I post them to twitter) and post it, it makes me more likely to continue writing in it throughout the day. Once I start writing, more thoughts and ideas come to me. It's as if my brain suddenly realizes there's an outlet for thoughts, and so it generates more of them. Having good conversations has a similar effect. [[writing]] [[personal-reflection]]", "parent": "untitled-10-1-2021.txt", "score": 0.5510993599891663}, {"content": "Having done this daily exegesis braindump [[journal]] thing for a bit, I think there's something of value to her response. I get down my thoughts *easier* in my journal posts than I do in my private exegesis posts.", "parent": "untitled-9-24-2021.txt", "score": 0.5704280138015747}, {"content": "For writing, I firmly believe it's pointless to write for the sake of writing - it's important to do things first, so you have something to write about. That being said, it's also useful to write regularly to reflect on things, so I want to write at least once a week (an hour or so a session).", "parent": "Goals for Spring Quarter.txt", "score": 0.5715506076812744}, {"content": "I don't care if my work gets noticed, or if it's any good, or if it leads to anything at all. I don't know if I have any talent for interface research, but it seems like I might - my sophomore year of college, I designed a notetaking tool called YANA with a novel interface where you could select text and then add tags to it. The response to it was very positive, which encouraged me to try and build a startup out of it, which unfortunately led to me becoming monomaniacally obsessed with that idea at the expense of trying to explore any other ideas (an obsession I only shed once I made Nomad Hypertext, which I could call a \"finished\" product). ", "parent": "Interface Work.txt", "score": 0.5791990756988525}, {"content": "At some point I realized having plain text summaries isn't actually that useful. I want an at-a-glance view of what I was journaling about at a certain point in time. I don't want to have to read paragraphs of bland, AI-generated summary. ", "parent": "Interface Journal: Summary Tool.txt", "score": 0.5804528558635296}, {"content": "I feel pretty good right now, so I want to write down how it feels, so I can feel this way more often.", "parent": "untitled-9-30-2021.txt", "score": 0.5831623077392578}, {"content": "I fell into this kind of thinking while building exegesis, and it put an enormous amount of pressure on me, because it made me feel as if it wasn't just a notetaking app I was building, but a shrine for the mind. I would look at other notetaking systems like Roam Research and feel threatened - my notetaking app wasn't as powerful as theirs, therefore my mind would be weaker than theirs. Every little imperfection, every unimplemented feature, every bug felt sacrilegious - this was my second brain I was building after all. Needless to say, this led to a lot of feature creep, because my second brain had to be perfect.", "parent": "Second Brains.txt", "score": 0.5849635601043701}], "When this feature is activated, it hides all the text on your screen behind red bars. You're still able to see how much you're typing and how much you're deleting, which is handy.": [{"content": "When this feature is activated, it hides all the text on your screen behind red bars. You're still able to see how much you're typing and how much you're deleting, which is handy.", "parent": "Interface Work: Stealth Button.txt", "score": 0.0}, {"content": "![Stealth button in action](stealth.png)", "parent": "Interface Work: Stealth Button.txt", "score": 0.6292854915698928}, {"content": "If you want some text to not show up in the search index (if it's private, or not very important, or any other reason), prepend the paragraph with two slashes. ", "parent": "What is Nomad Hypertext.txt", "score": 0.6419792771339417}, {"content": "The flexibility and power and power of plaintext matters much more than the meagre aesthetic gains of rich text. I am genuinely convinced that bold, italics and titles add little to nothing to my experience of a notetaking app.", "parent": "Plaintext is your best friend.txt", "score": 0.6466536521911621}, {"content": "Here's the thing - I don't think anyone really needs right text that badly. Italics and bold don't matter that much. The one thing I find myself missing a lot is titles, but you can do something similar with plaintext simply by having a number before a line, like so:", "parent": "Plaintext is your best friend.txt", "score": 0.6711628437042236}, {"content": "The bottom line is with a notetaking app, what I'm really looking for is the ability to see connections between my ideas. I don't care about pretty formatting. Plain text is uglier, but it increases the range of things you can do with your notes - you can pipe it into an LLM, you can pipe it into a summarizer, you can take notes on Apple Notes then paste them into your notes later, you can set up a service that lets you text a number that will then paste your texts into your notes, etc. etc. ", "parent": "Plaintext is your best friend.txt", "score": 0.67856764793396}, {"content": "Visual developer tools", "parent": "untitled-9-24-2021.txt", "score": 0.6804816126823425}, {"content": "Of course, if you're looking to raise a billion dollars on your consumer-facing notetaking app, plain text won't cut it. Lucky for us all, Jerome Powell has acted wisely to proscribe this possibility.", "parent": "Plaintext is your best friend.txt", "score": 0.6862909197807312}, {"content": "It does this by dividing your notes up into paragraph-sized blocks and indexing them into a vector database with an AI embedding model.", "parent": "What is Nomad Hypertext.txt", "score": 0.692032516002655}, {"content": "I built a \"stealth\" button for nomad hypertext. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.6926922685006222}], "It was nice building a new feature for an app I haven't touched in a while. Still, it got me thinking about extensibility and composability. ": [{"content": "It was nice building a new feature for an app I haven't touched in a while. Still, it got me thinking about extensibility and composability. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.0}, {"content": "I bring this up because it would be nice if there were a way to \"compose\" UI features the same way you can compose command line features. Imagine if I had been able to add a stealth button to my app without editing my app, but by building a new app that I then composed my app with. There are lots of other UI elements I'd like to add to my app - maybe a button that pushes all my notes up to Github, for example. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.37163902435319773}, {"content": "[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]] ", "parent": "untitled-9-20-2021.txt", "score": 0.45963335037231445}, {"content": "However, when building Yurt, the static site builder for nomad hypertext, I found myself repeating a lot of logic. I found myself wanting to add features to the indexing engine, like being able to use cloud providers instead of local models (because doing all this processing locally can take ages!). In the future, I might want to use multimodal models, so I can see similarity between images, text, and audio. \n\nFactoring out the semantic search element of my app would have been the correct, unix-ey thing to do, and it would allow me to make these extensions in the future. I plan on doing this soon.  ", "parent": "The making of Nomad Hypertext.txt", "score": 0.4643557667732239}, {"content": "This was reassuring, because it meant I had made something genuinely useful. In the past, I have made things I simply had no desire to use - one example is [JAFT](https://nichwch.medium.com/what-is-jaft-f543a4fad9d7), a time tracking app I made after making YANA (the predecessor to exegesis). I stopped using it after a bit, and didn't bother renewing the domain. I don't miss JAFT at all. The fact that I did miss exegesis on the days where it wasn't operational was a good sign.", "parent": "Second Brains.txt", "score": 0.4748966693878174}, {"content": "I want to continue working on [[exegesis]]. There are still a plethora of features I want to build into the app. I have wanted to build something like this for a long time - I sort of did with my last project [YANA](https://yananotes.com/), but the core text engine was so limited that I had to start over from scratch (the product of which is exegesis). I want to sort out a formal list of features before a beta release, and an eventual public release. I will probably use exegesis as a devlog of sorts as well.", "parent": "Reflections for the New Year.txt", "score": 0.4893364906311035}, {"content": "I fell into this kind of thinking while building exegesis, and it put an enormous amount of pressure on me, because it made me feel as if it wasn't just a notetaking app I was building, but a shrine for the mind. I would look at other notetaking systems like Roam Research and feel threatened - my notetaking app wasn't as powerful as theirs, therefore my mind would be weaker than theirs. Every little imperfection, every unimplemented feature, every bug felt sacrilegious - this was my second brain I was building after all. Needless to say, this led to a lot of feature creep, because my second brain had to be perfect.", "parent": "Second Brains.txt", "score": 0.4913182854652405}, {"content": "I've been working on notetaking apps for years now. I starting working on the first one on the bus back from my internship. I had an idea for a simple interaction - users should be able to highlight a piece of text, then add tags to that text. I distinctly remember thinking to myself, \"That should be a piece of cake! I should be able to finish it during the 45 minute bus  ride.\"\n\n\nIt ended up taking the rest of the summer. I was 19, naive, and had no idea what a nightmare the contenteditable HTML standard was.", "parent": "Plaintext is your best friend.txt", "score": 0.4914246201515198}, {"content": "This is not groundbreaking news, but it's groundbreaking for me. I started my software engineering career writing code with cloud applications in mind, and the idea that you can ship cool projects without running database migrations or doing extensive backtesting against your monolith *is* groundbreaking to me. In college I wanted my own blog and instead of getting a static site generator I built out a cloud application with NextJS, PostgreSQL and Heroku. I did learn a lot and it helped me land my first internship, but now it strikes me as an incredibly wrong minded approach. ", "parent": "NOW PAGE.txt", "score": 0.49216879512402356}, {"content": "Working on exegesis was a grueling affair at times. I rewrote the schema multiple times, rewrote the backend from scratch 2 months before release, chased countless UI bugs, and manually patched abandoned NPM packages. Part of it may have been due to my inexperience, but [working with ](https://nichwch.medium.com/making-yana-e3fade3f56e7)[rich text](https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480) is just a [difficult task](https://twitter.com/thesephist/status/1360298464349999108), period. At one point, I considered giving up after finding a rival writing app I thought I simply couldn't compete with - I have a copy of an unfinished essay I started writing on why I had given up tucked away somewhere. ", "parent": "Prometheus.txt", "score": 0.4948798418045044}], "One of the reasons I was excited to make Nomad Hypertext local first was the idea that by using simple text files, I'd be able to add more features to my notes, without working on Nomad Hypertext itself. For example, if I wanted summaries of my notes, I could build an entirely new summarizer app, that simply operates on the same files that Nomad Hypertext does. ": [{"content": "One of the reasons I was excited to make Nomad Hypertext local first was the idea that by using simple text files, I'd be able to add more features to my notes, without working on Nomad Hypertext itself. For example, if I wanted summaries of my notes, I could build an entirely new summarizer app, that simply operates on the same files that Nomad Hypertext does. ", "parent": "Interface Work: Stealth Button.txt", "score": -2.220446049250313e-16}, {"content": "However, in practice that's kind of hard. One challenge is that a lot of functionality that could in practice be reusable sometimes has to be coupled into application logic - an example of this is the semantic search in Nomad Hypertext. It would be great if my (hypothetical) summarizer app could list out the themes I was writing about this week, and there was a modal where you could use semantic search to find all other instances in my notes where I've written about that theme. It would be even greater if I didn't have to rewrite all this from scratch. Unfortunately, since semantic search is baked into Nomad Hypertext as an application, not a separate service, I can't reuse that functionality super easily in another app.", "parent": "Interface Work: Stealth Button.txt", "score": 0.34135522736621904}, {"content": "However, when building Yurt, the static site builder for nomad hypertext, I found myself repeating a lot of logic. I found myself wanting to add features to the indexing engine, like being able to use cloud providers instead of local models (because doing all this processing locally can take ages!). In the future, I might want to use multimodal models, so I can see similarity between images, text, and audio. \n\nFactoring out the semantic search element of my app would have been the correct, unix-ey thing to do, and it would allow me to make these extensions in the future. I plan on doing this soon.  ", "parent": "The making of Nomad Hypertext.txt", "score": 0.37726616859436035}, {"content": "Nomad Hypertext is a writing app built around semantic search. ", "parent": "What is Nomad Hypertext.txt", "score": 0.38209474086761475}, {"content": "One last thing: There is a solution that combines the flexibility of plaintext with the aesthetics of rich text - Markdown! I don't think I'll support Markdown formatting in nomad hypertext, but for my static site generator Yurt, I will try to do that in the future. The utility would mostly be from having usable links. ", "parent": "Plaintext is your best friend.txt", "score": 0.3896936774253845}, {"content": "To be frank, I made some regrettable engineering decisions while making Nomad Hypertext. I built this during my Recurse Center batch and was focused on getting a working prototype out, so some shortcuts were taken. Nevertheless, reflecting back, I would say these shortcuts were not worth it. \n\nThe two big shortcuts I took were using Javascript instead of Typescript and using Electron instead of Tauri. ", "parent": "The making of Nomad Hypertext.txt", "score": 0.413568377494812}, {"content": "I was greatly inspired by two blogposts. The first, [Hyperlink Maximalism](https://thesephist.com/posts/hyperlink/) by Linus Lee talks about generating hyperlinks automatically between documents, and comes with a [demo](https://notation.app) that made a deep impression on me. To be honest, nomad hypertext is just Linus' demo using semantic search instead of full text search.", "parent": "What is Nomad Hypertext.txt", "score": 0.4176625609397888}, {"content": "There are pros and cons to this approach. The biggest pro is that it generates a static blog. There's no backend to maintain, and it's quite lightweight and loads fast, while also providing the benefit of semantic hyperlinks. The con is that since the index is precomputed, you can't search for arbitrary things like you can in nomad hypertext. ", "parent": "What is Yurt.txt", "score": 0.4273797869682312}, {"content": "I built a \"stealth\" button for nomad hypertext. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.43477347867457483}, {"content": "At the Recurse center, grinding leetcode and working on nomad hypertext, a collection of interface ideas that center around local-first notetaking powered by semantic search and AI. ", "parent": "NOW-Jan-05-2024.txt", "score": 0.44229453802108765}], "However, in practice that's kind of hard. One challenge is that a lot of functionality that could in practice be reusable sometimes has to be coupled into application logic - an example of this is the semantic search in Nomad Hypertext. It would be great if my (hypothetical) summarizer app could list out the themes I was writing about this week, and there was a modal where you could use semantic search to find all other instances in my notes where I've written about that theme. It would be even greater if I didn't have to rewrite all this from scratch. Unfortunately, since semantic search is baked into Nomad Hypertext as an application, not a separate service, I can't reuse that functionality super easily in another app.": [{"content": "However, in practice that's kind of hard. One challenge is that a lot of functionality that could in practice be reusable sometimes has to be coupled into application logic - an example of this is the semantic search in Nomad Hypertext. It would be great if my (hypothetical) summarizer app could list out the themes I was writing about this week, and there was a modal where you could use semantic search to find all other instances in my notes where I've written about that theme. It would be even greater if I didn't have to rewrite all this from scratch. Unfortunately, since semantic search is baked into Nomad Hypertext as an application, not a separate service, I can't reuse that functionality super easily in another app.", "parent": "Interface Work: Stealth Button.txt", "score": 0.0}, {"content": "However, when building Yurt, the static site builder for nomad hypertext, I found myself repeating a lot of logic. I found myself wanting to add features to the indexing engine, like being able to use cloud providers instead of local models (because doing all this processing locally can take ages!). In the future, I might want to use multimodal models, so I can see similarity between images, text, and audio. \n\nFactoring out the semantic search element of my app would have been the correct, unix-ey thing to do, and it would allow me to make these extensions in the future. I plan on doing this soon.  ", "parent": "The making of Nomad Hypertext.txt", "score": 0.32327204942703247}, {"content": "One of the reasons I was excited to make Nomad Hypertext local first was the idea that by using simple text files, I'd be able to add more features to my notes, without working on Nomad Hypertext itself. For example, if I wanted summaries of my notes, I could build an entirely new summarizer app, that simply operates on the same files that Nomad Hypertext does. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.34135522736621904}, {"content": "Nomad Hypertext is a writing app built around semantic search. ", "parent": "What is Nomad Hypertext.txt", "score": 0.38020050525665283}, {"content": "I was greatly inspired by two blogposts. The first, [Hyperlink Maximalism](https://thesephist.com/posts/hyperlink/) by Linus Lee talks about generating hyperlinks automatically between documents, and comes with a [demo](https://notation.app) that made a deep impression on me. To be honest, nomad hypertext is just Linus' demo using semantic search instead of full text search.", "parent": "What is Nomad Hypertext.txt", "score": 0.41319388151168823}, {"content": "I'm excited about building other features on top of summaries. Having accessible plaintext weekly summaries make a variety of other use cases possible - one idea I had was to use something like Exa Search's API to curate a reading list based off what I've been journaling about recently. ", "parent": "Interface Journal: Summary Tool.txt", "score": 0.4250066555910539}, {"content": "If this sounds silly, that's because it is. Reality check: note taking apps are just note taking apps; it is supremely arrogant to think that you think you can replicate with a couple KLOCs of javascript code what took evolution thousands of years to perfect. I have stopped thinking about exegesis as a personal knowledge management system or a notetaking app. For me it is the mental equivalent of [perpetual stew](https://en.wikipedia.org/wiki/Perpetual_stew) - I leave it on the stove and toss ideas in whenever its convenient. The effortlessness is the point; if I ever find myself drawing a diagram to have to figure out how to use it, that defeats the purpose of the whole thing.", "parent": "Second Brains.txt", "score": 0.45665496587753296}, {"content": "The second would be [All you need is links](https://subconscious.substack.com/p/all-you-need-is-links) by Gordon Brander. He puts forth the case that you can implement pretty much any feature you might want a tool for thought to have, using only hyperlinks. I found the idea that you could create a myriad of functionality with just one powerful feature extremely fascinating. \n\nWhat he says about links, I believe to be true about semantic search. ", "parent": "What is Nomad Hypertext.txt", "score": 0.4635502099990845}, {"content": "There are pros and cons to this approach. The biggest pro is that it generates a static blog. There's no backend to maintain, and it's quite lightweight and loads fast, while also providing the benefit of semantic hyperlinks. The con is that since the index is precomputed, you can't search for arbitrary things like you can in nomad hypertext. ", "parent": "What is Yurt.txt", "score": 0.4662560820579529}, {"content": "I bring this up because it would be nice if there were a way to \"compose\" UI features the same way you can compose command line features. Imagine if I had been able to add a stealth button to my app without editing my app, but by building a new app that I then composed my app with. There are lots of other UI elements I'd like to add to my app - maybe a button that pushes all my notes up to Github, for example. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.46629730708163386}], "I bring this up because it would be nice if there were a way to \"compose\" UI features the same way you can compose command line features. Imagine if I had been able to add a stealth button to my app without editing my app, but by building a new app that I then composed my app with. There are lots of other UI elements I'd like to add to my app - maybe a button that pushes all my notes up to Github, for example. ": [{"content": "I bring this up because it would be nice if there were a way to \"compose\" UI features the same way you can compose command line features. Imagine if I had been able to add a stealth button to my app without editing my app, but by building a new app that I then composed my app with. There are lots of other UI elements I'd like to add to my app - maybe a button that pushes all my notes up to Github, for example. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.0}, {"content": "It was nice building a new feature for an app I haven't touched in a while. Still, it got me thinking about extensibility and composability. ", "parent": "Interface Work: Stealth Button.txt", "score": 0.37163902435319773}, {"content": "[[ideas]]: As I've matured as a [[React]] developer, I've found certain standard methods of handling things like state management, routing, styling, and data fetching. Because I've standardized on this approach, I've been writing higher order functions that abstract away a lot of the boilerplate. This has me thinking - it would almost certainly be possible to build some kind of visual tool to help scaffold a react app. Something in between no-code and a developer tool - like the [Nx.dev extension for VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). [[code]] ", "parent": "untitled-9-20-2021.txt", "score": 0.4628337621688843}, {"content": "However, in practice that's kind of hard. One challenge is that a lot of functionality that could in practice be reusable sometimes has to be coupled into application logic - an example of this is the semantic search in Nomad Hypertext. It would be great if my (hypothetical) summarizer app could list out the themes I was writing about this week, and there was a modal where you could use semantic search to find all other instances in my notes where I've written about that theme. It would be even greater if I didn't have to rewrite all this from scratch. Unfortunately, since semantic search is baked into Nomad Hypertext as an application, not a separate service, I can't reuse that functionality super easily in another app.", "parent": "Interface Work: Stealth Button.txt", "score": 0.46629730708163386}, {"content": "I'm not really sure how to square this. One idea I've been obsessed with is how I can make the process of writing software more like the process of making music. ", "parent": "NOW PAGE.txt", "score": 0.4990808022434431}, {"content": "However, when building Yurt, the static site builder for nomad hypertext, I found myself repeating a lot of logic. I found myself wanting to add features to the indexing engine, like being able to use cloud providers instead of local models (because doing all this processing locally can take ages!). In the future, I might want to use multimodal models, so I can see similarity between images, text, and audio. \n\nFactoring out the semantic search element of my app would have been the correct, unix-ey thing to do, and it would allow me to make these extensions in the future. I plan on doing this soon.  ", "parent": "The making of Nomad Hypertext.txt", "score": 0.518998384475708}, {"content": "Eventually I want exegesis to be a social platform - you can already publish notes, but I want social features like profiles, groups, follows, etc. etc. Similar tools like [[roam]] can already be used as CRMs. So can exegesis. But, if I'm going to be building profiles into the app for social features, it may make sense to build additional affordances around managing people and relationships. For example, hovering over a link to a person could show all their social media profiles, in addition to places where you've tagged them in your notes.[[exegesis]] [[ideas]] [[roam]] ", "parent": "untitled-9-20-2021.txt", "score": 0.5211365222930908}, {"content": "The bottom line is with a notetaking app, what I'm really looking for is the ability to see connections between my ideas. I don't care about pretty formatting. Plain text is uglier, but it increases the range of things you can do with your notes - you can pipe it into an LLM, you can pipe it into a summarizer, you can take notes on Apple Notes then paste them into your notes later, you can set up a service that lets you text a number that will then paste your texts into your notes, etc. etc. ", "parent": "Plaintext is your best friend.txt", "score": 0.5238654613494873}, {"content": "I fell into this kind of thinking while building exegesis, and it put an enormous amount of pressure on me, because it made me feel as if it wasn't just a notetaking app I was building, but a shrine for the mind. I would look at other notetaking systems like Roam Research and feel threatened - my notetaking app wasn't as powerful as theirs, therefore my mind would be weaker than theirs. Every little imperfection, every unimplemented feature, every bug felt sacrilegious - this was my second brain I was building after all. Needless to say, this led to a lot of feature creep, because my second brain had to be perfect.", "parent": "Second Brains.txt", "score": 0.523966908454895}, {"content": "I've been working on notetaking apps for years now. I starting working on the first one on the bus back from my internship. I had an idea for a simple interaction - users should be able to highlight a piece of text, then add tags to that text. I distinctly remember thinking to myself, \"That should be a piece of cake! I should be able to finish it during the 45 minute bus  ride.\"\n\n\nIt ended up taking the rest of the summer. I was 19, naive, and had no idea what a nightmare the contenteditable HTML standard was.", "parent": "Plaintext is your best friend.txt", "score": 0.5245357751846313}]}